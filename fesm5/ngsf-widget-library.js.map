{"version":3,"file":"ngsf-widget-library.js","sources":["ng://@ngsf/widget-library/lib/services/json-schema-form.service.ts","ng://@ngsf/widget-library/lib/directives/orderable.directive.ts","ng://@ngsf/widget-library/lib/functions/buildTitleMap.ts","ng://@ngsf/widget-library/lib/interfaces/title-map-item.ts","ng://@ngsf/widget-library/lib/interfaces/error-messages.ts","ng://@ngsf/widget-library/lib/components/add-reference.component.ts","ng://@ngsf/widget-library/lib/components/one-of.component.ts","ng://@ngsf/widget-library/lib/components/button.component.ts","ng://@ngsf/widget-library/lib/components/checkbox.component.ts","ng://@ngsf/widget-library/lib/components/checkboxes.component.ts","ng://@ngsf/widget-library/lib/components/file.component.ts","ng://@ngsf/widget-library/lib/components/input.component.ts","ng://@ngsf/widget-library/lib/components/message.component.ts","ng://@ngsf/widget-library/lib/components/none.component.ts","ng://@ngsf/widget-library/lib/components/number.component.ts","ng://@ngsf/widget-library/lib/components/radios.component.ts","ng://@ngsf/widget-library/lib/components/root.component.ts","ng://@ngsf/widget-library/lib/components/section.component.ts","ng://@ngsf/widget-library/lib/components/select.component.ts","ng://@ngsf/widget-library/lib/components/select-framework.component.ts","ng://@ngsf/widget-library/lib/components/select-widget.component.ts","ng://@ngsf/widget-library/lib/components/submit.component.ts","ng://@ngsf/widget-library/lib/components/tabs.component.ts","ng://@ngsf/widget-library/lib/components/template.component.ts","ng://@ngsf/widget-library/lib/components/textarea.component.ts","ng://@ngsf/widget-library/lib/services/widget-library.service.ts","ng://@ngsf/widget-library/lib/services/framework-library.service.ts","ng://@ngsf/widget-library/lib/components/hidden.component.ts","ng://@ngsf/widget-library/lib/components/tab.component.ts","ng://@ngsf/widget-library/lib/widget-library.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core'\nimport {AbstractControl, FormArray, FormGroup} from '@angular/forms'\nimport {Subject} from 'rxjs-compat/Subject'\nimport * as draft6 from 'ajv/lib/refs/json-schema-draft-06.json'\nimport Ajv from 'ajv'\nimport * as _ from 'lodash'\n\nimport {\n  fixTitle, forEach, hasOwn, toTitleCase,\n  hasValue, isArray, isDefined, isEmpty, isObject,\n  JsonPointer,\n  buildSchemaFromData, buildSchemaFromLayout, removeRecursiveReferences,\n  buildFormGroup, buildFormGroupTemplate, formatFormData, getControl,\n  buildLayout, getLayoutNode,\n  enValidationMessages,\n  frValidationMessages,\n  Framework\n} from '@ngsf/common'\nimport {ErrorMessages} from '../interfaces/error-messages'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n@Injectable()\nexport class JsonSchemaFormService {\n  JsonFormCompatibility = false\n  ReactJsonSchemaFormCompatibility = false\n  AngularSchemaFormCompatibility = false\n  tpldata: any = {}\n\n  ajvOptions: any = {allErrors: true, jsonPointers: true, unknownFormats: 'ignore'}\n  ajv: any = new Ajv(this.ajvOptions) // AJV: Another JSON Schema Validator\n\n  validateFormData: any = null // Compiled AJV function to validate active form's schema\n\n  formValues: any = {} // Internal form data (may not have correct types)\n  data: any = {} // Output form data (formValues, formatted with correct data types)\n  schema: any = {} // Internal JSON Schema\n  layout: any[] = [] // Internal form layout\n  formGroupTemplate: any = {} // Template used to create formGroup\n  formGroup: FormGroup = null // Angular formGroup, which powers the reactive form\n  framework: Framework = null // Active framework component\n  formOptions: any // Active options, used to configure the form\n\n  validData: any = null // Valid form data (or null) (=== isValid ? data : null)\n  isValid: boolean = null // Is current form data valid?\n  ajvErrors: any = null // Ajv errors for current data\n  validationErrors: any = null // Any validation errors for current data\n  dataErrors: any = new Map() //\n  formValueSubscription: any = null // Subscription to formGroup.valueChanges observable (for un- and re-subscribing)\n  dataChanges: Subject<any> = new Subject() // Form data observable\n  isValidChanges: Subject<any> = new Subject() // isValid observable\n  validationErrorChanges: Subject<any> = new Subject() // validationErrors observable\n\n  arrayMap: Map<string, number> = new Map() // Maps arrays in data object and number of tuple values\n  dataMap: Map<string, any> = new Map() // Maps paths in form data to schema and formGroup paths\n  dataRecursiveRefMap: Map<string, string> = new Map() // Maps recursive reference points in form data\n  schemaRecursiveRefMap: Map<string, string> = new Map() // Maps recursive reference points in schema\n  schemaRefLibrary: any = {} // Library of schemas for resolving schema $refs\n  layoutRefLibrary: any = {'': null} // Library of layout nodes for adding to form\n  templateRefLibrary: any = {} // Library of formGroup templates for adding to form\n  hasRootReference = false // Does the form include a recursive reference to itself?\n\n  language = 'en-US'\n\n  // Default global form options\n  defaultFormOptions: any = {\n    addSubmit: 'auto', // Add a submit button if layout does not have one?\n    // for addSubmit: true = always, false = never,\n    // 'auto' = only if layout is undefined (form is built from schema alone)\n    debug: false, // Show debugging output?\n    disableInvalidSubmit: true, // Disable submit if form invalid?\n    formDisabled: false, // Set entire form as disabled? (not editable, and disables outputs)\n    formReadonly: false, // Set entire form as read only? (not editable, but outputs still enabled)\n    fieldsRequired: false, // (set automatically) Are there any required fields in the form?\n    framework: 'no-framework', // The framework to load\n    loadExternalAssets: false, // Load external css and JavaScript for framework?\n    pristine: {errors: true, success: true},\n    supressPropertyTitles: false,\n    setSchemaDefaults: 'auto', // Set fefault values from schema?\n    // true = always set (unless overridden by layout default or formValues)\n    // false = never set\n    // 'auto' = set in addable components, and everywhere if formValues not set\n    setLayoutDefaults: 'auto', // Set fefault values from layout?\n    // true = always set (unless overridden by formValues)\n    // false = never set\n    // 'auto' = set in addable components, and everywhere if formValues not set\n    validateOnRender: 'auto', // Validate fields immediately, before they are touched?\n    // true = validate all fields immediately\n    // false = only validate fields after they are touched by user\n    // 'auto' = validate fields with values immediately, empty fields after they are touched\n    widgets: {}, // Any custom widgets to load\n    defautWidgetOptions: { // Default options for form control widgets\n      listItems: 1, // Number of list items to initially add to arrays with no default value\n      addable: true, // Allow adding items to an array or $ref point?\n      orderable: true, // Allow reordering items within an array?\n      removable: true, // Allow removing items from an array or $ref point?\n      enableErrorState: true, // Apply 'has-error' class when field fails validation?\n      // disableErrorState: false, // Don't apply 'has-error' class when field fails validation?\n      enableSuccessState: true, // Apply 'has-success' class when field validates?\n      // disableSuccessState: false, // Don't apply 'has-success' class when field validates?\n      feedback: false, // Show inline feedback icons?\n      feedbackOnRender: false, // Show errorMessage on Render?\n      notitle: false, // Hide title?\n      disabled: false, // Set control as disabled? (not editable, and excluded from output)\n      readonly: false, // Set control as read only? (not editable, but included in output)\n      returnEmptyFields: true, // return values for fields that contain no data?\n      validationMessages: {} // set by setLanguage()\n    },\n  }\n\n  constructor() {\n    this.setLanguage(this.language)\n\n    this.ajv.addMetaSchema(draft6)\n  }\n\n  setLanguage(language: string = 'en-US') {\n    this.language = language\n    const validationMessages = language.slice(0, 2) === 'fr' ?\n      frValidationMessages : enValidationMessages\n    this.defaultFormOptions.defautWidgetOptions.validationMessages =\n      _.cloneDeep(validationMessages)\n  }\n\n  getData() {\n    return this.data\n  }\n\n  getSchema() {\n    return this.schema\n  }\n\n  getLayout() {\n    return this.layout\n  }\n\n  public resetAllValues() {\n    this.JsonFormCompatibility = false\n    this.ReactJsonSchemaFormCompatibility = false\n    this.AngularSchemaFormCompatibility = false\n    this.tpldata = {}\n    this.validateFormData = null\n    this.formValues = {}\n    this.schema = {}\n    this.layout = []\n    this.formGroupTemplate = {}\n    this.formGroup = null\n    this.framework = null\n    this.data = {}\n    this.validData = null\n    this.isValid = null\n    this.validationErrors = null\n    this.arrayMap = new Map()\n    this.dataMap = new Map()\n    this.dataRecursiveRefMap = new Map()\n    this.schemaRecursiveRefMap = new Map()\n    this.layoutRefLibrary = {}\n    this.schemaRefLibrary = {}\n    this.templateRefLibrary = {}\n    this.formOptions = _.cloneDeep(this.defaultFormOptions)\n  }\n\n  /**\n   * 'buildRemoteError' function\n   *\n   * Example errors:\n   * {\n   *   last_name: [ {\n   *     message: 'Last name must start with capital letter.',\n   *     code: 'capital_letter'\n   *   } ],\n   *   email: [ {\n   *     message: 'Email must be from example.com domain.',\n   *     code: 'special_domain'\n   *   }, {\n   *     message: 'Email must contain an @ symbol.',\n   *     code: 'at_symbol'\n   *   } ]\n   * }\n   */\n  buildRemoteError(errors: ErrorMessages) {\n    forEach(errors, (value, key) => {\n      if (key in this.formGroup.controls) {\n        for (const error of value) {\n          const err = {}\n          err[error.code] = error.message\n          if (typeof key === 'string') {\n            this.formGroup.get(key).setErrors(err, {emitEvent: true})\n          } else {\n            console.error('Unhandled for error', key)\n          }\n        }\n      }\n    })\n  }\n\n  validateData(newValue: any, updateSubscriptions = true): void {\n\n    // Format raw form data to correct data types\n    this.data = formatFormData(\n      newValue, this.dataMap, this.dataRecursiveRefMap,\n      this.arrayMap, this.formOptions.returnEmptyFields\n    )\n    this.isValid = this.validateFormData(this.data)\n    this.validData = this.isValid ? this.data : null\n    const compileErrors = errors => {\n      const compiledErrors = {} as any\n      (errors || []).forEach(error => {\n        if (!compiledErrors[error.dataPath]) {\n          compiledErrors[error.dataPath] = []\n        }\n        compiledErrors[error.dataPath].push(error.message)\n      })\n      return compiledErrors\n    }\n    this.ajvErrors = this.validateFormData.errors\n    this.validationErrors = compileErrors(this.validateFormData.errors)\n    if (updateSubscriptions) {\n      this.dataChanges.next(this.data)\n      this.isValidChanges.next(this.isValid)\n      this.validationErrorChanges.next(this.ajvErrors)\n    }\n  }\n\n  buildFormGroupTemplate(formValues: any = null, setValues = true) {\n    this.formGroupTemplate = buildFormGroupTemplate(this, formValues, setValues)\n  }\n\n  buildFormGroup() {\n    this.formGroup = buildFormGroup(this.formGroupTemplate) as FormGroup\n    if (this.formGroup) {\n      this.compileAjvSchema()\n      this.validateData(this.formGroup.value)\n\n      // Set up observables to emit data and validation info when form data changes\n      if (this.formValueSubscription) {\n        this.formValueSubscription.unsubscribe()\n      }\n      this.formValueSubscription = this.formGroup.valueChanges\n        .subscribe(formValue => this.validateData(formValue))\n    }\n  }\n\n  buildLayout(widgetLibrary: any) {\n    this.layout = buildLayout(this, widgetLibrary)\n  }\n\n  setOptions(newOptions: any) {\n    if (isObject(newOptions)) {\n      const addOptions = _.cloneDeep(newOptions)\n      // Backward compatibility for 'defaultOptions' (renamed 'defautWidgetOptions')\n      if (isObject(addOptions.defaultOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defaultOptions)\n        delete addOptions.defaultOptions\n      }\n      if (isObject(addOptions.defautWidgetOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defautWidgetOptions)\n        delete addOptions.defautWidgetOptions\n      }\n      Object.assign(this.formOptions, addOptions)\n\n      // convert disableErrorState / disableSuccessState to enable...\n      const globalDefaults = this.formOptions.defautWidgetOptions\n      ;['ErrorState', 'SuccessState']\n        .filter(suffix => hasOwn(globalDefaults, 'disable' + suffix))\n        .forEach(suffix => {\n          globalDefaults['enable' + suffix] = !globalDefaults['disable' + suffix]\n          delete globalDefaults['disable' + suffix]\n        })\n    }\n  }\n\n  compileAjvSchema() {\n    if (!this.validateFormData) {\n\n      // if 'ui:order' exists in properties, move it to root before compiling with ajv\n      if (Array.isArray(this.schema.properties['ui:order'])) {\n        this.schema['ui:order'] = this.schema.properties['ui:order']\n        delete this.schema.properties['ui:order']\n      }\n      this.ajv.removeSchema(this.schema)\n      this.validateFormData = this.ajv.compile(this.schema)\n    }\n  }\n\n  buildSchemaFromData(data?: any, requireAllFields = false): any {\n    if (data) {\n      return buildSchemaFromData(data, requireAllFields)\n    }\n    this.schema = buildSchemaFromData(this.formValues, requireAllFields)\n  }\n\n  buildSchemaFromLayout(layout?: any): any {\n    if (layout) {\n      return buildSchemaFromLayout(layout)\n    }\n    this.schema = buildSchemaFromLayout(this.layout)\n  }\n\n\n  setTpldata(newTpldata: any = {}): void {\n    this.tpldata = newTpldata\n  }\n\n  parseText(\n    text = '', value: any = {}, values: any = {}, key: number | string = null\n  ): string {\n    if (!text || !/{{.+?}}/.test(text)) {\n      return text\n    }\n    return text.replace(/{{(.+?)}}/g, (...a) =>\n      this.parseExpression(a[1], value, values, key, this.tpldata)\n    )\n  }\n\n  parseExpression(\n    expression = '', value: any = {}, values: any = {},\n    key: number | string = null, tpldata: any = null\n  ) {\n    if (typeof expression !== 'string') {\n      return ''\n    }\n    const index = typeof key === 'number' ? (key + 1) + '' : (key || '')\n    expression = expression.trim()\n    if ((expression[0] === '\\'' || expression[0] === '\"') &&\n      expression[0] === expression[expression.length - 1] &&\n      expression.slice(1, expression.length - 1).indexOf(expression[0]) === -1\n    ) {\n      return expression.slice(1, expression.length - 1)\n    }\n    if (expression === 'idx' || expression === '$index') {\n      return index\n    }\n    if (expression === 'value' && !hasOwn(values, 'value')) {\n      return value\n    }\n    if (['\"', '\\'', ' ', '||', '&&', '+'].every(delimiter => expression.indexOf(delimiter) === -1)) {\n      const pointer = JsonPointer.parseObjectPath(expression)\n      return pointer[0] === 'value' && JsonPointer.has(value, pointer.slice(1)) ?\n        JsonPointer.get(value, pointer.slice(1)) :\n        pointer[0] === 'values' && JsonPointer.has(values, pointer.slice(1)) ?\n          JsonPointer.get(values, pointer.slice(1)) :\n          pointer[0] === 'tpldata' && JsonPointer.has(tpldata, pointer.slice(1)) ?\n            JsonPointer.get(tpldata, pointer.slice(1)) :\n            JsonPointer.has(values, pointer) ? JsonPointer.get(values, pointer) : ''\n    }\n    if (expression.indexOf('[idx]') > -1) {\n      expression = expression.replace(/\\[idx\\]/g, index)\n    }\n    if (expression.indexOf('[$index]') > -1) {\n      expression = expression.replace(/\\[$index\\]/g, index)\n    }\n    // TODO: Improve expression evaluation by parsing quoted strings first\n    // let expressionArray = expression.match(/([^\"']+|\"[^\"]+\"|'[^']+')/g)\n    if (expression.indexOf('||') > -1) {\n      return expression.split('||').reduce((all, term) =>\n        all || this.parseExpression(term, value, values, key, tpldata), ''\n      )\n    }\n    if (expression.indexOf('&&') > -1) {\n      return expression.split('&&').reduce((all, term) =>\n        all && this.parseExpression(term, value, values, key, tpldata), ' '\n      ).trim()\n    }\n    if (expression.indexOf('+') > -1) {\n      return expression.split('+')\n        .map(term => this.parseExpression(term, value, values, key, tpldata))\n        .join('')\n    }\n    return ''\n  }\n\n  setArrayItemTitle(\n    parentCtx: any = {}, childNode: any = null, index: number = null\n  ): string {\n    const parentNode = parentCtx.layoutNode\n    const parentValues: any = this.getFormControlValue(parentCtx)\n    const isArrayItem =\n      (parentNode.type || '').slice(-5) === 'array' && isArray(parentValues)\n    const text = JsonPointer.getFirst(\n      isArrayItem && childNode.type !== '$ref' ? [\n        [childNode, '/options/legend'],\n        [childNode, '/options/title'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend'],\n      ] : [\n        [childNode, '/options/title'],\n        [childNode, '/options/legend'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend']\n      ]\n    )\n    if (!text) {\n      return text\n    }\n    const childValue = isArray(parentValues) && index < parentValues.length ?\n      parentValues[index] : parentValues\n    return this.parseText(text, childValue, parentValues, index)\n  }\n\n  setItemTitle(ctx: any) {\n    return !ctx.options.title && /^(\\d+|-)$/.test(ctx.layoutNode.name) ?\n      null :\n      this.parseText(\n        ctx.options.title || toTitleCase(ctx.layoutNode.name),\n        this.getFormControlValue(this),\n        (this.getFormControlGroup(this) || {} as any).value,\n        ctx.dataIndex[ctx.dataIndex.length - 1]\n      )\n  }\n\n  evaluateCondition(layoutNode: any, dataIndex: number[]): boolean {\n    const arrayIndex = dataIndex && dataIndex[dataIndex.length - 1]\n    let result = true\n    if (hasValue((layoutNode.options || {}).condition)) {\n      if (typeof layoutNode.options.condition === 'string') {\n        let pointer = layoutNode.options.condition\n        if (hasValue(arrayIndex)) {\n          pointer = pointer.replace('[arrayIndex]', `[${arrayIndex}]`)\n        }\n        pointer = JsonPointer.parseObjectPath(pointer)\n        result = !!JsonPointer.get(this.data, pointer)\n        if (!result && pointer[0] === 'model') {\n          result = !!JsonPointer.get({model: this.data}, pointer)\n        }\n      } else if (typeof layoutNode.options.condition === 'function') {\n        result = layoutNode.options.condition(this.data)\n      } else if (typeof layoutNode.options.condition.functionBody === 'string') {\n        try {\n          const dynFn = new Function(\n            'model', 'arrayIndices', layoutNode.options.condition.functionBody\n          )\n          result = dynFn(this.data, dataIndex)\n        } catch (e) {\n          result = true\n          console.error('condition functionBody errored out on evaluation: ' + layoutNode.options.condition.functionBody)\n        }\n      }\n    }\n    return result\n  }\n\n  initializeControl(ctx: any, bind = true): boolean {\n    if (!isObject(ctx)) {\n      return false\n    }\n    if (isEmpty(ctx.options)) {\n      ctx.options = !isEmpty((ctx.layoutNode || {}).options) ?\n        ctx.layoutNode.options : _.cloneDeep(this.formOptions)\n    }\n    ctx.formControl = this.getFormControl(ctx)\n    ctx.boundControl = bind && !!ctx.formControl\n    if (ctx.formControl) {\n      ctx.controlName = this.getFormControlName(ctx)\n      ctx.controlValue = ctx.formControl.value\n      ctx.controlDisabled = ctx.formControl.disabled\n      ctx.options.errorMessage = ctx.formControl.status === 'VALID' ? null :\n        this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages)\n      ctx.options.showErrors = this.formOptions.validateOnRender === true ||\n        (this.formOptions.validateOnRender === 'auto' && hasValue(ctx.controlValue))\n      ctx.formControl.statusChanges.subscribe(status =>\n        ctx.options.errorMessage = status === 'VALID' ? null :\n          this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages)\n      )\n      ctx.formControl.valueChanges.subscribe(value => {\n        if (!_.isEqual(ctx.controlValue, value)) {\n          ctx.controlValue = value\n        }\n      })\n    } else {\n      ctx.controlName = ctx.layoutNode.name\n      ctx.controlValue = ctx.layoutNode.value || null\n      const dataPointer = this.getDataPointer(ctx)\n      if (bind && dataPointer) {\n        console.error(`warning: control \"${dataPointer}\" is not bound to the Angular FormGroup.`)\n      }\n    }\n    return ctx.boundControl\n  }\n\n  formatErrors(errors: any, validationMessages: any = {}): string {\n    if (isEmpty(errors)) {\n      return null\n    }\n    if (!isObject(validationMessages)) {\n      validationMessages = {}\n    }\n    const addSpaces = (value: string) => value[0].toUpperCase() + (value.slice(1) || '')\n      .replace(/([a-z])([A-Z])/g, '$1 $2').replace(/_/g, ' ')\n    const formatError = (error) => typeof error === 'object' ?\n      Object.keys(error).map(key =>\n        error[key] === true ? addSpaces(key) :\n          error[key] === false ? 'Not ' + addSpaces(key) :\n            addSpaces(key) + ': ' + formatError(error[key])\n      ).join(', ') :\n      addSpaces(error.toString())\n    const messages = []\n    return Object.keys(errors)\n    // Hide 'required' error, unless it is the only one\n      .filter(errorKey => errorKey !== 'required' || Object.keys(errors).length === 1)\n      .map(errorKey =>\n        // If validationMessages is a string, return it\n        typeof validationMessages === 'string' ? validationMessages :\n          // If custom error message is a function, return function result\n          typeof validationMessages[errorKey] === 'function' ?\n            validationMessages[errorKey](errors[errorKey]) :\n            // If custom error message is a string, replace placeholders and return\n            typeof validationMessages[errorKey] === 'string' ?\n              // Does error message have any {{property}} placeholders?\n              !/{{.+?}}/.test(validationMessages[errorKey]) ?\n                validationMessages[errorKey] :\n                // Replace {{property}} placeholders with values\n                Object.keys(errors[errorKey])\n                  .reduce((errorMessage, errorProperty) => errorMessage.replace(\n                    new RegExp('{{' + errorProperty + '}}', 'g'),\n                    errors[errorKey][errorProperty]\n                  ), validationMessages[errorKey]) :\n              // If no custom error message, return formatted error data instead\n              addSpaces(errorKey) + ' Error: ' + formatError(errors[errorKey])\n      ).join('<br>')\n  }\n\n  updateValue(ctx: any, value: any): void {\n\n    // Set value of current control\n    ctx.controlValue = value\n    if (ctx.boundControl) {\n      ctx.formControl.setValue(value)\n      ctx.formControl.markAsDirty()\n    }\n    ctx.layoutNode.value = value\n\n    // Set values of any related controls in copyValueTo array\n    if (isArray(ctx.options.copyValueTo)) {\n      for (const item of ctx.options.copyValueTo) {\n        const targetControl = getControl(this.formGroup, item)\n        if (isObject(targetControl) && typeof targetControl.setValue === 'function') {\n          targetControl.setValue(value)\n          targetControl.markAsDirty()\n        }\n      }\n    }\n  }\n\n  updateArrayCheckboxList(ctx: any, checkboxList: TitleMapItem[]): void {\n    const formArray = this.getFormControl(ctx) as FormArray\n\n    // Remove all existing items\n    while (formArray.value.length) {\n      formArray.removeAt(0)\n    }\n\n    // Re-add an item for each checked box\n    const refPointer = removeRecursiveReferences(\n      ctx.layoutNode.dataPointer + '/-', this.dataRecursiveRefMap, this.arrayMap\n    )\n    for (const checkboxItem of checkboxList) {\n      if (checkboxItem.checked) {\n        const newFormControl = buildFormGroup(this.templateRefLibrary[refPointer])\n        newFormControl.setValue(checkboxItem.value)\n        formArray.push(newFormControl)\n      }\n    }\n    formArray.markAsDirty()\n  }\n\n  getFormControl(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) {\n      return null\n    }\n    return getControl(this.formGroup, this.getDataPointer(ctx))\n  }\n\n  getFormControlValue(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) {\n      return null\n    }\n    const control = getControl(this.formGroup, this.getDataPointer(ctx))\n    return control ? control.value : null\n  }\n\n  getFormControlGroup(ctx: any): FormArray | FormGroup {\n    if (!ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer)) {\n      return null\n    }\n    return getControl(this.formGroup, this.getDataPointer(ctx), true)\n  }\n\n  getFormControlName(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return null\n    }\n    return JsonPointer.toKey(this.getDataPointer(ctx))\n  }\n\n  getLayoutArray(ctx: any): any[] {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -1)\n  }\n\n  getParentNode(ctx: any): any {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -2)\n  }\n\n  getDataPointer(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return null\n    }\n    return JsonPointer.toIndexedPointer(\n      ctx.layoutNode.dataPointer, ctx.dataIndex, this.arrayMap\n    )\n  }\n\n  getLayoutPointer(ctx: any): string {\n    if (!hasValue(ctx.layoutIndex)) {\n      return null\n    }\n    return '/' + ctx.layoutIndex.join('/items/')\n  }\n\n  isControlBound(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return false\n    }\n    const controlGroup = this.getFormControlGroup(ctx)\n    const name = this.getFormControlName(ctx)\n    return controlGroup ? hasOwn(controlGroup.controls, name) : false\n  }\n\n  addItem(ctx: any, name?: string): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.$ref) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) {\n      return false\n    }\n\n    // Create a new Angular form control from a template in templateRefLibrary\n    const newFormGroup = buildFormGroup(this.templateRefLibrary[ctx.layoutNode.$ref])\n\n    // Add the new form control to the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Add new array item to formArray\n      (this.getFormControlGroup(ctx) as any).push(newFormGroup)\n    } else { // Add new $ref item to formGroup\n      (this.getFormControlGroup(ctx) as any)\n        .addControl(name || this.getFormControlName(ctx), newFormGroup)\n    }\n\n    // Copy a new layoutNode from layoutRefLibrary\n    const newLayoutNode = getLayoutNode(ctx.layoutNode, this)\n    newLayoutNode.arrayItem = ctx.layoutNode.arrayItem\n    if (ctx.layoutNode.arrayItemType) {\n      newLayoutNode.arrayItemType = ctx.layoutNode.arrayItemType\n    } else {\n      delete newLayoutNode.arrayItemType\n    }\n    if (name) {\n      newLayoutNode.name = name\n      newLayoutNode.dataPointer += '/' + JsonPointer.escape(name)\n      newLayoutNode.options.title = fixTitle(name)\n    }\n\n    // Add the new layoutNode to the form layout\n    JsonPointer.insert(this.layout, this.getLayoutPointer(ctx), newLayoutNode)\n\n    return true\n  }\n\n  moveArrayItem(ctx: any, oldIndex: number, newIndex: number): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex) ||\n      !isDefined(oldIndex) || !isDefined(newIndex) || oldIndex === newIndex\n    ) {\n      return false\n    }\n\n    // Move item in the formArray\n    const formArray = this.getFormControlGroup(ctx) as FormArray\n    const arrayItem = formArray.at(oldIndex)\n    formArray.removeAt(oldIndex)\n    formArray.insert(newIndex, arrayItem)\n    formArray.updateValueAndValidity()\n\n    // Move layout item\n    const layoutArray = this.getLayoutArray(ctx)\n    layoutArray.splice(newIndex, 0, layoutArray.splice(oldIndex, 1)[0])\n    return true\n  }\n\n  removeItem(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) {\n      return false\n    }\n\n    // Remove the Angular form control from the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Remove array item from formArray\n      (this.getFormControlGroup(ctx) as FormArray)\n        .removeAt(ctx.dataIndex[ctx.dataIndex.length - 1])\n    } else { // Remove $ref item from formGroup\n      (this.getFormControlGroup(ctx) as FormGroup)\n        .removeControl(this.getFormControlName(ctx))\n    }\n\n    // Remove layoutNode from layout\n    JsonPointer.remove(this.layout, this.getLayoutPointer(ctx))\n    return true\n  }\n}\n","import {Directive, ElementRef, Input, NgZone, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n/**\n * OrderableDirective\n *\n * Enables array elements to be reordered by dragging and dropping.\n *\n * Only works for arrays that have at least two elements.\n *\n * Also detects arrays-within-arrays, and correctly moves either\n * the child array element or the parent array element,\n * depending on the drop targert.\n *\n * Listeners for movable element being dragged:\n * - dragstart: add 'dragging' class to element, set effectAllowed = 'move'\n * - dragover: set dropEffect = 'move'\n * - dragend: remove 'dragging' class from element\n *\n * Listeners for stationary items being dragged over:\n * - dragenter: add 'drag-target-...' classes to element\n * - dragleave: remove 'drag-target-...' classes from element\n * - drop: remove 'drag-target-...' classes from element, move dropped array item\n */\n@Directive({\n  selector: '[orderable]',\n})\nexport class OrderableDirective implements OnInit {\n  arrayLayoutIndex: string\n  element: any\n  overParentElement = false\n  overChildElement = false\n  @Input() orderable: boolean\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private elementRef: ElementRef,\n    private jsf: JsonSchemaFormService,\n    private ngZone: NgZone\n  ) {\n  }\n\n  ngOnInit() {\n    if (this.orderable && this.layoutNode && this.layoutIndex && this.dataIndex) {\n      this.element = this.elementRef.nativeElement\n      this.element.draggable = true\n      this.arrayLayoutIndex = 'move:' + this.layoutIndex.slice(0, -1).toString()\n\n      this.ngZone.runOutsideAngular(() => {\n\n        // Listeners for movable element being dragged:\n\n        this.element.addEventListener('dragstart', (event) => {\n          event.dataTransfer.effectAllowed = 'move'\n          // Hack to bypass stupid HTML drag-and-drop dataTransfer protection\n          // so drag source info will be available on dragenter\n          const sourceArrayIndex = this.dataIndex[this.dataIndex.length - 1]\n          sessionStorage.setItem(this.arrayLayoutIndex, sourceArrayIndex + '')\n        })\n\n        this.element.addEventListener('dragover', (event) => {\n          if (event.preventDefault) {\n            event.preventDefault()\n          }\n          event.dataTransfer.dropEffect = 'move'\n          return false\n        })\n\n        // Listeners for stationary items being dragged over:\n\n        this.element.addEventListener('dragenter', (event) => {\n          // Part 1 of a hack, inspired by Dragster, to simulate mouseover and mouseout\n          // behavior while dragging items - http://bensmithett.github.io/dragster/\n          if (this.overParentElement) {\n            return this.overChildElement = true\n          } else {\n            this.overParentElement = true\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          if (sourceArrayIndex !== null) {\n            if (this.dataIndex[this.dataIndex.length - 1] < +sourceArrayIndex) {\n              this.element.classList.add('drag-target-top')\n            } else if (this.dataIndex[this.dataIndex.length - 1] > +sourceArrayIndex) {\n              this.element.classList.add('drag-target-bottom')\n            }\n          }\n        })\n\n        this.element.addEventListener('dragleave', (event) => {\n          // Part 2 of the Dragster hack\n          if (this.overChildElement) {\n            this.overChildElement = false\n          } else if (this.overParentElement) {\n            this.overParentElement = false\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          if (!this.overParentElement && !this.overChildElement && sourceArrayIndex !== null) {\n            this.element.classList.remove('drag-target-top')\n            this.element.classList.remove('drag-target-bottom')\n          }\n        })\n\n        this.element.addEventListener('drop', (event) => {\n          this.element.classList.remove('drag-target-top')\n          this.element.classList.remove('drag-target-bottom')\n          // Confirm that drop target is another item in the same array as source item\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          const destArrayIndex = this.dataIndex[this.dataIndex.length - 1]\n          if (sourceArrayIndex !== null && +sourceArrayIndex !== destArrayIndex) {\n            // Move array item\n            this.jsf.moveArrayItem(this, +sourceArrayIndex, destArrayIndex)\n          }\n          sessionStorage.removeItem(this.arrayLayoutIndex)\n          return false\n        })\n      })\n    }\n  }\n}\n","import {isArray, isObject, isString, hasOwn} from '@ngsf/common'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n/**\n * 'buildTitleMap' function\n */\nexport function buildTitleMap(\n  titleMap: any,\n  enumList: any,\n  fieldRequired: boolean = true,\n  flatList: boolean = true\n): TitleMapItem[] {\n  let newTitleMap: TitleMapItem[] = []\n  let hasEmptyValue = false\n  if (titleMap) {\n    if (isArray(titleMap)) {\n      if (enumList) {\n        for (const i of Object.keys(titleMap)) {\n          if (isObject(titleMap[i])) { // JSON Form style\n            const value = titleMap[i].value\n            if (enumList.includes(value)) {\n              const name = titleMap[i].name\n              newTitleMap.push({name, value})\n              if (value === undefined || value === null) {\n                hasEmptyValue = true\n              }\n            }\n          } else if (isString(titleMap[i])) { // React Jsonschema Form style\n            if (i < enumList.length) {\n              const name = titleMap[i]\n              const value = enumList[i]\n              newTitleMap.push({name, value})\n              if (value === undefined || value === null) {\n                hasEmptyValue = true\n              }\n            }\n          }\n        }\n      } else { // If array titleMap and no enum list, just return the titleMap - Angular Schema Form style\n        newTitleMap = titleMap\n        if (!fieldRequired) {\n          hasEmptyValue = !!newTitleMap\n            .filter(i => i.value === undefined || i.value === null)\n            .length\n        }\n      }\n    } else if (enumList) { // Alternate JSON Form style, with enum list\n      for (const i of Object.keys(enumList)) {\n        const value = enumList[i]\n        if (hasOwn(titleMap, value)) {\n          const name = titleMap[value]\n          newTitleMap.push({name, value})\n          if (value === undefined || value === null) {\n            hasEmptyValue = true\n          }\n        }\n      }\n    } else { // Alternate JSON Form style, without enum list\n      for (const value of Object.keys(titleMap)) {\n        const name = titleMap[value]\n        newTitleMap.push({name, value})\n        if (value === undefined || value === null) {\n          hasEmptyValue = true\n        }\n      }\n    }\n  } else if (enumList) { // Build map from enum list alone\n    for (const i of Object.keys(enumList)) {\n      const name = enumList[i]\n      const value = enumList[i]\n      newTitleMap.push({name, value})\n      if (value === undefined || value === null) {\n        hasEmptyValue = true\n      }\n    }\n  } else { // If no titleMap and no enum list, return default map of boolean values\n    newTitleMap = [{name: 'True', value: true}, {name: 'False', value: false}]\n  }\n\n  // Does titleMap have groups?\n  if (newTitleMap.some(title => hasOwn(title, 'group'))) {\n    hasEmptyValue = false\n\n    // If flatList = true, flatten items & update name to group: name\n    if (flatList) {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (isArray(title.items)) {\n            groupTitleMap = [\n              ...groupTitleMap,\n              ...title.items.map(item =>\n                ({...item, ...{name: `${title.group}: ${item.name}`}})\n              )\n            ]\n            if (title.items.some(item => item.value === undefined || item.value === null)) {\n              hasEmptyValue = true\n            }\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            title.name = `${title.group}: ${title.name}`\n            delete title.group\n            groupTitleMap.push(title)\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true\n            }\n          }\n        } else {\n          groupTitleMap.push(title)\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true\n          }\n        }\n        return groupTitleMap\n      }, [])\n\n      // If flatList = false, combine items from matching groups\n    } else {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (title.group !== (groupTitleMap[groupTitleMap.length - 1] || {}).group) {\n            groupTitleMap.push({group: title.group, items: title.items || []})\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            groupTitleMap[groupTitleMap.length - 1].items\n              .push({name: title.name, value: title.value})\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true\n            }\n          }\n        } else {\n          groupTitleMap.push(title)\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true\n          }\n        }\n        return groupTitleMap\n      }, [])\n    }\n  }\n  if (!fieldRequired && !hasEmptyValue) {\n    newTitleMap.unshift({name: '<em>None</em>', value: null})\n  }\n  return newTitleMap\n}\n","export interface TitleMapItem {\n  name?: string\n  value?: any\n  checked?: boolean\n  group?: string\n  items?: TitleMapItem[]\n}\n","export interface ErrorMessages {\n  // [controlName: string]: { message: string | Function | Object, code: string }[]\n  [controlName: string]: { message: any, code: string }[]\n}\n\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'add-reference-widget',\n  template: `\n      <button *ngIf=\"showAddButton\"\n              [class]=\"options?.fieldHtmlClass || ''\"\n              [disabled]=\"options?.readonly\"\n              (click)=\"addItem($event)\">\n          <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n          <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n      </button>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class AddReferenceComponent implements OnInit {\n  options: any\n  itemCount: number\n  previousLayoutIndex: number[]\n  previousDataIndex: number[]\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this)\n    }\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount)\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n\n  addItem(event) {\n    event.preventDefault()\n    this.jsf.addItem(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'one-of-widget',\n  template: ``,\n})\nexport class OneOfComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'button-widget',\n  template: `\n      <div\n              [class]=\"options?.htmlClass || ''\">\n          <button\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [class]=\"options?.fieldHtmlClass || ''\"\n                  [disabled]=\"controlDisabled\"\n                  [name]=\"controlName\"\n                  [type]=\"layoutNode?.type\"\n                  [value]=\"controlValue\"\n                  (click)=\"updateValue($event)\">\n        <span *ngIf=\"options?.icon || options?.title\"\n              [class]=\"options?.icon\"\n              [innerHTML]=\"options?.title\"></span>\n          </button>\n      </div>`,\n})\nexport class ButtonComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'checkbox-widget',\n  template: `\n      <label\n              [attr.for]=\"'control' + layoutNode?._id\"\n              [class]=\"options?.itemLabelHtmlClass || ''\">\n          <input *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 type=\"checkbox\">\n          <input *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [checked]=\"isChecked ? 'checked' : null\"\n                 [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [value]=\"controlValue\"\n                 type=\"checkbox\"\n                 (change)=\"updateValue($event)\">\n          <span *ngIf=\"options?.title\"\n                [style.display]=\"options?.notitle ? 'none' : ''\"\n                [innerHTML]=\"options?.title\"></span>\n      </label>`,\n})\nexport class CheckboxComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  trueValue: any = true\n  falseValue: any = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title\n    }\n  }\n\n  updateValue(event) {\n    event.preventDefault()\n    this.jsf.updateValue(this, event.target.checked ? this.trueValue : this.falseValue)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap} from '../functions/buildTitleMap'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n@Component({\n  selector: 'checkboxes-widget',\n  template: `\n      <label *ngIf=\"options?.title\"\n             [class]=\"options?.labelHtmlClass || ''\"\n             [style.display]=\"options?.notitle ? 'none' : ''\"\n             [innerHTML]=\"options?.title\"></label>\n\n      <!-- 'horizontal' = checkboxes-inline or checkboxbuttons -->\n      <div *ngIf=\"layoutOrientation === 'horizontal'\" [class]=\"options?.htmlClass || ''\">\n          <label *ngFor=\"let checkboxItem of checkboxList\"\n                 [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                 [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n              <input type=\"checkbox\"\n                     [attr.required]=\"options?.required\"\n                     [checked]=\"checkboxItem.checked\"\n                     [class]=\"options?.fieldHtmlClass || ''\"\n                     [disabled]=\"controlDisabled\"\n                     [id]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                     [name]=\"checkboxItem?.name\"\n                     [readonly]=\"options?.readonly ? 'readonly' : null\"\n                     [value]=\"checkboxItem.value\"\n                     (change)=\"updateValue($event)\">\n              <span [innerHTML]=\"checkboxItem.name\"></span>\n          </label>\n      </div>\n\n      <!-- 'vertical' = regular checkboxes -->\n      <div *ngIf=\"layoutOrientation === 'vertical'\">\n          <div *ngFor=\"let checkboxItem of checkboxList\" [class]=\"options?.htmlClass || ''\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                      [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n                  <input type=\"checkbox\"\n                         [attr.required]=\"options?.required\"\n                         [checked]=\"checkboxItem.checked\"\n                         [class]=\"options?.fieldHtmlClass || ''\"\n                         [disabled]=\"controlDisabled\"\n                         [id]=\"options?.name + '/' + checkboxItem.value\"\n                         [name]=\"checkboxItem?.name\"\n                         [readonly]=\"options?.readonly ? 'readonly' : null\"\n                         [value]=\"checkboxItem.value\"\n                         (change)=\"updateValue($event)\">\n                  <span [innerHTML]=\"checkboxItem?.name\"></span>\n              </label>\n          </div>\n      </div>`,\n})\nexport class CheckboxesComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  layoutOrientation: string\n  formArray: AbstractControl\n  checkboxList: TitleMapItem[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.layoutOrientation = (this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons') ? 'horizontal' : 'vertical'\n    this.jsf.initializeControl(this)\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    )\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this)\n      this.checkboxList.forEach(checkboxItem =>\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value)\n      )\n    }\n  }\n\n  updateValue(event) {\n    for (const checkboxItem of this.checkboxList) {\n      if (event.target.value === checkboxItem.value) {\n        checkboxItem.checked = event.target.checked\n      }\n    }\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'file-widget',\n  template: ``,\n})\nexport class FileComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'input-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <input *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\">\n      <input *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">\n        <datalist *ngIf=\"options?.typeahead?.source\"\n          [id]=\"'control' + layoutNode?._id + 'Autocomplete'\">\n          <option *ngFor=\"let word of options?.typeahead?.source\" [value]=\"word\">\n        </datalist>\n    </div>`,\n})\nexport class InputComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: string\n  controlDisabled = false\n  boundControl = false\n  options: any\n  autoCompleteList: string[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'message-widget',\n  template: `\n    <span *ngIf=\"message\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [innerHTML]=\"message\"></span>`,\n})\nexport class MessageComponent implements OnInit {\n  options: any\n  message: string = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.message = this.options.help || this.options.helpvalue ||\n      this.options.msg || this.options.message\n  }\n}\n","import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'none-widget',\n  template: ``,\n})\nexport class NoneComponent {\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'number-widget',\n  template: `\n      <div [class]=\"options?.htmlClass || ''\">\n          <label *ngIf=\"options?.title\"\n                 [attr.for]=\"'control' + layoutNode?._id\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [style.display]=\"options?.notitle ? 'none' : ''\"\n                 [innerHTML]=\"options?.title\"></label>\n          <input *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.placeholder]=\"options?.placeholder\"\n                 [attr.required]=\"options?.required\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [class]=\"options?.fieldHtmlClass || ''\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [title]=\"lastValidNumber\"\n                 [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\">\n          <input *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.placeholder]=\"options?.placeholder\"\n                 [attr.required]=\"options?.required\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [class]=\"options?.fieldHtmlClass || ''\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [title]=\"lastValidNumber\"\n                 [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\">\n          <span *ngIf=\"layoutNode?.type === 'range'\" [innerHTML]=\"controlValue\"></span>\n      </div>`,\n})\nexport class NumberComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  allowNegative = true\n  allowDecimal = true\n  allowExponents = false\n  lastValidNumber = ''\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.layoutNode.dataType === 'integer') {\n      this.allowDecimal = false\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap} from '../functions/buildTitleMap'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'radios-widget',\n  template: `\n    <label *ngIf=\"options?.title\"\n      [attr.for]=\"'control' + layoutNode?._id\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [style.display]=\"options?.notitle ? 'none' : ''\"\n      [innerHTML]=\"options?.title\"></label>\n\n    <!-- 'horizontal' = radios-inline or radiobuttons -->\n    <div *ngIf=\"layoutOrientation === 'horizontal'\"\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngFor=\"let radioItem of radiosList\"\n        [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n        [class]=\"(options?.itemLabelHtmlClass || '') +\n          ((controlValue + '' === radioItem?.value + '') ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n        <input type=\"radio\"\n          [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n          [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n          [attr.required]=\"options?.required\"\n          [checked]=\"radioItem?.value === controlValue\"\n          [class]=\"options?.fieldHtmlClass || ''\"\n          [disabled]=\"controlDisabled\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [name]=\"controlName\"\n          [value]=\"radioItem?.value\"\n          (change)=\"updateValue($event)\">\n        <span [innerHTML]=\"radioItem?.name\"></span>\n      </label>\n    </div>\n\n    <!-- 'vertical' = regular radios -->\n    <div *ngIf=\"layoutOrientation !== 'horizontal'\">\n      <div *ngFor=\"let radioItem of radiosList\"\n        [class]=\"options?.htmlClass || ''\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [class]=\"(options?.itemLabelHtmlClass || '') +\n            ((controlValue + '' === radioItem?.value + '') ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n          <input type=\"radio\"\n            [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n            [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n            [attr.required]=\"options?.required\"\n            [checked]=\"radioItem?.value === controlValue\"\n            [class]=\"options?.fieldHtmlClass || ''\"\n            [disabled]=\"controlDisabled\"\n            [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n            [name]=\"controlName\"\n            [value]=\"radioItem?.value\"\n            (change)=\"updateValue($event)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </label>\n      </div>\n    </div>`,\n})\nexport class RadiosComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  layoutOrientation = 'vertical'\n  radiosList: any[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    if (this.layoutNode.type === 'radios-inline' ||\n      this.layoutNode.type === 'radiobuttons'\n    ) {\n      this.layoutOrientation = 'horizontal'\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'root-widget',\n  template: `\n    <div *ngFor=\"let layoutItem of layout; let i = index\"\n      [class.form-flex-item]=\"isFlexItem\"\n      [style.align-self]=\"(layoutItem.options || {})['align-self']\"\n      [style.flex-basis]=\"getFlexAttribute(layoutItem, 'flex-basis')\"\n      [style.flex-grow]=\"getFlexAttribute(layoutItem, 'flex-grow')\"\n      [style.flex-shrink]=\"getFlexAttribute(layoutItem, 'flex-shrink')\"\n      [style.order]=\"(layoutItem.options || {}).order\">\n      <div\n        [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"\n        [orderable]=\"isDraggable(layoutItem)\">\n        <select-framework-widget *ngIf=\"showWidget(layoutItem)\"\n          [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n          [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n          [layoutNode]=\"layoutItem\"></select-framework-widget>\n      </div>\n    </div>`,\n  styles: [`\n    [draggable=true] {\n      transition: all 150ms cubic-bezier(.4, 0, .2, 1);\n    }\n    [draggable=true]:hover {\n      cursor: move;\n      box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n      position: relative; z-index: 10;\n      margin-top: -1px;\n      margin-left: -1px;\n      margin-right: 1px;\n      margin-bottom: 1px;\n    }\n    [draggable=true].drag-target-top {\n      box-shadow: 0 -2px 0 #000;\n      position: relative; z-index: 20;\n    }\n    [draggable=true].drag-target-bottom {\n      box-shadow: 0 2px 0 #000;\n      position: relative; z-index: 20;\n    }\n  `],\n})\nexport class RootComponent {\n  options: any\n  @Input() dataIndex: number[]\n  @Input() layoutIndex: number[]\n  @Input() layout: any[]\n  @Input() isOrderable: boolean\n  @Input() isFlexItem = false\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  isDraggable(node: any): boolean {\n    return node.arrayItem && node.type !== '$ref' &&\n      node.arrayItemType === 'list' && this.isOrderable !== false\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute)\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index]\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'section-widget',\n  template: `\n      <div *ngIf=\"containerType === 'div'\"\n           [class]=\"options?.htmlClass || ''\"\n           [class.expandable]=\"options?.expandable && !expanded\"\n           [class.expanded]=\"options?.expandable && expanded\">\n          <label *ngIf=\"sectionTitle\"\n                 class=\"legend\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [innerHTML]=\"sectionTitle\"\n                 (click)=\"toggleExpanded()\"></label>\n          <root-widget *ngIf=\"expanded\"\n                       [dataIndex]=\"dataIndex\"\n                       [layout]=\"layoutNode.items\"\n                       [layoutIndex]=\"layoutIndex\"\n                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                       [isOrderable]=\"options?.orderable\"\n                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                       [style.display]=\"getFlexAttribute('display')\"\n                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                       [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n      </div>\n      <fieldset *ngIf=\"containerType === 'fieldset'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\"\n                [disabled]=\"options?.readonly\">\n          <legend *ngIf=\"sectionTitle\"\n                  class=\"legend\"\n                  [class]=\"options?.labelHtmlClass || ''\"\n                  [innerHTML]=\"sectionTitle\"\n                  (click)=\"toggleExpanded()\"></legend>\n          <div *ngIf=\"options?.messageLocation !== 'bottom'\">\n              <p *ngIf=\"options?.description\"\n                 class=\"help-block\"\n                 [class]=\"options?.labelHelpBlockClass || ''\"\n                 [innerHTML]=\"options?.description\"></p>\n          </div>\n          <root-widget *ngIf=\"expanded\"\n                       [dataIndex]=\"dataIndex\"\n                       [layout]=\"layoutNode.items\"\n                       [layoutIndex]=\"layoutIndex\"\n                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                       [isOrderable]=\"options?.orderable\"\n                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                       [style.display]=\"getFlexAttribute('display')\"\n                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                       [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n          <div *ngIf=\"options?.messageLocation === 'bottom'\">\n              <p *ngIf=\"options?.description\"\n                 class=\"help-block\"\n                 [class]=\"options?.labelHelpBlockClass || ''\"\n                 [innerHTML]=\"options?.description\"></p>\n          </div>\n      </fieldset>`,\n  styles: [`\n    .legend { font-weight: bold; }\n    .expandable > legend:before, .expandable > label:before  { content: '▶'; padding-right: .3em; }\n    .expanded > legend:before, .expanded > label:before  { content: '▼'; padding-right: .2em; }\n  `],\n})\nexport class SectionComponent implements OnInit {\n  options: any\n  expanded = true\n  containerType: string\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this)\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n    this.options = this.layoutNode.options || {}\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable\n    switch (this.layoutNode.type) {\n      case 'fieldset':\n      case 'array':\n      case 'tab':\n      case 'advancedfieldset':\n      case 'authfieldset':\n      case 'optionfieldset':\n      case 'selectfieldset':\n        this.containerType = 'fieldset'\n        break\n      default: // 'div', 'flex', 'section', 'conditional', 'actions', 'tagsinput'\n        this.containerType = 'div'\n        break\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) {\n      this.expanded = !this.expanded\n    }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex'\n    if (attribute !== 'flex' && !flexActive) {\n      return null\n    }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive\n      case 'display':\n        return flexActive ? 'flex' : 'initial'\n      case 'flex-direction':\n      case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute)\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index]\n      case 'justify-content':\n      case 'align-items':\n      case 'align-content':\n        return this.options[attribute]\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {isArray} from '@ngsf/common'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\nimport {buildTitleMap} from '../functions/buildTitleMap'\n\n@Component({\n  selector: 'select-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <select *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n      <select *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        (change)=\"updateValue($event)\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [selected]=\"selectItem?.value === controlValue\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [attr.selected]=\"subItem?.value === controlValue\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n    </div>`,\n})\nexport class SelectComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  selectList: any[] = []\n  isArray = isArray\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Input,\n  OnChanges,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'select-framework-widget',\n  template: `\n    <div #widgetContainer></div>\n  `,\n})\nexport class SelectFrameworkComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {}\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.jsf.framework) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.jsf.framework as any)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, ComponentFactoryResolver, ComponentRef, Input, OnChanges, OnInit, ViewChild, ViewContainerRef} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'select-widget-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class SelectWidgetComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && (this.layoutNode || {}).widget) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.widget)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {hasOwn} from '@ngsf/common'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'submit-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <input\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (click)=\"updateValue($event)\">\n    </div>`,\n})\nexport class SubmitComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid\n      this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid)\n    }\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'tabs-widget',\n  template: `\n    <ul\n      [class]=\"options?.labelHtmlClass || ''\">\n      <li *ngFor=\"let item of layoutNode?.items; let i = index\"\n        [class]=\"(options?.itemLabelHtmlClass || '') + (selectedItem === i ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + options?.style?.unselected))\"\n        role=\"presentation\"\n        data-tabs>\n        <a *ngIf=\"showAddTab || item.type !== '$ref'\"\n           [class]=\"'nav-link' + (selectedItem === i ? (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n            (' ' + options?.style?.unselected))\"\n          [innerHTML]=\"setTabTitle(item, i)\"\n          (click)=\"select(i)\"></a>\n      </li>\n    </ul>\n\n    <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n      [class]=\"options?.htmlClass || ''\">\n\n      <select-framework-widget *ngIf=\"selectedItem === i\"\n        [class]=\"(options?.fieldHtmlClass || '') +\n          ' ' + (options?.activeClass || '') +\n          ' ' + (options?.style?.selected || '')\"\n        [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n\n    </div>`,\n  styles: [` a { cursor: pointer; } `],\n})\nexport class TabsComponent implements OnInit {\n  options: any\n  itemCount: number\n  selectedItem = 0\n  showAddTab = true\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.itemCount = this.layoutNode.items.length - 1\n    this.updateControl()\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.itemCount = this.layoutNode.items.length\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      })\n      this.updateControl()\n    }\n    this.selectedItem = index\n  }\n\n  updateControl() {\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1]\n    if (lastItem.type === '$ref' &&\n      this.itemCount >= (lastItem.options.maxItems || 1000)\n    ) {\n      this.showAddTab = false\n    }\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index)\n  }\n}\n","import {Component, ComponentFactoryResolver, ComponentRef, Input, OnChanges, OnInit, ViewChild, ViewContainerRef} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'template-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class TemplateComponent implements OnInit, OnChanges {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.layoutNode.options.template) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.options.template)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'textarea-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <textarea *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"></textarea>\n      <textarea *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">{{controlValue}}</textarea>\n    </div>`,\n})\nexport class TextareaComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Injectable} from '@angular/core'\nimport {hasOwn} from '@ngsf/common'\n\nimport {AddReferenceComponent} from '../components/add-reference.component'\nimport {OneOfComponent} from '../components/one-of.component'\nimport {ButtonComponent} from '../components/button.component'\nimport {CheckboxComponent} from '../components/checkbox.component'\nimport {CheckboxesComponent} from '../components/checkboxes.component'\nimport {FileComponent} from '../components/file.component'\nimport {InputComponent} from '../components/input.component'\nimport {MessageComponent} from '../components/message.component'\nimport {NoneComponent} from '../components/none.component'\nimport {NumberComponent} from '../components/number.component'\nimport {RadiosComponent} from '../components/radios.component'\nimport {RootComponent} from '../components/root.component'\nimport {SectionComponent} from '../components/section.component'\nimport {SelectComponent} from '../components/select.component'\nimport {SelectFrameworkComponent} from '../components/select-framework.component'\nimport {SelectWidgetComponent} from '../components/select-widget.component'\nimport {SubmitComponent} from '../components/submit.component'\nimport {TabsComponent} from '../components/tabs.component'\nimport {TemplateComponent} from '../components/template.component'\nimport {TextareaComponent} from '../components/textarea.component'\n\n@Injectable()\nexport class WidgetLibraryService {\n\n  defaultWidget = 'text'\n  widgetLibrary: any = {\n\n    // Angular JSON Schema Form administrative widgets\n    none: NoneComponent, // Placeholder, for development - displays nothing\n    root: RootComponent, // Form root, renders a complete layout\n    'select-framework': SelectFrameworkComponent, // Applies the selected framework to a specified widget\n    'select-widget': SelectWidgetComponent, // Displays a specified widget\n    $ref: AddReferenceComponent, // Button to add a new array item or $ref element\n\n    // Free-form text HTML 'input' form control widgets <input type=\"...\">\n    email: 'text',\n    integer: 'number', // Note: 'integer' is not a recognized HTML input type\n    number: NumberComponent,\n    password: 'text',\n    search: 'text',\n    tel: 'text',\n    text: InputComponent,\n    ur: 'text',\n\n    // Controlled text HTML 'input' form control widgets <input type=\"...\">\n    color: 'text',\n    date: 'text',\n    datetime: 'text',\n    'datetime-local': 'text',\n    month: 'text',\n    range: 'number',\n    time: 'text',\n    week: 'text',\n\n    // Non-text HTML 'input' form control widgets <input type=\"...\">\n    // 'button': <input type=\"button\"> not used, use <button> instead\n    checkbox: CheckboxComponent, // TODO: Set ternary = true for 3-state ??\n    file: FileComponent, // TODO: Finish 'file' widget\n    hidden: 'text',\n    image: 'text', // TODO: Figure out how to handle these\n    radio: 'radios',\n    reset: 'submit', // TODO: Figure out how to handle these\n    submit: SubmitComponent,\n\n    // Other (non-'input') HTML form control widgets\n    button: ButtonComponent,\n    select: SelectComponent,\n    // 'option': automatically generated by select widgets\n    // 'optgroup': automatically generated by select widgets\n    textarea: TextareaComponent,\n\n    // HTML form control widget sets\n    checkboxes: CheckboxesComponent, // Grouped list of checkboxes\n    'checkboxes-inline': 'checkboxes', // Checkboxes in one line\n    checkboxbuttons: 'checkboxes', // Checkboxes as html buttons\n    radios: RadiosComponent, // Grouped list of radio buttons\n    'radios-inline': 'radios', // Radio controls in one line\n    radiobuttons: 'radios', // Radio controls as html buttons\n\n    // HTML Layout widgets\n    // 'label': automatically added to data widgets\n    // 'legend': automatically added to fieldsets\n    section: SectionComponent, // Just a div <div>\n    div: 'section', // Still just a div <div>\n    fieldset: 'section', // A fieldset, with an optional legend <fieldset>\n    flex: 'section', // A flexbox container <div style=\"display: flex\">\n\n    // Non-HTML layout widgets\n    'one-of': OneOfComponent, // A select box that changes another input\n                              // TODO: Finish 'one-of' widget\n    array: 'section', // A list you can add, remove and reorder <fieldset>\n    tabarray: 'tabs', // A tabbed version of array\n    tab: 'section', // A tab group, similar to a fieldset or section <fieldset>\n    tabs: TabsComponent, // A tabbed set of panels with different controls\n    message: MessageComponent, // Insert arbitrary html\n    help: 'message', // Insert arbitrary html\n    msg: 'message', // Insert arbitrary html\n    html: 'message', // Insert arbitrary html\n    template: TemplateComponent, // Insert a custom Angular component\n\n    // Widgets included for compatibility with JSON Form API\n    advancedfieldset: 'section', // Adds 'Advanced settings' title <fieldset>\n    authfieldset: 'section', // Adds 'Authentication settings' title <fieldset>\n    optionfieldset: 'one-of', // Option control, displays selected sub-item <fieldset>\n    selectfieldset: 'one-of', // Select control, displays selected sub-item <fieldset>\n    conditional: 'section', // Identical to 'section' (depeciated) <div>\n    actions: 'section', // Horizontal button list, can only submit, uses buttons as items <div>\n    tagsinput: 'section', // For entering short text tags <div>\n    // See: http://ulion.github.io/jsonform/playground/?example=fields-checkboxbuttons\n\n    // Widgets included for compatibility with React JSON Schema Form API\n    updown: 'number',\n    'date-time': 'datetime-local',\n    'alt-datetime': 'datetime-local',\n    'alt-date': 'date',\n\n    // Widgets included for compatibility with Angular Schema Form API\n    wizard: 'section', // TODO: Sequential panels with \"Next\" and \"Previous\" buttons\n\n    // Widgets included for compatibility with other libraries\n    textline: 'text',\n\n    // Recommended 3rd-party add-on widgets (TODO: create wrappers for these...)\n    // 'ng2-select': Select control replacement - http://valor-software.com/ng2-select/\n    // 'flatpickr': Flatpickr date picker - https://github.com/chmln/flatpickr\n    // 'pikaday': Pikaday date picker - https://github.com/dbushell/Pikaday\n    // 'spectrum': Spectrum color picker - http://bgrins.github.io/spectrum\n    // 'bootstrap-slider': Bootstrap Slider range control - https://github.com/seiyria/bootstrap-slider\n    // 'ace': ACE code editor - https://ace.c9.io\n    // 'ckeditor': CKEditor HTML / rich text editor - http://ckeditor.com\n    // 'tinymce': TinyMCE HTML / rich text editor - https://www.tinymce.com\n    // 'imageselect': Bootstrap drop-down image selector - http://silviomoreto.github.io/bootstrap-select\n    // 'wysihtml5': HTML editor - http://jhollingworth.github.io/bootstrap-wysihtml5\n    // 'quill': Quill HTML / rich text editor (?) - https://quilljs.com\n  }\n  registeredWidgets: any = {}\n  frameworkWidgets: any = {}\n  activeWidgets: any = {}\n\n  constructor() {\n    this.setActiveWidgets()\n  }\n\n  setActiveWidgets(): boolean {\n    this.activeWidgets = Object.assign(\n      {}, this.widgetLibrary, this.frameworkWidgets, this.registeredWidgets\n    )\n    for (const widgetName of Object.keys(this.activeWidgets)) {\n      let widget: any = this.activeWidgets[widgetName]\n      // Resolve aliases\n      if (typeof widget === 'string') {\n        const usedAliases: string[] = []\n        while (typeof widget === 'string' && !usedAliases.includes(widget)) {\n          usedAliases.push(widget)\n          widget = this.activeWidgets[widget]\n        }\n        if (typeof widget !== 'string') {\n          this.activeWidgets[widgetName] = widget\n        }\n      }\n    }\n    return true\n  }\n\n  setDefaultWidget(type: string): boolean {\n    if (!this.hasWidget(type)) {\n      return false\n    }\n    this.defaultWidget = type\n    return true\n  }\n\n  hasWidget(type: string, widgetSet = 'activeWidgets'): boolean {\n    if (!type || typeof type !== 'string') {\n      return false\n    }\n    return hasOwn(this[widgetSet], type)\n  }\n\n  hasDefaultWidget(type: string): boolean {\n    return this.hasWidget(type, 'widgetLibrary')\n  }\n\n  registerWidget(type: string, widget: any): boolean {\n    if (!type || !widget || typeof type !== 'string') {\n      return false\n    }\n    this.registeredWidgets[type] = widget\n    return this.setActiveWidgets()\n  }\n\n  unRegisterWidget(type: string): boolean {\n    if (!hasOwn(this.registeredWidgets, type)) {\n      return false\n    }\n    delete this.registeredWidgets[type]\n    return this.setActiveWidgets()\n  }\n\n  unRegisterAllWidgets(unRegisterFrameworkWidgets = true): boolean {\n    this.registeredWidgets = {}\n    if (unRegisterFrameworkWidgets) {\n      this.frameworkWidgets = {}\n    }\n    return this.setActiveWidgets()\n  }\n\n  registerFrameworkWidgets(widgets: any): boolean {\n    if (widgets === null || typeof widgets !== 'object') {\n      widgets = {}\n    }\n    this.frameworkWidgets = widgets\n    return this.setActiveWidgets()\n  }\n\n  unRegisterFrameworkWidgets(): boolean {\n    if (Object.keys(this.frameworkWidgets).length) {\n      this.frameworkWidgets = {}\n      return this.setActiveWidgets()\n    }\n    return false\n  }\n\n  getWidget(type?: string, widgetSet = 'activeWidgets'): any {\n    if (this.hasWidget(type, widgetSet)) {\n      return this[widgetSet][type]\n    } else if (this.hasWidget(this.defaultWidget, widgetSet)) {\n      return this[widgetSet][this.defaultWidget]\n    } else {\n      return null\n    }\n  }\n\n  getAllWidgets(): any {\n    return {\n      widgetLibrary: this.widgetLibrary,\n      registeredWidgets: this.registeredWidgets,\n      frameworkWidgets: this.frameworkWidgets,\n      activeWidgets: this.activeWidgets,\n    }\n  }\n}\n","import {Inject, Injectable} from '@angular/core'\nimport {WidgetLibraryService} from './widget-library.service'\nimport {hasOwn, Framework} from '@ngsf/common'\n\n// Possible future frameworks:\n// - Foundation 6:\n//   http://justindavis.co/2017/06/15/using-foundation-6-in-angular-4/\n//   https://github.com/zurb/foundation-sites\n// - Semantic UI:\n//   https://github.com/edcarroll/ng2-semantic-ui\n//   https://github.com/vladotesanovic/ngSemantic\n\n@Injectable()\nexport class FrameworkLibraryService {\n  activeFramework: Framework = null\n  stylesheets: (HTMLStyleElement | HTMLLinkElement)[]\n  scripts: HTMLScriptElement[]\n  loadExternalAssets = false\n  defaultFramework: string\n  frameworkLibrary: { [name: string]: Framework } = {}\n\n  constructor(\n    @Inject(Framework) private frameworks: any[],\n    @Inject(WidgetLibraryService) private widgetLibrary: WidgetLibraryService\n  ) {\n    this.frameworks.forEach(framework =>\n      this.frameworkLibrary[framework.name] = framework\n    )\n    this.defaultFramework = this.frameworks[0].name\n    this.setFramework(this.defaultFramework)\n  }\n\n  public setLoadExternalAssets(loadExternalAssets = true): void {\n    this.loadExternalAssets = !!loadExternalAssets\n  }\n\n  public setFramework(\n    framework: string | Framework = this.defaultFramework,\n    loadExternalAssets = this.loadExternalAssets\n  ): boolean {\n    this.activeFramework =\n      typeof framework === 'string' && this.hasFramework(framework) ?\n        this.frameworkLibrary[framework] :\n        typeof framework === 'object' && hasOwn(framework, 'framework') ?\n          framework :\n          this.frameworkLibrary[this.defaultFramework]\n    return this.registerFrameworkWidgets(this.activeFramework)\n  }\n\n  registerFrameworkWidgets(framework: Framework): boolean {\n    return hasOwn(framework, 'widgets') ?\n      this.widgetLibrary.registerFrameworkWidgets(framework.widgets) :\n      this.widgetLibrary.unRegisterFrameworkWidgets()\n  }\n\n  public hasFramework(type: string): boolean {\n    return hasOwn(this.frameworkLibrary, type)\n  }\n\n  public getFramework(): any {\n    if (!this.activeFramework) {\n      this.setFramework('default', true)\n    }\n    return this.activeFramework.framework\n  }\n\n  public getFrameworkWidgets(): any {\n    return this.activeFramework.widgets || {}\n  }\n\n  public getFrameworkStylesheets(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.stylesheets) || []\n  }\n\n  public getFrameworkScripts(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.scripts) || []\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'hidden-widget',\n  template: `\n    <input *ngIf=\"boundControl\"\n      [formControl]=\"formControl\"\n      [id]=\"'control' + layoutNode?._id\"\n      [name]=\"controlName\"\n      type=\"hidden\">\n    <input *ngIf=\"!boundControl\"\n      [disabled]=\"controlDisabled\"\n      [name]=\"controlName\"\n      [id]=\"'control' + layoutNode?._id\"\n      type=\"hidden\"\n      [value]=\"controlValue\">`,\n})\nexport class HiddenComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'tab-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <root-widget\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [layout]=\"layoutNode.items\"></root-widget>\n    </div>`,\n})\nexport class TabComponent implements OnInit {\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core'\nimport {CommonModule} from '@angular/common'\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\nimport {JsonSchemaFormService} from './services/json-schema-form.service'\nimport {OrderableDirective} from './directives/orderable.directive'\n\nimport {AddReferenceComponent} from './components/add-reference.component'\nimport {ButtonComponent} from './components/button.component'\nimport {CheckboxComponent} from './components/checkbox.component'\nimport {CheckboxesComponent} from './components/checkboxes.component'\nimport {FileComponent} from './components/file.component'\nimport {HiddenComponent} from './components/hidden.component'\nimport {InputComponent} from './components/input.component'\nimport {MessageComponent} from './components/message.component'\nimport {NoneComponent} from './components/none.component'\nimport {NumberComponent} from './components/number.component'\nimport {OneOfComponent} from './components/one-of.component'\nimport {RadiosComponent} from './components/radios.component'\nimport {RootComponent} from './components/root.component'\nimport {SectionComponent} from './components/section.component'\nimport {SelectComponent} from './components/select.component'\nimport {SelectFrameworkComponent} from './components/select-framework.component'\nimport {SelectWidgetComponent} from './components/select-widget.component'\nimport {SubmitComponent} from './components/submit.component'\nimport {TabComponent} from './components/tab.component'\nimport {TabsComponent} from './components/tabs.component'\nimport {TemplateComponent} from './components/template.component'\nimport {TextareaComponent} from './components/textarea.component'\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n\n    OrderableDirective,\n  ],\n  entryComponents: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n  ],\n  exports: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n\n    OrderableDirective,\n  ],\n  providers: [JsonSchemaFormService],\n})\nexport class WidgetLibraryModule {\n  static forRoot(): ModuleWithProviders<WidgetLibraryModule> {\n    return {\n      ngModule: WidgetLibraryModule,\n      providers: [JsonSchemaFormService],\n    }\n  }\n}\n"],"names":["_.cloneDeep","_.isEqual","__values"],"mappings":"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"}