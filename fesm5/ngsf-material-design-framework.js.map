{"version":3,"file":"ngsf-material-design-framework.js","sources":["ng://@ngsf/material-design-framework/lib/components/flex-layout-root.component.ts","ng://@ngsf/material-design-framework/lib/components/flex-layout-section.component.ts","ng://@ngsf/material-design-framework/lib/components/material-add-reference.component.ts","ng://@ngsf/material-design-framework/lib/components/material-button.component.ts","ng://@ngsf/material-design-framework/lib/components/material-button-group.component.ts","ng://@ngsf/material-design-framework/lib/components/material-checkbox.component.ts","ng://@ngsf/material-design-framework/lib/components/material-checkboxes.component.ts","ng://@ngsf/material-design-framework/lib/components/material-chip-list.component.ts","ng://@ngsf/material-design-framework/lib/components/material-datepicker.component.ts","ng://@ngsf/material-design-framework/lib/components/material-file.component.ts","ng://@ngsf/material-design-framework/lib/components/material-input.component.ts","ng://@ngsf/material-design-framework/lib/components/material-number.component.ts","ng://@ngsf/material-design-framework/lib/components/material-one-of.component.ts","ng://@ngsf/material-design-framework/lib/components/material-radios.component.ts","ng://@ngsf/material-design-framework/lib/components/material-select.component.ts","ng://@ngsf/material-design-framework/lib/components/material-slider.component.ts","ng://@ngsf/material-design-framework/lib/components/material-stepper.component.ts","ng://@ngsf/material-design-framework/lib/components/material-tabs.component.ts","ng://@ngsf/material-design-framework/lib/components/material-textarea.component.ts","ng://@ngsf/material-design-framework/lib/components/material-design-framework.component.ts","ng://@ngsf/material-design-framework/lib/material-design.framework.ts","ng://@ngsf/material-design-framework/lib/material-design-framework.module.ts"],"sourcesContent":["import {ChangeDetectionStrategy, Component, Input} from '@angular/core'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'flex-layout-root-widget',\n  template: `\n      <div *ngFor=\"let layoutNode of layout; let i = index\"\n           [class.form-flex-item]=\"isFlexItem\"\n           [style.flex-grow]=\"getFlexAttribute(layoutNode, 'flex-grow')\"\n           [style.flex-shrink]=\"getFlexAttribute(layoutNode, 'flex-shrink')\"\n           [style.flex-basis]=\"getFlexAttribute(layoutNode, 'flex-basis')\"\n           [style.align-self]=\"(layoutNode?.options || {})['align-self']\"\n           [style.order]=\"layoutNode?.options?.order\"\n           [fxFlex]=\"layoutNode?.options?.fxFlex\"\n           [fxFlexOrder]=\"layoutNode?.options?.fxFlexOrder\"\n           [fxFlexOffset]=\"layoutNode?.options?.fxFlexOffset\"\n           [fxFlexAlign]=\"layoutNode?.options?.fxFlexAlign\">\n          <select-framework-widget *ngIf=\"showWidget(layoutNode)\"\n                                   [dataIndex]=\"layoutNode?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n                                   [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n                                   [layoutNode]=\"layoutNode\"></select-framework-widget>\n          </div>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class FlexLayoutRootComponent {\n  @Input() dataIndex: number[]\n  @Input() layoutIndex: number[]\n  @Input() layout: any[]\n  @Input() isFlexItem = false\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  removeItem(item) {\n    this.jsf.removeItem(item)\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in flex-layout-section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute)\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index]\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'flex-layout-section-widget',\n  template: `\n      <div *ngIf=\"containerType === 'div'\"\n           [class]=\"options?.htmlClass || ''\"\n           [class.expandable]=\"options?.expandable && !expanded\"\n           [class.expanded]=\"options?.expandable && expanded\">\n          <label *ngIf=\"sectionTitle\"\n                 [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                 [innerHTML]=\"sectionTitle\"\n                 (click)=\"toggleExpanded()\"></label>\n          <flex-layout-root-widget *ngIf=\"expanded\"\n                                   [layout]=\"layoutNode.items\"\n                                   [dataIndex]=\"dataIndex\"\n                                   [layoutIndex]=\"layoutIndex\"\n                                   [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                   [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                   [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                   [style.display]=\"getFlexAttribute('display')\"\n                                   [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                   [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                   [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                   [style.align-items]=\"getFlexAttribute('align-items')\"\n                                   [style.align-content]=\"getFlexAttribute('align-content')\"\n                                   [fxLayout]=\"getFlexAttribute('layout')\"\n                                   [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                   [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                   [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>\n\n      <fieldset *ngIf=\"containerType === 'fieldset'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\"\n                [disabled]=\"options?.readonly\">\n          <legend *ngIf=\"sectionTitle\"\n                  [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                  [innerHTML]=\"sectionTitle\"\n                  (click)=\"toggleExpanded()\"></legend>\n          <flex-layout-root-widget *ngIf=\"expanded\"\n                                   [layout]=\"layoutNode.items\"\n                                   [dataIndex]=\"dataIndex\"\n                                   [layoutIndex]=\"layoutIndex\"\n                                   [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                   [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                   [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                   [style.display]=\"getFlexAttribute('display')\"\n                                   [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                   [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                   [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                   [style.align-items]=\"getFlexAttribute('align-items')\"\n                                   [style.align-content]=\"getFlexAttribute('align-content')\"\n                                   [fxLayout]=\"getFlexAttribute('layout')\"\n                                   [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                   [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                   [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </fieldset>\n\n      <mat-card *ngIf=\"containerType === 'card'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\">\n          <mat-card-header *ngIf=\"sectionTitle\">\n              <legend\n                      [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                      [innerHTML]=\"sectionTitle\"\n                      (click)=\"toggleExpanded()\"></legend>\n          </mat-card-header>\n          <mat-card-content *ngIf=\"expanded\">\n              <fieldset [disabled]=\"options?.readonly\">\n                  <flex-layout-root-widget *ngIf=\"expanded\"\n                                           [layout]=\"layoutNode.items\"\n                                           [dataIndex]=\"dataIndex\"\n                                           [layoutIndex]=\"layoutIndex\"\n                                           [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                           [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                           [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                           [style.display]=\"getFlexAttribute('display')\"\n                                           [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                           [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                           [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                           [style.align-items]=\"getFlexAttribute('align-items')\"\n                                           [style.align-content]=\"getFlexAttribute('align-content')\"\n                                           [fxLayout]=\"getFlexAttribute('layout')\"\n                                           [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                           [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                           [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n              </fieldset>\n          </mat-card-content>\n          <mat-card-footer>\n              <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                         [innerHTML]=\"options?.errorMessage\"></mat-error>\n          </mat-card-footer>\n      </mat-card>\n\n      <mat-expansion-panel *ngIf=\"containerType === 'expansion-panel'\"\n                           [expanded]=\"expanded\"\n                           [hideToggle]=\"!options?.expandable\">\n          <mat-expansion-panel-header>\n              <mat-panel-title>\n                  <legend *ngIf=\"sectionTitle\"\n                          [class]=\"options?.labelHtmlClass\"\n                          [innerHTML]=\"sectionTitle\"\n                          (click)=\"toggleExpanded()\"></legend>\n              </mat-panel-title>\n          </mat-expansion-panel-header>\n          <fieldset [disabled]=\"options?.readonly\">\n              <flex-layout-root-widget *ngIf=\"expanded\"\n                                       [layout]=\"layoutNode.items\"\n                                       [dataIndex]=\"dataIndex\"\n                                       [layoutIndex]=\"layoutIndex\"\n                                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                       [style.display]=\"getFlexAttribute('display')\"\n                                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                       [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                                       [fxLayout]=\"getFlexAttribute('layout')\"\n                                       [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                       [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                       [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          </fieldset>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </mat-expansion-panel>`,\n  styles: [`\n      fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n      }\n\n      .legend {\n          font-weight: bold;\n      }\n\n      .expandable > .legend:before {\n          content: '▶';\n          padding-right: .3em;\n      }\n\n      .expanded > .legend:before {\n          content: '▼';\n          padding-right: .2em;\n      }\n  `],\n})\nexport class FlexLayoutSectionComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  expanded = true\n  containerType = 'div'\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this)\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n    this.options = this.layoutNode.options || {}\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable\n    switch (this.layoutNode.type) {\n      case 'section':\n      case 'array':\n      case 'fieldset':\n      case 'advancedfieldset':\n      case 'authfieldset':\n      case 'optionfieldset':\n      case 'selectfieldset':\n        this.containerType = 'fieldset'\n        break\n      case 'card':\n        this.containerType = 'card'\n        break\n      case 'expansion-panel':\n        this.containerType = 'expansion-panel'\n        break\n      default: // 'div', 'flex', 'tab', 'conditional', 'actions'\n        this.containerType = 'div'\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) {\n      this.expanded = !this.expanded\n    }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in flex-layout-root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex'\n    // if (attribute !== 'flex' && !flexActive) { return null; }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive\n      case 'display':\n        return flexActive ? 'flex' : 'initial'\n      case 'flex-direction':\n      case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute)\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index]\n      case 'justify-content':\n      case 'align-items':\n      case 'align-content':\n        return this.options[attribute]\n      case 'layout':\n        return (this.options.fxLayout || 'row') +\n        this.options.fxLayoutWrap ? ' ' + this.options.fxLayoutWrap : ''\n    }\n  }\n}\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-add-reference-widget',\n  template: `\n      <section [class]=\"options?.htmlClass || ''\" align=\"end\">\n          <button mat-raised-button *ngIf=\"showAddButton\"\n                  [color]=\"options?.color || 'accent'\"\n                  [disabled]=\"options?.readonly\"\n                  (click)=\"addItem($event)\">\n              <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n              <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n          </button>\n      </section>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MaterialAddReferenceComponent implements OnInit {\n  options: any\n  itemCount: number\n  previousLayoutIndex: number[]\n  previousDataIndex: number[]\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this),\n    }\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount)\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n\n  addItem(event) {\n    event.preventDefault()\n    this.jsf.addItem(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {hasOwn} from '@ngsf/common'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-button-widget',\n  template: `\n      <div class=\"button-row\" [class]=\"options?.htmlClass || ''\">\n          <!-- [color]=\"options?.color || 'primary'\" -->\n          <button mat-raised-button\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [disabled]=\"controlDisabled || options?.readonly\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [name]=\"controlName\"\n                  [type]=\"layoutNode?.type\"\n                  [value]=\"controlValue\"\n                  (click)=\"updateValue($event)\">\n              <mat-icon *ngIf=\"options?.icon\" class=\"mat-24\">{{options?.icon}}</mat-icon>\n              <span *ngIf=\"options?.title\" [innerHTML]=\"options?.title\"></span>\n          </button>\n      </div>`,\n  styles: [` button {\n      margin-top: 10px;\n  } `],\n})\nexport class MaterialButtonComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid\n      this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid)\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap, JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-button-group-widget',\n  template: `\n      <div>\n          <div *ngIf=\"options?.title\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id\"\n                      [class]=\"options?.labelHtmlClass || ''\"\n                      [style.display]=\"options?.notitle ? 'none' : ''\"\n                      [innerHTML]=\"options?.title\"></label>\n              [disabled]=\"controlDisabled || options?.readonly\"\n          </div>\n          <mat-button-toggle-group\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.required]=\"options?.required\"\n                  [name]=\"controlName\"\n                  [value]=\"controlValue\"\n                  [vertical]=\"!!options.vertical\">\n              <mat-button-toggle *ngFor=\"let radioItem of radiosList\"\n                                 [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                 [value]=\"radioItem?.value\"\n                                 (click)=\"updateValue(radioItem?.value)\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-button-toggle>\n          </mat-button-toggle-group>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>`,\n  styles: [` mat-error {\n      font-size: 75%;\n  } `],\n})\nexport class MaterialButtonGroupComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  radiosList: any[] = []\n  vertical = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-checkbox-widget',\n  template: `\n      <mat-checkbox *ngIf=\"boundControl && !showSlideToggle\"\n                    [formControl]=\"formControl\"\n                    align=\"left\"\n                    [color]=\"options?.color || 'primary'\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    labelPosition=\"after\"\n                    [name]=\"controlName\"\n                    (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-checkbox>\n      <mat-checkbox *ngIf=\"!boundControl && !showSlideToggle\"\n                    align=\"left\"\n                    [color]=\"options?.color || 'primary'\"\n                    [disabled]=\"controlDisabled || options?.readonly\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    labelPosition=\"after\"\n                    [name]=\"controlName\"\n                    [checked]=\"isChecked\"\n                    (blur)=\"options.showErrors = true\"\n                    (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-checkbox>\n      <mat-slide-toggle *ngIf=\"boundControl && showSlideToggle\"\n                        [formControl]=\"formControl\"\n                        align=\"left\"\n                        [color]=\"options?.color || 'primary'\"\n                        [id]=\"'control' + layoutNode?._id\"\n                        labelPosition=\"after\"\n                        [name]=\"controlName\"\n                        (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-slide-toggle>\n      <mat-slide-toggle *ngIf=\"!boundControl && showSlideToggle\"\n                        align=\"left\"\n                        [color]=\"options?.color || 'primary'\"\n                        [disabled]=\"controlDisabled || options?.readonly\"\n                        [id]=\"'control' + layoutNode?._id\"\n                        labelPosition=\"after\"\n                        [name]=\"controlName\"\n                        [checked]=\"isChecked\"\n                        (blur)=\"options.showErrors = true\"\n                        (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-slide-toggle>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  `],\n})\nexport class MaterialCheckboxComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  trueValue: any = true\n  falseValue: any = false\n  showSlideToggle = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this, !this.options.readonly)\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = false\n      this.jsf.updateValue(this, this.falseValue)\n    }\n    if (this.layoutNode.type === 'slide-toggle' ||\n      this.layoutNode.format === 'slide-toggle'\n    ) {\n      this.showSlideToggle = true\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, event.checked ? this.trueValue : this.falseValue)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap, JsonSchemaFormService, TitleMapItem} from '@ngsf/widget-library'\n\n// TODO: Change this to use a Selection List instead?\n// https://material.angular.io/components/list/overview\n\n@Component({\n  selector: 'material-checkboxes-widget',\n  template: `\n      <div>\n          <mat-checkbox type=\"checkbox\"\n                        [checked]=\"allChecked\"\n                        [color]=\"options?.color || 'primary'\"\n                        [disabled]=\"controlDisabled || options?.readonly\"\n                        [indeterminate]=\"someChecked\"\n                        [name]=\"options?.name\"\n                        (blur)=\"options.showErrors = true\"\n                        (change)=\"updateAllValues($event)\">\n              <span class=\"checkbox-name\" [innerHTML]=\"options?.name\"></span>\n          </mat-checkbox>\n          <label *ngIf=\"options?.title\"\n                 class=\"title\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [style.display]=\"options?.notitle ? 'none' : ''\"\n                 [innerHTML]=\"options?.title\"></label>\n          <ul class=\"checkbox-list\" [class.horizontal-list]=\"horizontalList\">\n              <li *ngFor=\"let checkboxItem of checkboxList\"\n                  [class]=\"options?.htmlClass || ''\">\n                  <mat-checkbox type=\"checkbox\"\n                                [(ngModel)]=\"checkboxItem.checked\"\n                                [color]=\"options?.color || 'primary'\"\n                                [disabled]=\"controlDisabled || options?.readonly\"\n                                [name]=\"checkboxItem?.name\"\n                                (blur)=\"options.showErrors = true\"\n                                (change)=\"updateValue()\">\n                      <span class=\"checkbox-name\" [innerHTML]=\"checkboxItem?.name\"></span>\n                  </mat-checkbox>\n              </li>\n          </ul>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>`,\n  styles: [`\n      .title {\n          font-weight: bold;\n      }\n\n      .checkbox-list {\n          list-style-type: none;\n      }\n\n      .horizontal-list > li {\n          display: inline-block;\n          margin-right: 10px;\n          zoom: 1;\n      }\n\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  `],\n})\nexport class MaterialCheckboxesComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  horizontalList = false\n  formArray: AbstractControl\n  checkboxList: TitleMapItem[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get allChecked(): boolean {\n    return this.checkboxList.filter(t => t.checked).length === this.checkboxList.length\n  }\n\n  get someChecked(): boolean {\n    const checkedItems = this.checkboxList.filter(t => t.checked).length\n    return checkedItems > 0 && checkedItems < this.checkboxList.length\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.horizontalList = this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons'\n    this.jsf.initializeControl(this)\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    )\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this)\n      for (const checkboxItem of this.checkboxList) {\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value)\n      }\n    }\n  }\n\n  updateValue() {\n    this.options.showErrors = true\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList)\n    }\n  }\n\n  updateAllValues(event: any) {\n    this.options.showErrors = true\n    this.checkboxList.forEach(t => t.checked = event.checked)\n    this.updateValue()\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-chip-list-widget',\n  template: ``,\n})\nexport class MaterialChipListComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnChanges, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {dateToString, stringToDate} from '@ngsf/common'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-datepicker-widget',\n  template: `\n      <mat-form-field [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [max]=\"options?.maximum\"\n                 [matDatepicker]=\"picker\"\n                 [min]=\"options?.minimum\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [disabled]=\"controlDisabled || options?.readonly\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [max]=\"options?.maximum\"\n                 [matDatepicker]=\"picker\"\n                 [min]=\"options?.minimum\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [value]=\"dateValue\"\n                 (blur)=\"options.showErrors = true\"\n                 (change)=\"updateValue($event)\"\n                 (input)=\"updateValue($event)\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      </mat-form-field>\n      <mat-datepicker #picker></mat-datepicker>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialDatepickerComponent implements OnInit, OnChanges {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  dateValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  autoCompleteList: string[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this, !this.options.readonly)\n    this.setControlDate(this.controlValue)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  ngOnChanges() {\n    this.setControlDate(this.controlValue)\n  }\n\n  setControlDate(dateString: string) {\n    this.dateValue = stringToDate(dateString)\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, dateToString(event, this.options))\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-file-widget',\n  template: ``,\n})\nexport class MaterialFileComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-input-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.maxlength]=\"options?.maxLength\"\n                 [attr.minlength]=\"options?.minLength\"\n                 [attr.pattern]=\"options?.pattern\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"layoutNode?.type\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.maxlength]=\"options?.maxLength\"\n                 [attr.minlength]=\"options?.minLength\"\n                 [attr.pattern]=\"options?.pattern\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"layoutNode?.type\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\"\n                 (blur)=\"options.showErrors = true\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n          <mat-autocomplete *ngIf=\"options?.typeahead?.source\">\n              <mat-option *ngFor=\"let word of options?.typeahead?.source\"\n                          [value]=\"word\">{{word}}</mat-option>\n          </mat-autocomplete>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialInputComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: string\n  controlDisabled = false\n  boundControl = false\n  options: any\n  autoCompleteList: string[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-number-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"'number'\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"'number'\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\"\n                 (blur)=\"options.showErrors = true\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"layoutNode?.type === 'range'\" align=\"start\"\n                    [innerHTML]=\"controlValue\"></mat-hint>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialNumberComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  allowNegative = true\n  allowDecimal = true\n  allowExponents = false\n  lastValidNumber = ''\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.layoutNode.dataType === 'integer') {\n      this.allowDecimal = false\n    }\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-one-of-widget',\n  template: ``,\n})\nexport class MaterialOneOfComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap, JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-radios-widget',\n  template: `\n      <div>\n          <div *ngIf=\"options?.title\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id\"\n                      [class]=\"options?.labelHtmlClass || ''\"\n                      [style.display]=\"options?.notitle ? 'none' : ''\"\n                      [innerHTML]=\"options?.title\"></label>\n          </div>\n          <mat-radio-group *ngIf=\"boundControl\"\n                           [formControl]=\"formControl\"\n                           [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                           [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                           [attr.required]=\"options?.required\"\n                           [style.flex-direction]=\"flexDirection\"\n                           [name]=\"controlName\"\n                           (blur)=\"options.showErrors = true\">\n              <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n                                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                [value]=\"radioItem?.value\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-radio-group *ngIf=\"!boundControl\"\n                           [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                           [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                           [attr.required]=\"options?.required\"\n                           [style.flex-direction]=\"flexDirection\"\n                           [disabled]=\"controlDisabled || options?.readonly\"\n                           [name]=\"controlName\"\n                           [value]=\"controlValue\">\n              <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n                                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                [value]=\"radioItem?.value\"\n                                (click)=\"updateValue(radioItem?.value)\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>`,\n  styles: [`\n      mat-radio-group {\n          display: inline-flex;\n      }\n\n      mat-radio-button {\n          margin: 2px;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  `]\n})\nexport class MaterialRadiosComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  flexDirection = 'column'\n  radiosList: any[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    if (this.layoutNode.type === 'radios-inline') {\n      this.flexDirection = 'row'\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    )\n    this.jsf.initializeControl(this, !this.options.readonly)\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {isArray} from '@ngsf/common'\nimport {buildTitleMap, JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-select-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <mat-select *ngIf=\"boundControl\"\n                      [formControl]=\"formControl\"\n                      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                      [attr.name]=\"controlName\"\n                      [id]=\"'control' + layoutNode?._id\"\n                      [multiple]=\"options?.multiple\"\n                      [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                      [required]=\"options?.required\"\n                      [style.width]=\"'100%'\"\n                      (blur)=\"options.showErrors = true\">\n              <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n                  <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n                              [value]=\"selectItem?.value\">\n                      <span [innerHTML]=\"selectItem?.name\"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n                                [label]=\"selectItem?.group\">\n                      <mat-option *ngFor=\"let subItem of selectItem.items\"\n                                  [value]=\"subItem?.value\">\n                          <span [innerHTML]=\"subItem?.name\"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <mat-select *ngIf=\"!boundControl\"\n                      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                      [attr.name]=\"controlName\"\n                      [disabled]=\"controlDisabled || options?.readonly\"\n                      [id]=\"'control' + layoutNode?._id\"\n                      [multiple]=\"options?.multiple\"\n                      [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                      [required]=\"options?.required\"\n                      [style.width]=\"'100%'\"\n                      [value]=\"controlValue\"\n                      (blur)=\"options.showErrors = true\"\n                      (selectionChange)=\"updateValue($event)\">\n              <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n                  <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n                              [attr.selected]=\"selectItem?.value === controlValue\"\n                              [value]=\"selectItem?.value\">\n                      <span [innerHTML]=\"selectItem?.name\"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n                                [label]=\"selectItem?.group\">\n                      <mat-option *ngFor=\"let subItem of selectItem.items\"\n                                  [attr.selected]=\"subItem?.value === controlValue\"\n                                  [value]=\"subItem?.value\">\n                          <span [innerHTML]=\"subItem?.name\"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialSelectComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  selectList: any[] = []\n  isArray = isArray\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    )\n    this.jsf.initializeControl(this, !this.options.readonly)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, event.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-slider-widget',\n  template: `\n      <mat-slider thumbLabel *ngIf=\"boundControl\"\n                  [formControl]=\"formControl\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [max]=\"options?.maximum\"\n                  [min]=\"options?.minimum\"\n                  [step]=\"options?.multipleOf || options?.step || 'any'\"\n                  [style.width]=\"'100%'\"\n                  (blur)=\"options.showErrors = true\"></mat-slider>\n      <mat-slider thumbLabel *ngIf=\"!boundControl\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [disabled]=\"controlDisabled || options?.readonly\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [max]=\"options?.maximum\"\n                  [min]=\"options?.minimum\"\n                  [step]=\"options?.multipleOf || options?.step || 'any'\"\n                  [style.width]=\"'100%'\"\n                  [value]=\"controlValue\"\n                  (blur)=\"options.showErrors = true\"\n                  (change)=\"updateValue($event)\"></mat-slider>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [` mat-error {\n      font-size: 75%;\n  } `],\n})\nexport class MaterialSliderComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  allowNegative = true\n  allowDecimal = true\n  allowExponents = false\n  lastValidNumber = ''\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this, !this.options.readonly)\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, event.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-stepper-widget',\n  template: ``,\n})\nexport class MaterialStepperComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-tabs-widget',\n  template: `\n      <nav mat-tab-nav-bar\n           [attr.aria-label]=\"options?.label || options?.title || ''\"\n           [style.width]=\"'100%'\">\n          <a mat-tab-link *ngFor=\"let item of layoutNode?.items; let i = index\"\n             [active]=\"selectedItem === i\"\n             (click)=\"select(i)\">\n          <span *ngIf=\"showAddTab || item.type !== '$ref'\"\n                [innerHTML]=\"setTabTitle(item, i)\"></span>\n          </a>\n      </nav>\n      <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n           [class]=\"options?.htmlClass || ''\">\n          <select-framework-widget *ngIf=\"selectedItem === i\"\n                                   [class]=\"(options?.fieldHtmlClass || '') + ' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')\"\n                                   [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n                                   [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n                                   [layoutNode]=\"layoutItem\"></select-framework-widget>\n      </div>`,\n  styles: [` a {\n      cursor: pointer;\n  } `],\n})\nexport class MaterialTabsComponent implements OnInit {\n  options: any\n  itemCount: number\n  selectedItem = 0\n  showAddTab = true\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.itemCount = this.layoutNode.items.length - 1\n    this.updateControl()\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      })\n      this.updateControl()\n    }\n    this.selectedItem = index\n  }\n\n  updateControl() {\n    this.itemCount = this.layoutNode.items.length - 1\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1]\n    this.showAddTab = lastItem.type === '$ref' &&\n      this.itemCount < (lastItem.options.maxItems || 1000)\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-textarea-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <textarea matInput *ngIf=\"boundControl\"\n                    [formControl]=\"formControl\"\n                    [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                    [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                    [attr.maxlength]=\"options?.maxLength\"\n                    [attr.minlength]=\"options?.minLength\"\n                    [attr.pattern]=\"options?.pattern\"\n                    [required]=\"options?.required\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    [name]=\"controlName\"\n                    [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                    [readonly]=\"options?.readonly ? 'readonly' : null\"\n                    [style.width]=\"'100%'\"\n                    (blur)=\"options.showErrors = true\"></textarea>\n          <textarea matInput *ngIf=\"!boundControl\"\n                    [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                    [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                    [attr.maxlength]=\"options?.maxLength\"\n                    [attr.minlength]=\"options?.minLength\"\n                    [attr.pattern]=\"options?.pattern\"\n                    [required]=\"options?.required\"\n                    [disabled]=\"controlDisabled\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    [name]=\"controlName\"\n                    [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                    [readonly]=\"options?.readonly ? 'readonly' : null\"\n                    [style.width]=\"'100%'\"\n                    [value]=\"controlValue\"\n                    (input)=\"updateValue($event)\"\n                    (blur)=\"options.showErrors = true\"></textarea>\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialTextareaComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {ChangeDetectorRef, Component, Input, OnChanges, OnInit} from '@angular/core'\nimport * as _ from 'lodash'\nimport {isDefined} from '@ngsf/common'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-design-framework',\n  template: `\n      <div\n              [class.array-item]=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"\n              [orderable]=\"isOrderable\"\n              [dataIndex]=\"dataIndex\"\n              [layoutIndex]=\"layoutIndex\"\n              [layoutNode]=\"widgetLayoutNode\">\n          <svg *ngIf=\"showRemoveButton\"\n               xmlns=\"http://www.w3.org/2000/svg\"\n               height=\"18\" width=\"18\" viewBox=\"0 0 24 24\"\n               class=\"close-button\"\n               (click)=\"removeItem()\">\n              <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"/>\n          </svg>\n          <select-widget-widget\n                  [dataIndex]=\"dataIndex\"\n                  [layoutIndex]=\"layoutIndex\"\n                  [layoutNode]=\"widgetLayoutNode\"></select-widget-widget>\n      </div>\n      <div class=\"spacer\" *ngIf=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"></div>`,\n  styles: [`\n      .array-item {\n          border-radius: 2px;\n          box-shadow: 0 3px 1px -2px rgba(0, 0, 0, .2),\n          0 2px 2px 0 rgba(0, 0, 0, .14),\n          0 1px 5px 0 rgba(0, 0, 0, .12);\n          padding: 6px;\n          position: relative;\n          transition: all 280ms cubic-bezier(.4, 0, .2, 1);\n      }\n\n      .close-button {\n          cursor: pointer;\n          position: absolute;\n          top: 6px;\n          right: 6px;\n          fill: rgba(0, 0, 0, .4);\n          visibility: hidden;\n          z-index: 500;\n      }\n\n      .close-button:hover {\n          fill: rgba(0, 0, 0, .8);\n      }\n\n      .array-item:hover > .close-button {\n          visibility: visible;\n      }\n\n      .spacer {\n          margin: 6px 0;\n      }\n\n      [draggable=true]:hover {\n          box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2),\n          0 8px 10px 1px rgba(0, 0, 0, .14),\n          0 3px 14px 2px rgba(0, 0, 0, .12);\n          cursor: move;\n          z-index: 10;\n      }\n\n      [draggable=true].drag-target-top {\n          box-shadow: 0 -2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n\n      [draggable=true].drag-target-bottom {\n          box-shadow: 0 2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n  `],\n})\nexport class MaterialDesignFrameworkComponent implements OnInit, OnChanges {\n  frameworkInitialized = false\n  inputType: string\n  options: any // Options used in this framework\n  widgetLayoutNode: any // layoutNode passed to child widget\n  widgetOptions: any // Options passed to child widget\n  formControl: any = null\n  parentArray: any = null\n  isOrderable = false\n  dynamicTitle: string = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showRemoveButton(): boolean {\n    if (!this.layoutNode || !this.widgetOptions.removable ||\n      this.widgetOptions.readonly || this.layoutNode.type === '$ref'\n    ) {\n      return false\n    }\n    if (this.layoutNode.recursiveReference) {\n      return true\n    }\n    if (!this.layoutNode.arrayItem || !this.parentArray) {\n      return false\n    }\n    // If array length <= minItems, don't allow removing any items\n    return this.parentArray.items.length - 1 <= this.parentArray.options.minItems ? false :\n      // For removable list items, allow removing any item\n      this.layoutNode.arrayItemType === 'list' ? true :\n        // For removable tuple items, only allow removing last item in list\n        this.layoutIndex[this.layoutIndex.length - 1] === this.parentArray.items.length - 2\n  }\n\n  ngOnInit() {\n    this.initializeFramework()\n  }\n\n  ngOnChanges() {\n    if (!this.frameworkInitialized) {\n      this.initializeFramework()\n    }\n    if (this.dynamicTitle) {\n      this.updateTitle()\n    }\n  }\n\n  initializeFramework() {\n    if (this.layoutNode) {\n      this.options = _.cloneDeep(this.layoutNode.options || {})\n      this.widgetLayoutNode = {\n        ...this.layoutNode,\n        options: _.cloneDeep(this.layoutNode.options || {})\n      }\n      this.widgetOptions = this.widgetLayoutNode.options\n      this.formControl = this.jsf.getFormControl(this)\n\n      if (\n        isDefined(this.widgetOptions.minimum) &&\n        isDefined(this.widgetOptions.maximum) &&\n        this.widgetOptions.multipleOf >= 1\n      ) {\n        this.layoutNode.type = 'range'\n      }\n\n      if (\n        !['$ref', 'advancedfieldset', 'authfieldset', 'button', 'card',\n          'checkbox', 'expansion-panel', 'help', 'message', 'msg', 'section',\n          'submit', 'tabarray', 'tabs'].includes(this.layoutNode.type) &&\n        /{{.+?}}/.test(this.widgetOptions.title || '')\n      ) {\n        this.dynamicTitle = this.widgetOptions.title\n        this.updateTitle()\n      }\n\n      if (this.layoutNode.arrayItem && this.layoutNode.type !== '$ref') {\n        this.parentArray = this.jsf.getParentNode(this)\n        if (this.parentArray) {\n          this.isOrderable =\n            this.parentArray.type.slice(0, 3) !== 'tab' &&\n            this.layoutNode.arrayItemType === 'list' &&\n            !this.widgetOptions.readonly &&\n            this.parentArray.options.orderable\n        }\n      }\n\n      this.frameworkInitialized = true\n    } else {\n      this.options = {}\n    }\n  }\n\n  updateTitle() {\n    this.widgetLayoutNode.options.title = this.jsf.parseText(\n      this.dynamicTitle,\n      this.jsf.getFormControlValue(this),\n      this.jsf.getFormControlGroup(this).value,\n      this.dataIndex[this.dataIndex.length - 1]\n    )\n  }\n\n  removeItem() {\n    this.jsf.removeItem(this)\n  }\n}\n","import {Injectable} from '@angular/core'\nimport {Framework} from '@ngsf/common'\n\nimport {FlexLayoutRootComponent} from './components/flex-layout-root.component'\nimport {FlexLayoutSectionComponent} from './components/flex-layout-section.component'\nimport {MaterialAddReferenceComponent} from './components/material-add-reference.component'\nimport {MaterialButtonComponent} from './components/material-button.component'\nimport {MaterialButtonGroupComponent} from './components/material-button-group.component'\nimport {MaterialCheckboxComponent} from './components/material-checkbox.component'\nimport {MaterialCheckboxesComponent} from './components/material-checkboxes.component'\nimport {MaterialChipListComponent} from './components/material-chip-list.component'\nimport {MaterialDatepickerComponent} from './components/material-datepicker.component'\nimport {MaterialFileComponent} from './components/material-file.component'\nimport {MaterialInputComponent} from './components/material-input.component'\nimport {MaterialNumberComponent} from './components/material-number.component'\nimport {MaterialOneOfComponent} from './components/material-one-of.component'\nimport {MaterialRadiosComponent} from './components/material-radios.component'\nimport {MaterialSelectComponent} from './components/material-select.component'\nimport {MaterialSliderComponent} from './components/material-slider.component'\nimport {MaterialStepperComponent} from './components/material-stepper.component'\nimport {MaterialTabsComponent} from './components/material-tabs.component'\nimport {MaterialTextareaComponent} from './components/material-textarea.component'\nimport {MaterialDesignFrameworkComponent} from './components/material-design-framework.component'\n\n@Injectable()\nexport class MaterialDesignFramework extends Framework {\n  name = 'material-design'\n\n  framework = MaterialDesignFrameworkComponent\n\n  stylesheets = [\n    '//fonts.googleapis.com/icon?family=Material+Icons',\n    '//fonts.googleapis.com/css?family=Roboto:300,400,500,700',\n  ]\n\n  widgets = {\n    root: FlexLayoutRootComponent,\n    section: FlexLayoutSectionComponent,\n    $ref: MaterialAddReferenceComponent,\n    button: MaterialButtonComponent,\n    'button-group': MaterialButtonGroupComponent,\n    checkbox: MaterialCheckboxComponent,\n    checkboxes: MaterialCheckboxesComponent,\n    'chip-list': MaterialChipListComponent,\n    date: MaterialDatepickerComponent,\n    file: MaterialFileComponent,\n    number: MaterialNumberComponent,\n    'one-of': MaterialOneOfComponent,\n    radios: MaterialRadiosComponent,\n    select: MaterialSelectComponent,\n    slider: MaterialSliderComponent,\n    stepper: MaterialStepperComponent,\n    tabs: MaterialTabsComponent,\n    text: MaterialInputComponent,\n    textarea: MaterialTextareaComponent,\n    'alt-date': 'date',\n    'any-of': 'one-of',\n    card: 'section',\n    color: 'text',\n    'expansion-panel': 'section',\n    hidden: 'none',\n    image: 'none',\n    integer: 'number',\n    radiobuttons: 'button-group',\n    range: 'slider',\n    submit: 'button',\n    tagsinput: 'chip-list',\n    wizard: 'stepper',\n  }\n}\n","// import { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport {NgModule, ModuleWithProviders} from '@angular/core'\nimport {CommonModule} from '@angular/common'\nimport {WidgetLibraryModule} from '@ngsf/widget-library'\nimport {Framework} from '@ngsf/common'\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\nimport {FlexLayoutModule} from '@angular/flex-layout'\nimport {FlexLayoutRootComponent} from './components/flex-layout-root.component'\nimport {FlexLayoutSectionComponent} from './components/flex-layout-section.component'\nimport {MaterialAddReferenceComponent} from './components/material-add-reference.component'\nimport {MaterialButtonComponent} from './components/material-button.component'\nimport {MaterialButtonGroupComponent} from './components/material-button-group.component'\nimport {MaterialCheckboxComponent} from './components/material-checkbox.component'\nimport {MaterialCheckboxesComponent} from './components/material-checkboxes.component'\nimport {MaterialChipListComponent} from './components/material-chip-list.component'\nimport {MaterialDatepickerComponent} from './components/material-datepicker.component'\nimport {MaterialFileComponent} from './components/material-file.component'\nimport {MaterialInputComponent} from './components/material-input.component'\nimport {MaterialNumberComponent} from './components/material-number.component'\nimport {MaterialOneOfComponent} from './components/material-one-of.component'\nimport {MaterialRadiosComponent} from './components/material-radios.component'\nimport {MaterialSelectComponent} from './components/material-select.component'\nimport {MaterialSliderComponent} from './components/material-slider.component'\nimport {MaterialStepperComponent} from './components/material-stepper.component'\nimport {MaterialTabsComponent} from './components/material-tabs.component'\nimport {MaterialTextareaComponent} from './components/material-textarea.component'\nimport {MaterialDesignFrameworkComponent} from './components/material-design-framework.component'\n\nimport {MaterialDesignFramework} from './material-design.framework'\n\nimport {MatAutocompleteModule} from '@angular/material/autocomplete'\nimport {MatButtonModule} from '@angular/material/button'\nimport {MatButtonToggleModule} from '@angular/material/button-toggle'\nimport {MatCardModule} from '@angular/material/card'\nimport {MatCheckboxModule} from '@angular/material/checkbox'\nimport {MatChipsModule} from '@angular/material/chips'\nimport {MatDatepickerModule} from '@angular/material/datepicker'\nimport {MatExpansionModule} from '@angular/material/expansion'\nimport {MatFormFieldModule} from '@angular/material/form-field'\nimport {MatIconModule} from '@angular/material/icon'\nimport {MatInputModule} from '@angular/material/input'\nimport {MatNativeDateModule} from '@angular/material/core'\nimport {MatRadioModule} from '@angular/material/radio'\nimport {MatSelectModule} from '@angular/material/select'\nimport {MatSliderModule} from '@angular/material/slider'\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle'\nimport {MatStepperModule} from '@angular/material/stepper'\nimport {MatTabsModule} from '@angular/material/tabs'\nimport {MatTooltipModule} from '@angular/material/tooltip'\n\n/**\n * unused @angular/material modules:\n * MatDialogModule, MatGridListModule, MatListModule, MatMenuModule,\n * MatPaginatorModule, MatProgressBarModule, MatProgressSpinnerModule,\n * MatSidenavModule, MatSnackBarModule, MatSortModule, MatTableModule,\n * MatToolbarModule,\n */\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n\n    // ANGULAR_MATERIAL_MODULES\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatNativeDateModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatTooltipModule,\n\n    WidgetLibraryModule,\n  ],\n  declarations: [\n    // MATERIAL_FRAMEWORK_COMPONENTS\n    FlexLayoutRootComponent,\n    FlexLayoutSectionComponent,\n    MaterialAddReferenceComponent,\n    MaterialOneOfComponent,\n    MaterialButtonComponent,\n    MaterialButtonGroupComponent,\n    MaterialCheckboxComponent,\n    MaterialCheckboxesComponent,\n    MaterialChipListComponent,\n    MaterialDatepickerComponent,\n    MaterialFileComponent,\n    MaterialInputComponent,\n    MaterialNumberComponent,\n    MaterialRadiosComponent,\n    MaterialSelectComponent,\n    MaterialSliderComponent,\n    MaterialStepperComponent,\n    MaterialTabsComponent,\n    MaterialTextareaComponent,\n    MaterialDesignFrameworkComponent,\n  ],\n  exports: [\n    // MATERIAL_FRAMEWORK_COMPONENTS\n    FlexLayoutRootComponent,\n    FlexLayoutSectionComponent,\n    MaterialAddReferenceComponent,\n    MaterialOneOfComponent,\n    MaterialButtonComponent,\n    MaterialButtonGroupComponent,\n    MaterialCheckboxComponent,\n    MaterialCheckboxesComponent,\n    MaterialChipListComponent,\n    MaterialDatepickerComponent,\n    MaterialFileComponent,\n    MaterialInputComponent,\n    MaterialNumberComponent,\n    MaterialRadiosComponent,\n    MaterialSelectComponent,\n    MaterialSliderComponent,\n    MaterialStepperComponent,\n    MaterialTabsComponent,\n    MaterialTextareaComponent,\n    MaterialDesignFrameworkComponent,\n  ],\n  entryComponents: [\n    // MATERIAL_FRAMEWORK_COMPONENTS\n    FlexLayoutRootComponent,\n    FlexLayoutSectionComponent,\n    MaterialAddReferenceComponent,\n    MaterialOneOfComponent,\n    MaterialButtonComponent,\n    MaterialButtonGroupComponent,\n    MaterialCheckboxComponent,\n    MaterialCheckboxesComponent,\n    MaterialChipListComponent,\n    MaterialDatepickerComponent,\n    MaterialFileComponent,\n    MaterialInputComponent,\n    MaterialNumberComponent,\n    MaterialRadiosComponent,\n    MaterialSelectComponent,\n    MaterialSliderComponent,\n    MaterialStepperComponent,\n    MaterialTabsComponent,\n    MaterialTextareaComponent,\n    MaterialDesignFrameworkComponent,\n  ],\n})\nexport class MaterialDesignFrameworkModule {\n  static forRoot(): ModuleWithProviders<MaterialDesignFrameworkModule> {\n    return {\n      ngModule: MaterialDesignFrameworkModule,\n      providers: [\n        {\n          provide: Framework,\n          useClass: MaterialDesignFramework,\n          multi: true,\n        },\n      ],\n    }\n  }\n}\n"],"names":["__decorate","_.cloneDeep"],"mappings":"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"}