{"version":3,"sources":["ng://ngsf-common/lib/functions/validator/executeAsyncValidators.ts","ng://ngsf-common/lib/functions/validator/executeValidators.ts","ng://ngsf-common/lib/functions/validator/isArray.ts","ng://ngsf-common/lib/functions/validator/isObject.ts","ng://ngsf-common/lib/functions/validator/isBoolean.ts","ng://ngsf-common/lib/functions/validator/isInteger.ts","ng://ngsf-common/lib/functions/validator/isNumber.ts","ng://ngsf-common/lib/functions/validator/isString.ts","ng://ngsf-common/lib/functions/validator/isDate.ts","ng://ngsf-common/lib/functions/validator/isDefined.ts","ng://ngsf-common/lib/functions/validator/getType.ts","ng://ngsf-common/lib/functions/validator/hasValue.ts","ng://ngsf-common/lib/functions/validator/inArray.ts","ng://ngsf-common/lib/functions/validator/isEmpty.ts","ng://ngsf-common/lib/functions/validator/isMap.ts","ng://ngsf-common/lib/functions/validator/isPrimitive.ts","ng://ngsf-common/lib/functions/validator/isPromise.ts","ng://ngsf-common/lib/functions/validator/isSet.ts","ng://ngsf-common/lib/functions/validator/isType.ts","ng://ngsf-common/lib/functions/validator/xor.ts","ng://ngsf-common/lib/functions/validator/mergeObjects.ts","ng://ngsf-common/lib/functions/validator/mergeErrors.ts","ng://ngsf-common/lib/functions/validator/toJavascriptType.ts","ng://ngsf-common/lib/functions/validator/toObservable.ts","ng://ngsf-common/lib/functions/validator/toSchemaType.ts","ng://ngsf-common/lib/functions/utility/commonItems.ts","ng://ngsf-common/lib/functions/utility/copy.ts","ng://ngsf-common/lib/functions/utility/toTitleCase.ts","ng://ngsf-common/lib/functions/utility/fixTitle.ts","ng://ngsf-common/lib/functions/utility/forEach.ts","ng://ngsf-common/lib/functions/utility/forEachCopy.ts","ng://ngsf-common/lib/functions/utility/hasOwn.ts","ng://ngsf-common/lib/functions/utility/mergeFilteredObject.ts","ng://ngsf-common/lib/functions/utility/uniqueItems.ts","ng://ngsf-common/lib/functions/jsonpointer.functions.ts","ng://ngsf-common/lib/constants/format-regex.constants.ts","ng://ngsf-common/lib/json.validators.ts","ng://ngsf-common/lib/functions/json-schema/checkInlineType.ts","ng://ngsf-common/lib/functions/merge-schemas/mergeSchemas.ts","ng://ngsf-common/lib/functions/json-schema/combineAllOf.ts","ng://ngsf-common/lib/functions/json-schema/fixRequiredArrayProperties.ts","ng://ngsf-common/lib/functions/json-schema/getControlValidators.ts","ng://ngsf-common/lib/functions/json-schema/getFromSchema.ts","ng://ngsf-common/lib/functions/json-schema/getTitleMapFromOneOf.ts","ng://ngsf-common/lib/functions/json-schema/getInputType.ts","ng://ngsf-common/lib/functions/json-schema/removeRecursiveReferences.ts","ng://ngsf-common/lib/functions/json-schema/getSubSchema.ts","ng://ngsf-common/lib/functions/json-schema/isInputRequired.ts","ng://ngsf-common/lib/functions/json-schema/updateInputOptions.ts","ng://ngsf-common/lib/functions/form-group/setRequiredFields.ts","ng://ngsf-common/lib/functions/layout/buildLayoutFromSchema.ts","ng://ngsf-common/lib/functions/layout/mapLayout.ts","ng://ngsf-common/lib/functions/date/findDate.ts","ng://ngsf-common/lib/functions/date/stringToDate.ts","ng://ngsf-common/lib/framework.ts","ng://ngsf-common/lib/locale/en-validation-messages.ts","ng://ngsf-common/lib/locale/fr-validation-messages.ts","ng://ngsf-common/lib/functions/utility/addClasses.ts","ng://ngsf-common/lib/functions/form-group/buildFormGroup.ts","ng://ngsf-common/lib/functions/form-group/buildFormGroupTemplate.ts","ng://ngsf-common/lib/functions/layout/buildLayout.ts","ng://ngsf-common/lib/functions/json-schema/buildSchemaFromData.ts","ng://ngsf-common/lib/functions/json-schema/buildSchemaFromLayout.ts","ng://ngsf-common/lib/functions/convert-schema-to-draft6.function.ts","ng://ngsf-common/lib/functions/date/dateToString.ts","ng://ngsf-common/lib/functions/date/ordinal.ts","ng://ngsf-common/lib/functions/form-group/formatFormData.ts","ng://ngsf-common/lib/functions/form-group/getControl.ts","ng://ngsf-common/lib/functions/validator/isFunction.ts","ng://ngsf-common/lib/functions/validator/isObservable.ts","ng://ngsf-common/lib/functions/json-schema/resolveSchemaReferences.ts","ng://ngsf-common/lib/functions/validator/toPromise.ts"],"names":["executeAsyncValidators","control","validators","invert","map","validator","executeValidators","isArray","item","Array","Object","prototype","toString","call","isObject","isBoolean","value","option","isInteger","strict","isNaN","isNumber","isString","isDate","isDefined","getType","hasValue","inArray","array","allIn","subItem","includes","isEmpty","length","keys","isMap","isPrimitive","isPromise","object","then","isSet","isType","type","console","error","xor","value1","value2","mergeObjects","objects","_i","arguments","mergedObject","objects_1","__values","objects_1_1","next","done","currentObject","_c","e_2","_d","key","currentValue","mergedValue","mergeErrors","arrayOfErrors","mergedErrors","apply","__spread","toJavaScriptType","types","strictIntegers","parseInt","parseFloat","toISOString","slice","getTime","toObservable","observable","fromPromise","isObservable","Observable","toSchemaType","testValue","commonItems","arrays","returnItems","__spread$1","filter","arrays_1","arrays_1_1","copy","errors","Map","Set","__spread$2","__assign","toTitleCase","input","forceWords","forceArray","split","concat","forceArrayLower","w","toLowerCase","noInitialCase","toUpperCase","prevLastChar","trim","replace","word","idx","search","newWord","forceWord","indexOf","fixTitle","name","forEach","fn","recurse","rootObject","_b","forEachCopy","newObject","hasOwn","property","has","hasOwnProperty","mergeFilteredObject","targetObject","sourceObject","excludeKeys","keyFn","valFn","val","uniqueItems","items","items_1","items_1_1","push","JsonPointer","get","pointer","startSlice","endSlice","getBoolean","undefined","keyArray","this","parse","subObject","keyArray_1","keyArray_1_1","getCopy","objectToCopy","forEachDeepCopy","getFirst","defaultValue","_e","__read$3","isJsonPointer","getFirstCopy","set","insert","i","match","lastKey","splice","setCopy","insertCopy","remove","pop","parentObject","lastIndex","dict","results","forEachDeep","bottomUp","v","newPointer","escape","__spread$3","__assign$1","unescape","compile","_this","join","toKey","every","test","isSubPointer","shortPointer","longPointer","trueIfMatching","invalid","toIndexedPointer","genericPointer","indexArray","arrayMap","indexedPointer_1","arrayIndex_1","stringIndex","indexArray_1","indexArray_1_1","pointerIndex","toGenericPointer","indexedPointer","pointerArray","subPointer","toControlPointer","dataPointer","formGroup","controlMustExist","dataPointerArray","controlPointerArray","subGroup","dataPointerArray_1","dataPointerArray_1_1","controls","toSchemaPointer","schema","firstKey","shift","properties","additionalProperties","arrayItem","additionalItems","toDataPointer","schemaPointer","pointerSuffix","secondKey","parseObjectPath","path","index","parts","nextDot","nextOB","quote","charAt","nextCB","RegExp","__decorate","Injectable","jsonSchemaFormatTests","date","time","date-time","email","hostname","ipv4","ipv6","uri","uri-reference","uri-template","url","uuid","color","json-pointer","relative-json-pointer","regex","str","e","JsonValidators","required","nullValidator","requiredType","some","enum","allowedValues","isEqual","enumValue","inputValue","_.isEqual","const","requiredValue","constValue","minLength","minimumLength","currentLength","maxLength","maximumLength","pattern","wholeString","requiredPattern","format","requiredFormat","isValid","formatTest","minimum","minimumValue","exclusiveMinimum","exclusiveMinimumValue","maximum","maximumValue","exclusiveMaximum","exclusiveMaximumValue","multipleOf","multipleOfValue","minProperties","minimumProperties","currentProperties","maxProperties","maximumProperties","dependencies","allErrors","requiringField","requiredFields","requiringFieldErrors","requiredFields_1","requiredFields_1_1","requiredField","requirements","requiredFieldErrors","requirement","parameter","exclusive","_a","minItems","minimumItems","currentItems","maxItems","maximumItems","unique","sorted","sort","duplicateItems","contains","requiredItem","composeAnyOf","presentValidators","__spread$4","anyOf","composeOneOf","arrayOfValids","oneOf","composeAllOf","combinedErrors","allOf","composeNot","not","compose","composeAsync","observables","forkJoin","min","actual","max","requiredTrue","checkInlineType","controlType","layoutNode","mergeSchemas","schemas","combinedSchema","schemas_1","schemas_1_1","x","y","combinedValue","schemaValue","__spread$5","item1","findIndex","item2","combinedObject","__assign$3","e_3","_f","subKey","definitions","_g","e_4","_h","combinedDependency","schemaDependency","gcd_1","Math","notAnyOf","reduce","notAnyOfArray","notSchema","_j","e_5","_k","patternProperties","combinedObject_1","combinedKey","nonMatchingKey","_l","e_6","_m","combinedTypes","combineAllOf","mergedSchema","__spread$6","extraKeys","__assign$4","fixRequiredArrayProperties","itemsObject_1","_.cloneDeep","getControlValidators","prop","ucLimit","eLimit","limit","getFromSchema","returnType","subSchema","subSchemaFound","getTitleMapFromOneOf","flatList","validateOnly","titleMap","title","newTitleMap_1","__read$7","group","__assign$5","getInputType","schemaType","removeRecursiveReferences","recursiveRefMap","possibleReferences","toPointer","fromPointer","getSubSchema","pointerArg","schemaRefLibrary","schemaRecursiveRefMap","usedPointers","__spread$7","newSchema","$ref","refPointer_1","ptr","refSchema","__assign$6","isInputRequired","listPointerArray","keyName","nextToLastKey","parentSchema","updateInputOptions","jsf","options","newOptions","fixUiKeys","formOptions","defautWidgetOptions","__read$a","newTitleMap","enumNames","typeahead","autocomplete","tagsinput","setRequiredFields","formControlTemplate","fieldsRequired","requiredArray","getLayoutNode","refNode","widgetLibrary","nodeValue","recursiveReference","newLayoutNode","assign","widget","getWidget","removable","layoutRefLibrary","buildLayoutFromSchema","arrayItemType","subNode","_id","_.uniqueId","forRefLibrary","dataPointerPrefix","newNodeType","setSchemaDefaults","formValues","newNode","dataType","lastDataKey","shortDataPointer","dataRecursiveRefMap","dataMap","nodeDataMap","disabled","newSection_1","propertyKeys_1","unnamedKeys","__spread$b","keySchemaPointer","innerItem","listItems","tupleItems","additionalItemsSchemaPointer","newItem","itemRecursive","itemRefPointer","itemSchemaPointer","arrayLength","addable","prefix","buttonText","schemaRef","dataRef","add","newLayout","mapLayout","layout","layoutPointer","rootLayout","indexPad","realIndex","newLayoutPointer","itemsArray","tabs","findDate","text","foundDate","stringToDate","dateString","getDate","dateParts","part","thisYear","Date","getFullYear","year","Framework","widgets","stylesheets","scripts","__decorate$1","enValidationMessages","log10","frValidationMessages","oldClasses","newClasses","badType","toSet","combinedSet","c","from","buildFormGroup","template","validatorFns","validatorFn","parameters","groupControls_1","newControl","FormGroup","FormArray","_.filter","_.map","FormControl","buildFormGroupTemplate","setValues","templatePointer","nodeOptions","__spread$9","additionalItemsPointer","schemaRefPointer","templateRefLibrary","itemOptions","refPointer","newTemplate","hasSubmitButton","formLayout","layoutItem","legend","validationMessages","errorMessages","validationMessage","code","newKey","nodeSchema","findDataPointer_1","searchItem","childDataPointer","lastIndexOf","LastKey","recursive_1","hasWidget","oldWidgetType","copyValueTo","itemRefPointer_1","arrayItemGroup","unshift","orderable","arrayListItems","fieldStyle","style","parentType","hasRootReference","fullLayout","buildSchemaFromData","data","requireAllFields","isRoot","getFieldType","fieldType","integer","null","buildSubSchema","$schema","size","a","b","__assign$2","convertSchemaToDraft6","draft","changed","__spread$8","__assign$8","simpleTypes","contentEncoding","media","binaryEncoding","extends","disallow","maxDecimal","pow","divisibleBy","minimumCanEqual","maximumCanEqual","properties_1","requiredKeys_1","optional","requires","dependencies_1","id","$id","addToDescription","description","arrayKeys","numberKeys","objectKeys","stringKeys","filterKeys_1","number","string","all","newType","default","typeSchema","newKey_1","dateFormat","getMonth","getDay","last","1","2","3","ordinal","formData","returnEmptyFields","fixErrors","formattedData","genericPointer_1","newValue","keySchemaType","returnGroup","formControl","subscribe","refLinks","refMapSet","refMap","refLibrary","subSchemaPointer","ref","checkRefLinks","__read$9","fromRef1","toRef1","fromRef2","toRef2","refLink","fromRef","toRef","compiledSchema","__assign$7","fromDataRef","toDataRef","toPromise"],"mappings":"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","sourcesContent":["/**\n * 'executeAsyncValidators' utility function\n *\n * Validates a control against an array of async validators, and returns\n * an array of observabe results of the same length containing a combination of\n * error messages (from invalid validators) and null values (from valid ones)\n *\n * @param  { AbstractControl } control - control to validate\n * @param  { AsyncIValidatorFn[] } validators - array of async validators\n * @param  { boolean } invert - invert?\n * @return array of observable nulls and error message\n */\nimport {AbstractControl} from '@angular/forms'\nimport {AsyncIValidatorFn} from './types'\n\nexport function executeAsyncValidators(\n  control: AbstractControl,\n  validators: AsyncIValidatorFn[],\n  invert = false\n) {\n  return validators.map(validator => validator(control, invert))\n}\n","import {AbstractControl} from '@angular/forms'\nimport {IValidatorFn, PlainObject} from './types'\n\n/**\n * 'executeValidators' utility function\n *\n * Validates a control against an array of validators, and returns\n * an array of the same length containing a combination of error messages\n * (from invalid validators) and null values (from valid validators)\n *\n * @param control to validate\n * @param validators - array of validators\n * @param invert - invert?\n * @return array of nulls and error message\n */\nexport function executeValidators(\n  control: AbstractControl,\n  validators: IValidatorFn[],\n  invert = false\n): PlainObject[] {\n  return validators.map(validator => validator(control, invert))\n}\n","export function isArray(item: any): boolean {\n  return Array.isArray(item) ||\n    Object.prototype.toString.call(item) === '[object Array]'\n}\n","export function isObject(item: any): boolean {\n  return item !== null && typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Object]'\n}\n","/**\n * 'isBoolean' utility function\n *\n * Checks if a value is a boolean.\n *\n * @param value - the value to check\n * @param option - if 'strict', also checks JavaScript type\n *                              if TRUE or FALSE, checks only for that value\n * @return true if boolean, false if not\n */\nexport function isBoolean(value: any, option: any = null): boolean {\n  if (option === 'strict') {\n    return value === true || value === false\n  }\n  if (option === true) {\n    return value === true || value === 1 || value === 'true' || value === '1'\n  }\n  if (option === false) {\n    return value === false || value === 0 || value === 'false' || value === '0'\n  }\n  return value === true || value === 1 || value === 'true' || value === '1' ||\n    value === false || value === 0 || value === 'false' || value === '0'\n}\n","/**\n * 'isInteger' utility function\n *\n * Checks if a value is an integer.\n *\n * @param value - the value to check\n * @param strict - if truthy, also checks JavaScript tyoe\n * @return true if number, false if not\n */\nexport function isInteger(value: any, strict: any = false): boolean {\n  if (strict && typeof value !== 'number') {\n    return false\n  }\n  return !isNaN(value) && value !== value / 0 && value % 1 === 0\n}\n","/**\n * 'isNumber' utility function\n *\n * Checks if a value is a regular number, numeric string, or JavaScript Date.\n *\n * @param value - the value to check\n * @param strict - if truthy, also checks JavaScript tyoe\n * @return true if number, false if not\n */\nexport function isNumber(value: any, strict: any = false): boolean {\n  if (strict && typeof value !== 'number') {\n    return false\n  }\n  return !isNaN(value) && value !== value / 0\n}\n","/**\n * 'isString' utility function\n *\n * Checks if a value is a string.\n *\n * @param value - the value to check\n * @return true if string, false if not\n */\nexport function isString(value: any): boolean {\n  return typeof value === 'string'\n}\n","export function isDate(item: any): boolean {\n  return typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Date]'\n}\n","/**\n * 'isDefined' utility function\n *\n * Checks if a variable contains a value of any type.\n * Returns true even for otherwise 'falsey' values of 0, '', and false.\n *\n * @param value - the value to check\n * @return false if undefined or null, otherwise true\n */\nexport function isDefined(value: any): boolean {\n  return value !== undefined && value !== null\n}\n","import {isArray} from './isArray'\nimport {isObject} from './isObject'\nimport {isBoolean} from './isBoolean'\nimport {isInteger} from './isInteger'\nimport {isNumber} from './isNumber'\nimport {isString} from './isString'\nimport {isDate} from './isDate'\nimport {isDefined} from './isDefined'\n/**\n * 'getType' function\n *\n * Detects the JSON Schema Type of a value.\n * By default, detects numbers and integers even if formatted as strings.\n * (So all integers are also numbers, and any number may also be a string.)\n * However, it only detects true boolean values (to detect boolean values\n * in non-boolean formats, use isBoolean() instead).\n *\n * If passed a second optional parameter of 'strict', it will only detect\n * numbers and integers if they are formatted as JavaScript numbers.\n *\n * Examples:\n * getType('10.5') = 'number'\n * getType(10.5) = 'number'\n * getType('10') = 'integer'\n * getType(10) = 'integer'\n * getType('true') = 'string'\n * getType(true) = 'boolean'\n * getType(null) = 'null'\n * getType({ }) = 'object'\n * getType([]) = 'array'\n *\n * getType('10.5', 'strict') = 'string'\n * getType(10.5, 'strict') = 'number'\n * getType('10', 'strict') = 'string'\n * getType(10, 'strict') = 'integer'\n * getType('true', 'strict') = 'string'\n * getType(true, 'strict') = 'boolean'\n *\n * @param value - value to check\n * @param strict - if truthy, also checks JavaScript tyoe\n */\n\nexport function getType(value: any, strict: any = false) {\n  if (!isDefined(value)) {\n    return 'null'\n  }\n  if (isArray(value)) {\n    return 'array'\n  }\n  if (isObject(value)) {\n    return 'object'\n  }\n  if (isBoolean(value, 'strict')) {\n    return 'boolean'\n  }\n  if (isInteger(value, strict)) {\n    return 'integer'\n  }\n  if (isNumber(value, strict)) {\n    return 'number'\n  }\n  if (isString(value) || (!strict && isDate(value))) {\n    return 'string'\n  }\n  return null\n}\n","/**\n * 'hasValue' utility function\n *\n * Checks if a variable contains a value.\n * Returs false for null, undefined, or a zero-length strng, '',\n * otherwise returns true.\n * (Stricter than 'isDefined' because it also returns false for '',\n * though it stil returns true for otherwise 'falsey' values 0 and false.)\n *\n * @param value - the value to check\n * @return false if undefined, null, or '', otherwise true\n */\nexport function hasValue(value: any): boolean {\n  return value !== undefined && value !== null && value !== ''\n}\n","import {isDefined} from './isDefined'\nimport {isArray} from './isArray'\n\n/**\n * 'inArray' function\n *\n * Searches an array for an item, or one of a list of items, and returns true\n * as soon as a match is found, or false if no match.\n *\n * If the optional third parameter allIn is set to TRUE, and the item to find\n * is an array, then the function returns true only if all elements from item\n * are found in the array list, and false if any element is not found. If the\n * item to find is not an array, setting allIn to TRUE has no effect.\n *\n * @param item - the item to search for\n * @param array - the array to search\n * @param allIn - if TRUE, all items must be in array\n * @return true if item(s) in array, false otherwise\n */\nexport function inArray<T>(\n  item: any | any[],\n  array: T[],\n  allIn = false\n): boolean {\n  if (!isDefined(item) || !isArray(array)) {\n    return false\n  }\n  return isArray(item) ?\n    item[allIn ? 'every' : 'some'](subItem => array.includes(subItem)) :\n    array.includes(item)\n}\n","import {isArray} from './isArray'\nimport {isObject} from './isObject'\n\n/**\n * 'isEmpty' utility function\n *\n * Similar to !hasValue, but also returns true for empty arrays and objects.\n *\n * @param value - the value to check\n * @return false if undefined, null, or '', otherwise true\n */\nexport function isEmpty(value: any): boolean {\n  if (isArray(value)) {\n    return !value.length\n  }\n  if (isObject(value)) {\n    return !Object.keys(value).length\n  }\n  return value === undefined || value === null || value === ''\n}\n","export function isMap(item: any): boolean {\n  return typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Map]'\n}\n","import {isString} from './isString'\nimport {isNumber} from './isNumber'\nimport {isBoolean} from './isBoolean'\n\n/**\n * 'isPrimitive' function\n *\n * Checks whether an input value is a JavaScript primitive type:\n * string, number, boolean, or null.\n *\n * @param value - value to check\n */\nexport function isPrimitive(value: any): boolean {\n  return (isString(value) || isNumber(value) ||\n    isBoolean(value, 'strict') || value === null)\n}\n","/**\n * 'isPromise' function\n */\nexport function isPromise(object: any): object is Promise<any> {\n  return !!object && typeof object.then === 'function'\n}\n","export function isSet(item: any): boolean {\n  return typeof item === 'object' &&\n    Object.prototype.toString.call(item) === '[object Set]'\n}\n","import {isString} from './isString'\nimport {isDate} from './isDate'\nimport {isNumber} from './isNumber'\nimport {isInteger} from './isInteger'\nimport {isBoolean} from './isBoolean'\nimport {hasValue} from './hasValue'\nimport {PrimitiveValue, SchemaPrimitiveType} from './types'\n\n/**\n * 'isType' function\n *\n * Checks whether an input (probably string) value contains data of\n * a specified JSON Schema type\n *\n * @param value - value to check\n * @param type - type to check\n */\nexport function isType(value: PrimitiveValue, type: SchemaPrimitiveType): boolean {\n  switch (type) {\n    case 'string':\n      return isString(value) || isDate(value)\n    case 'number':\n      return isNumber(value)\n    case 'integer':\n      return isInteger(value)\n    case 'boolean':\n      return isBoolean(value)\n    case 'null':\n      return !hasValue(value)\n    default:\n      console.error(`isType error: \"${type}\" is not a recognized type.`)\n      return null\n  }\n}\n","/**\n * 'xor' utility function - exclusive or\n *\n * Returns true if exactly one of two values is truthy.\n *\n * @param value1 - first value to check\n * @param value2 - second value to check\n * @return true if exactly one input value is truthy, false if not\n */\nexport function xor(value1: any, value2: any): boolean {\n  return (!!value1 && !value2) || (!value1 && !!value2)\n}\n","import {PlainObject} from './types'\nimport {isObject} from './isObject'\nimport {isDefined} from './isDefined'\nimport {isBoolean} from './isBoolean'\nimport {getType} from './getType'\nimport {xor} from './xor'\n\n/**\n * 'mergeObjects' utility function\n *\n * Recursively Merges one or more objects into a single object with combined keys.\n * Automatically detects and ignores null and undefined inputs.\n * Also detects duplicated boolean 'not' keys and XORs their values.\n *\n * @param objects - one or more objects to merge\n * @return merged object\n */\nexport function mergeObjects(...objects: PlainObject[]): PlainObject {\n  const mergedObject: PlainObject = {}\n  for (const currentObject of objects) {\n    if (isObject(currentObject)) {\n      for (const key of Object.keys(currentObject)) {\n        const currentValue = currentObject[key]\n        const mergedValue = mergedObject[key]\n        mergedObject[key] = !isDefined(mergedValue) ? currentValue :\n          key === 'not' && isBoolean(mergedValue, 'strict') &&\n          isBoolean(currentValue, 'strict') ? xor(mergedValue, currentValue) :\n            getType(mergedValue) === 'object' && getType(currentValue) === 'object' ?\n              mergeObjects(mergedValue, currentValue) :\n              currentValue\n      }\n    }\n  }\n  return mergedObject\n}\n","import {mergeObjects} from './mergeObjects'\nimport {isEmpty} from './isEmpty'\nimport {PlainObject} from './types'\n\n/**\n * 'mergeErrors' utility function\n *\n * Merges an array of objects.\n * Used for combining the validator errors returned from 'executeValidators'\n *\n * @param arrayOfErrors - array of objects\n * @return merged object, or null if no usable input objects\n */\nexport function mergeErrors(arrayOfErrors: any): PlainObject {\n  const mergedErrors = mergeObjects(...arrayOfErrors)\n  return isEmpty(mergedErrors) ? null : mergedErrors\n}\n","import {isDefined} from './isDefined'\nimport {isString} from './isString'\nimport {isInteger} from './isInteger'\nimport {isNumber} from './isNumber'\nimport {isDate} from './isDate'\nimport {isBoolean} from './isBoolean'\nimport {inArray} from './inArray'\nimport {PrimitiveValue, SchemaPrimitiveType} from './types'\n\n/**\n * 'toJavaScriptType' function\n *\n * Converts an input (probably string) value to a JavaScript primitive type -\n * 'string', 'number', 'boolean', or 'null' - before storing in a JSON object.\n *\n * Does not coerce values (other than null), and only converts the types\n * of values that would otherwise be valid.\n *\n * If the optional third parameter 'strictIntegers' is TRUE, and the\n * JSON Schema type 'integer' is specified, it also verifies the input value\n * is an integer and, if it is, returns it as a JaveScript number.\n * If 'strictIntegers' is FALSE (or not set) the type 'integer' is treated\n * exactly the same as 'number', and allows decimals.\n *\n * Valid Examples:\n * toJavaScriptType('10',   'number' ) = 10   // '10'   is a number\n * toJavaScriptType('10',   'integer') = 10   // '10'   is also an integer\n * toJavaScriptType( 10,    'integer') = 10   //  10    is still an integer\n * toJavaScriptType( 10,    'string' ) = '10' //  10    can be made into a string\n * toJavaScriptType('10.5', 'number' ) = 10.5 // '10.5' is a number\n *\n * Invalid Examples:\n * toJavaScriptType('10.5', 'integer') = null // '10.5' is not an integer\n * toJavaScriptType( 10.5,  'integer') = null //  10.5  is still not an integer\n *\n * @param value to convert\n * @param types - types to convert to\n * @param strictIntegers - if FALSE, treat integers as numbers\n */\nexport function toJavaScriptType(\n  value: PrimitiveValue,\n  types: SchemaPrimitiveType | SchemaPrimitiveType[],\n  strictIntegers = true\n): PrimitiveValue {\n  if (!isDefined(value)) {\n    return null\n  }\n  types = typeof types === 'string' ? [types] as SchemaPrimitiveType[] : types\n\n  if (strictIntegers && inArray<SchemaPrimitiveType>('integer', types)) {\n    if (isInteger(value, 'strict')) {\n      return value\n    }\n    if (isInteger(value)) {\n      return parseInt(value as string, 10)\n    }\n  }\n  if (inArray('number', types) || (!strictIntegers && inArray('integer', types))) {\n    if (isNumber(value, 'strict')) {\n      return value\n    }\n    if (isNumber(value)) {\n      return parseFloat(value as string)\n    }\n  }\n  if (inArray('string', types)) {\n    if (isString(value)) {\n      return value\n    }\n    // If value is a date, and types includes 'string',\n    // convert the date to a string\n    if (isDate(value)) {\n      return (value as any).toISOString().slice(0, 10)\n    }\n    if (isNumber(value)) {\n      return value.toString()\n    }\n  }\n  // If value is a date, and types includes 'integer' or 'number',\n  // but not 'string', convert the date to a number\n  if (isDate(value) && (inArray('integer', types) || inArray('number', types))) {\n    return (value as any).getTime()\n  }\n  if (inArray('boolean', types)) {\n    if (isBoolean(value, true)) {\n      return true\n    }\n    if (isBoolean(value, false)) {\n      return false\n    }\n  }\n  return null\n}\n","import {isObservable, Observable} from 'rxjs'\nimport {fromPromise} from 'rxjs-compat/observable/fromPromise'\nimport {isPromise} from './isPromise'\n\n/**\n * 'toObservable' function\n *\n */\nexport function toObservable(object: object): Observable<any> {\n  const observable = isPromise(object) ? fromPromise(object) : object\n  if (isObservable(observable)) {\n    return observable\n  }\n  console.error('toObservable error: Expected validator to return Promise or Observable.')\n  return new Observable()\n}\n","import {PrimitiveValue, SchemaPrimitiveType} from './types'\nimport {isArray} from './isArray'\nimport {toJavaScriptType} from './toJavascriptType'\nimport {isNumber} from './isNumber'\nimport {isString} from './isString'\nimport {isBoolean} from './isBoolean'\nimport {hasValue} from './hasValue'\n\n/**\n * 'toSchemaType' function\n *\n * Converts an input (probably string) value to the \"best\" JavaScript\n * equivalent available from an allowed list of JSON Schema types, which may\n * contain 'string', 'number', 'integer', 'boolean', and/or 'null'.\n * If necessary, it does progressively aggressive type coersion.\n * It will not return null unless null is in the list of allowed types.\n *\n * Number conversion examples:\n * toSchemaType('10', ['number','integer','string']) = 10 // integer\n * toSchemaType('10', ['number','string']) = 10 // number\n * toSchemaType('10', ['string']) = '10' // string\n * toSchemaType('10.5', ['number','integer','string']) = 10.5 // number\n * toSchemaType('10.5', ['integer','string']) = '10.5' // string\n * toSchemaType('10.5', ['integer']) = 10 // integer\n * toSchemaType(10.5, ['null','boolean','string']) = '10.5' // string\n * toSchemaType(10.5, ['null','boolean']) = true // boolean\n *\n * String conversion examples:\n * toSchemaType('1.5x', ['boolean','number','integer','string']) = '1.5x' // string\n * toSchemaType('1.5x', ['boolean','number','integer']) = '1.5' // number\n * toSchemaType('1.5x', ['boolean','integer']) = '1' // integer\n * toSchemaType('1.5x', ['boolean']) = true // boolean\n * toSchemaType('xyz', ['number','integer','boolean','null']) = true // boolean\n * toSchemaType('xyz', ['number','integer','null']) = null // null\n * toSchemaType('xyz', ['number','integer']) = 0 // number\n *\n * Boolean conversion examples:\n * toSchemaType('1', ['integer','number','string','boolean']) = 1 // integer\n * toSchemaType('1', ['number','string','boolean']) = 1 // number\n * toSchemaType('1', ['string','boolean']) = '1' // string\n * toSchemaType('1', ['boolean']) = true // boolean\n * toSchemaType('true', ['number','string','boolean']) = 'true' // string\n * toSchemaType('true', ['boolean']) = true // boolean\n * toSchemaType('true', ['number']) = 0 // number\n * toSchemaType(true, ['number','string','boolean']) = true // boolean\n * toSchemaType(true, ['number','string']) = 'true' // string\n * toSchemaType(true, ['number']) = 1 // number\n *\n * @param value - value to convert\n * @param type - allowed types to convert to\n */\nexport function toSchemaType(\n  value: PrimitiveValue,\n  type: SchemaPrimitiveType | SchemaPrimitiveType[]\n) {\n  const types = isArray(type) ? type : [type]\n\n  if (types.includes('null') && !hasValue(value)) {\n    return null\n  }\n  if (types.includes('boolean') && !isBoolean(value, 'strict')) {\n    return value\n  }\n  if (types.includes('integer')) {\n    const testValue = toJavaScriptType(value, 'integer')\n    if (testValue !== null) {\n      return +testValue\n    }\n  }\n  if (types.includes('number')) {\n    const testValue = toJavaScriptType(value, 'number')\n    if (testValue !== null) {\n      return +testValue\n    }\n  }\n  if (\n    (isString(value) || isNumber(value, 'strict')) &&\n    types.includes('string')\n  ) { // Convert number to string\n    return toJavaScriptType(value, 'string')\n  }\n  if (types.includes('boolean') && isBoolean(value)) {\n    return toJavaScriptType(value, 'boolean')\n  }\n  if (types.includes('string')) { // Convert null & boolean to string\n    if (value === null) {\n      return ''\n    }\n    const testValue = toJavaScriptType(value, 'string')\n    if (testValue !== null) {\n      return testValue\n    }\n  }\n  if (\n    types.includes('number') ||\n    types.includes('integer')\n  ) {\n    if (value === true) {\n      return 1\n    } // Convert boolean & null to number\n    if (value === false || value === null || value === '') {\n      return 0\n    }\n  }\n  if (types.includes('number')) { // Convert mixed string to number\n    const testValue = parseFloat(value as string)\n    if (!!testValue) {\n      return testValue\n    }\n  }\n  if (types.includes('integer')) { // Convert string or number to integer\n    const testValue = parseInt(value as string, 10)\n    if (!!testValue) {\n      return testValue\n    }\n  }\n  if (types.includes('boolean')) { // Convert anything to boolean\n    return !!value\n  }\n  if ((\n    types.includes('number') ||\n    types.includes('integer')\n  ) && !types.includes('null')\n  ) {\n    return 0 // If null not allowed, return 0 for non-convertable values\n  }\n}\n","/**\n * 'commonItems' function\n *\n * Accepts any number of strings or arrays of string values,\n * and returns a single array containing only values present in all inputs.\n */\nexport function commonItems(...arrays: string[]): string[] {\n  let returnItems = null\n  for (const value of arrays) {\n    const array = typeof value === 'string' ? [value] : value\n\n    returnItems = returnItems === null ? [...array] :\n      returnItems.filter(item => array.includes(item))\n    if (!returnItems.length) {\n      return []\n    }\n  }\n  return returnItems\n}\n","import {isArray, isMap, isObject, isSet} from '../validator'\n\n/**\n * 'copy' function\n *\n * Makes a shallow copy of a JavaScript object, array, Map, or Set.\n * If passed a JavaScript primitive value (string, number, boolean, or null),\n * it returns the value.\n *\n * @param object - The object to copy\n * @param errors - Show errors?\n * @return The copied object\n */\nexport function copy(\n  object: any,\n  errors: boolean = false\n) {\n  if (typeof object !== 'object' || object === null) {\n    return object\n  }\n  if (isMap(object)) {\n    return new Map(object)\n  }\n  if (isSet(object)) {\n    return new Set(object)\n  }\n  if (isArray(object)) {\n    return [...object]\n  }\n  if (isObject(object)) {\n    return {...object}\n  }\n  if (errors) {\n    console.error('copy error: Object to copy must be a JavaScript object or value.')\n  }\n  return object\n}\n","import {isArray, isString} from '../validator'\n\n/**\n * 'toTitleCase' function\n *\n * Intelligently converts an input string to Title Case.\n *\n * Accepts an optional second parameter with a list of additional\n * words and abbreviations to force into a particular case.\n *\n * This function is built on prior work by John Gruber and David Gouch:\n * http://daringfireball.net/2008/08/title_case_update\n * https://github.com/gouch/to-title-case\n */\nexport function toTitleCase(input: string, forceWords?: string | string[]): string {\n  if (!isString(input)) {\n    return input\n  }\n  let forceArray: string[] = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'en',\n    'for', 'if', 'in', 'nor', 'of', 'on', 'or', 'per', 'the', 'to', 'v', 'v.',\n    'vs', 'vs.', 'via']\n  if (isString(forceWords)) {\n    forceWords = (forceWords as string).split('|')\n  }\n  if (isArray(forceWords)) {\n    forceArray = forceArray.concat(forceWords)\n  }\n  const forceArrayLower: string[] = forceArray.map(w => w.toLowerCase())\n  const noInitialCase: boolean =\n    input === input.toUpperCase() || input === input.toLowerCase()\n  let prevLastChar = ''\n  input = input.trim()\n  return input.replace(/[A-Za-z0-9\\u00C0-\\u00FF]+[^\\s-]*/g, (word, idx) => {\n    if (!noInitialCase && word.slice(1).search(/[A-Z]|\\../) !== -1) {\n      return word\n    } else {\n      let newWord: string\n      const forceWord: string =\n        forceArray[forceArrayLower.indexOf(word.toLowerCase())]\n      if (!forceWord) {\n        if (noInitialCase) {\n          if (word.slice(1).search(/\\../) !== -1) {\n            newWord = word.toLowerCase()\n          } else {\n            newWord = word[0].toUpperCase() + word.slice(1).toLowerCase()\n          }\n        } else {\n          newWord = word[0].toUpperCase() + word.slice(1)\n        }\n      } else if (\n        forceWord === forceWord.toLowerCase() && (\n          idx === 0 || idx + word.length === input.length ||\n          prevLastChar === ':' || input[idx - 1].search(/[^\\s-]/) !== -1 ||\n          (input[idx - 1] !== '-' && input[idx + word.length] === '-')\n        )\n      ) {\n        newWord = forceWord[0].toUpperCase() + forceWord.slice(1)\n      } else {\n        newWord = forceWord\n      }\n      prevLastChar = word.slice(-1)\n      return newWord\n    }\n  })\n}\n","import {toTitleCase} from './toTitleCase'\n\n/**\n * 'fixTitle' function\n */\nexport function fixTitle(name: string): string {\n  return name && toTitleCase(name.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/_/g, ' '))\n}\n","import {isArray, isEmpty, isObject} from '../validator'\n\n/**\n * 'forEach' function\n *\n * Iterates over all items in the first level of an object or array\n * and calls an iterator function on each item.\n *\n * The iterator function is called with four values:\n * 1. The current item's value\n * 2. The current item's key\n * 3. The parent object, which contains the current item\n * 4. The root object\n *\n * Setting the optional third parameter to 'top-down' or 'bottom-up' will cause\n * it to also recursively iterate over items in sub-objects or sub-arrays in the\n * specified direction.\n *\n * @param object - The object or array to iterate over\n * @param fn - the iterator function to call on each item\n * @param recurse -\n * @param rootObject -\n * @param errors - Show errors?\n */\nexport function forEach(\n  object: any | any[],\n  fn: (v: any, k?: string | number, c?: any, rc?: any) => any,\n  recurse: boolean | string = false,\n  rootObject: any = object,\n  errors = false\n): void {\n  if (isEmpty(object)) {\n    return\n  }\n  if ((isObject(object) || isArray(object)) && typeof fn === 'function') {\n    for (const key of Object.keys(object)) {\n      const value = object[key]\n      if (recurse === 'bottom-up' && (isObject(value) || isArray(value))) {\n        forEach(value, fn, recurse, rootObject)\n      }\n      fn(value, key, object, rootObject)\n      if (recurse === 'top-down' && (isObject(value) || isArray(value))) {\n        forEach(value, fn, recurse, rootObject)\n      }\n    }\n  }\n  if (errors) {\n    if (typeof fn !== 'function') {\n      console.error('forEach error: Iterator must be a function.')\n      console.error('function', fn)\n    }\n    if (!isObject(object) && !isArray(object)) {\n      console.error('forEach error: Input object must be an object or array.')\n      console.error('object', object)\n    }\n  }\n}\n","import {hasValue, isArray, isObject} from '../validator'\n\n/**\n * 'forEachCopy' function\n *\n * Iterates over all items in the first level of an object or array\n * and calls an iterator function on each item. Returns a new object or array\n * with the same keys or indexes as the original, and values set to the results\n * of the iterator function.\n *\n * Does NOT recursively iterate over items in sub-objects or sub-arrays.\n *\n * @param object - The object or array to iterate over\n * @param fn - The iterator function to call on each item\n * @param errors - Show errors?\n * @return The resulting object or array\n */\nexport function forEachCopy(\n  object: any | any[],\n  fn: (v: any, k?: string | number, o?: any, p?: string) => any,\n  errors = false\n): any | any[] {\n  if (!hasValue(object)) {\n    return\n  }\n  if ((isObject(object) || isArray(object)) && typeof object !== 'function') {\n    const newObject: any = isArray(object) ? [] : {}\n    for (const key of Object.keys(object)) {\n      newObject[key] = fn(object[key], key, object)\n    }\n    return newObject\n  }\n  if (errors) {\n    if (typeof fn !== 'function') {\n      console.error('forEachCopy error: Iterator must be a function.')\n      console.error('function', fn)\n    }\n    if (!isObject(object) && !isArray(object)) {\n      console.error('forEachCopy error: Input object must be an object or array.')\n      console.error('object', object)\n    }\n  }\n}\n","import {isArray, isMap, isObject, isSet} from '../validator'\n\n/**\n * 'hasOwn' utility function\n *\n * Checks whether an object or array has a particular property.\n *\n * @param object - the object to check\n * @param property - the property to look for\n * @return true if object has property, false if not\n */\nexport function hasOwn(object: any, property: string): boolean {\n  if (!object || !['number', 'string', 'symbol'].includes(typeof property) ||\n    (!isObject(object) && !isArray(object) && !isMap(object) && !isSet(object))\n  ) {\n    return false\n  }\n  if (isMap(object) || isSet(object)) {\n    return object.has(property)\n  }\n  if (typeof property === 'number') {\n    if (isArray(object)) {\n      return object[property as number]\n    }\n    property = property + ''\n  }\n  return object.hasOwnProperty(property)\n}\n","import {inArray, isDefined, isObject, PlainObject} from '../validator'\n\n/**\n * 'mergeFilteredObject' utility function\n *\n * Shallowly merges two objects, setting key and values from source object\n * in target object, excluding specified keys.\n *\n * Optionally, it can also use functions to transform the key names and/or\n * the values of the merging object.\n *\n * @param targetObject - Target object to add keys and values to\n * @param sourceObject - Source object to copy keys and values from\n * @param excludeKeys - Array of keys to exclude\n * @param keyFn - Function to apply to keys\n * @param valFn - Function to apply to values\n * @return Returns targetObject\n */\nexport function mergeFilteredObject(\n  targetObject: PlainObject,\n  sourceObject: PlainObject,\n  excludeKeys:string[] = [],\n  keyFn = (key: string): string => key,\n  valFn = (val: any): any => val\n): PlainObject {\n  if (!isObject(sourceObject)) {\n    return targetObject\n  }\n  if (!isObject(targetObject)) {\n    targetObject = {}\n  }\n  for (const key of Object.keys(sourceObject)) {\n    if (!inArray(key, excludeKeys) && isDefined(sourceObject[key])) {\n      targetObject[keyFn(key)] = valFn(sourceObject[key])\n    }\n  }\n  return targetObject\n}\n","/**\n * 'uniqueItems' function\n *\n * Accepts any number of string value inputs,\n * and returns an array of all input vaues, excluding duplicates.\n */\nexport function uniqueItems(...items: string[]): string[] {\n  const returnItems = []\n  for (const item of items) {\n    if (!returnItems.includes(item)) {\n      returnItems.push(item)\n    }\n  }\n  return returnItems\n}\n","import {Injectable} from '@angular/core'\n\nimport {\n  isDefined, isEmpty, isObject, isArray, isMap, isNumber, isString\n} from './validator'\nimport {hasOwn, copy} from './utility'\nimport {FormGroup} from '@angular/forms'\n\n/**\n * 'JsonPointer' class\n *\n * Some utilities for using JSON Pointers with JSON objects\n * https://tools.ietf.org/html/rfc6901\n *\n * get, getCopy, getFirst, set, setCopy, insert, insertCopy, remove, has, dict,\n * forEachDeep, forEachDeepCopy, escape, unescape, parse, compile, toKey,\n * isJsonPointer, isSubPointer, toIndexedPointer, toGenericPointer,\n * toControlPointer, toSchemaPointer, toDataPointer, parseObjectPath\n *\n * Some functions based on manuelstofer's json-pointer utilities\n * https://github.com/manuelstofer/json-pointer\n */\nexport type Pointer = string | string[]\n\n// @dynamic\n@Injectable()\nexport class JsonPointer {\n\n  /**\n   * 'get' function\n   *\n   * Uses a JSON Pointer to retrieve a value from an object.\n   *\n   * @param object - Object to get value from\n   * @param pointer - JSON Pointer (string or array)\n   * @param startSlice - Zero-based index of first Pointer key to use\n   * @param endSlice - Zero-based index of last Pointer key to use\n   * @param getBoolean - Return only true or false?\n   * @param errors - Show error if not found?\n   * @return Located value (or true or false if getBoolean = true)\n   */\n  static get(\n    object,\n    pointer: Pointer,\n    startSlice: number = 0,\n    endSlice: number = null,\n    getBoolean: boolean = false,\n    errors: boolean = false\n  ) {\n    if (object === null) {\n      return getBoolean ? false : undefined\n    }\n    let keyArray: any[] = this.parse(pointer, errors)\n    if (typeof object === 'object' && keyArray !== null) {\n      let subObject = object\n      if (startSlice >= keyArray.length || endSlice <= -keyArray.length) {\n        return object\n      }\n      if (startSlice <= -keyArray.length) {\n        startSlice = 0\n      }\n      if (!isDefined(endSlice) || endSlice >= keyArray.length) {\n        endSlice = keyArray.length\n      }\n      keyArray = keyArray.slice(startSlice, endSlice)\n      for (let key of keyArray) {\n        if (key === '-' && isArray(subObject) && subObject.length) {\n          key = subObject.length - 1\n        }\n        if (isMap(subObject) && subObject.has(key)) {\n          subObject = subObject.get(key)\n        } else if (typeof subObject === 'object' && subObject !== null &&\n          hasOwn(subObject, key)\n        ) {\n          subObject = subObject[key]\n        } else {\n          if (errors) {\n            console.error(`get error: \"${key}\" key not found in object.`)\n            console.error(pointer)\n            console.error(object)\n          }\n          return getBoolean ? false : undefined\n        }\n      }\n      return getBoolean ? true : subObject\n    }\n    if (errors && keyArray === null) {\n      console.error(`get error: Invalid JSON Pointer: ${pointer}`)\n    }\n    if (errors && typeof object !== 'object') {\n      console.error('get error: Invalid object:')\n      console.error(object)\n    }\n    return getBoolean ? false : undefined\n  }\n\n  /**\n   * 'getCopy' function\n   *\n   * Uses a JSON Pointer to deeply clone a value from an object.\n   *\n   * @param object - Object to get value from\n   * @param pointer - JSON Pointer (string or array)\n   * @param startSlice - Zero-based index of first Pointer key to use\n   * @param endSlice - Zero-based index of last Pointer key to use\n   * @param getBoolean - Return only true or false?\n   * @param errors - Show error if not found?\n   * @return Located value (or true or false if getBoolean = true)\n   */\n  static getCopy(\n    object,\n    pointer: Pointer,\n    startSlice: number = 0,\n    endSlice: number = null,\n    getBoolean: boolean = false,\n    errors: boolean = false\n  ) {\n    const objectToCopy =\n      this.get(object, pointer, startSlice, endSlice, getBoolean, errors)\n    return this.forEachDeepCopy(objectToCopy)\n  }\n\n  /**\n   * 'getFirst' function\n   *\n   * Takes an array of JSON Pointers and objects,\n   * checks each object for a value specified by the pointer,\n   * and returns the first value found.\n   *\n   * @param items - Array of objects and pointers to check\n   * @param defaultValue - Value to return if nothing found\n   * @param getCopy - Return a copy instead?\n   * @return First value found\n   */\n  static getFirst(\n    items: Array<object | Pointer>,\n    defaultValue: any = null,\n    getCopy = false\n  ) {\n    if (isEmpty(items)) {\n      return\n    }\n    if (isArray(items)) {\n      for (const item of items) {\n        if (isEmpty(item)) {\n          continue\n        }\n        if (isArray(item) && (item as string[]).length >= 2) {\n          if (isEmpty(item[0]) || isEmpty(item[1])) {\n            continue\n          }\n          const value = getCopy ?\n            this.getCopy(item[0], item[1]) :\n            this.get(item[0], item[1])\n          if (value) {\n            return value\n          }\n          continue\n        }\n        console.error('getFirst error: Input not in correct format.\\n' +\n          'Should be: [ [ object1, pointer1 ], [ object 2, pointer2 ], etc... ]')\n        return\n      }\n      return defaultValue\n    }\n    if (isMap(items)) {\n      for (const [object, pointer] of (items as any)) {\n        if (object === null || !this.isJsonPointer(pointer)) {\n          continue\n        }\n        const value = getCopy ?\n          this.getCopy(object, pointer) :\n          this.get(object, pointer)\n        if (value) {\n          return value\n        }\n      }\n      return defaultValue\n    }\n    console.error('getFirst error: Input not in correct format.\\n' +\n      'Should be: [ [ object1, pointer1 ], [ object 2, pointer2 ], etc... ]')\n    return defaultValue\n  }\n\n  /**\n   * 'getFirstCopy' function\n   *\n   * Similar to getFirst, but always returns a copy.\n   *\n   * @param items - Array of objects and pointers to check\n   * @param defaultValue - Value to return if nothing found\n   * @return Copy of first value found\n   */\n  static getFirstCopy(\n    items: Array<object | Pointer>,\n    defaultValue: any = null\n  ) {\n    return this.getFirst(items, defaultValue, true)\n  }\n\n  /**\n   * 'set' function\n   *\n   * Uses a JSON Pointer to set a value on an object.\n   * Also creates any missing sub objects or arrays to contain that value.\n   *\n   * If the optional fourth parameter is TRUE and the inner-most container\n   * is an array, the function will insert the value as a new item at the\n   * specified location in the array, rather than overwriting the existing\n   * value (if any) at that location.\n   *\n   * So set([1, 2, 3], '/1', 4) => [1, 4, 3]\n   * and\n   * So set([1, 2, 3], '/1', 4, true) => [1, 4, 2, 3]\n   *\n   * @param object - The object to set value in\n   * @param pointer - The JSON Pointer (string or array)\n   * @param value - The new value to set\n   * @param insert - insert value?\n   * @return The original object, modified with the set value\n   */\n  static set(\n    object: object,\n    pointer: Pointer,\n    value: any,\n    insert = false\n  ) {\n    const keyArray = this.parse(pointer)\n    if (keyArray !== null && keyArray.length) {\n      let subObject: any = object\n      for (let i = 0; i < keyArray.length - 1; ++i) {\n        let key = keyArray[i]\n        if (key === '-' && isArray(subObject)) {\n          key = subObject.length\n        }\n        if (isMap(subObject) && subObject.has(key)) {\n          subObject = subObject.get(key)\n        } else {\n          if (!hasOwn(subObject, key)) {\n            subObject[key] = (keyArray[i + 1].match(/^(\\d+|-)$/)) ? [] : {}\n          }\n          subObject = subObject[key]\n        }\n      }\n      const lastKey = keyArray[keyArray.length - 1]\n      if (isArray(subObject) && lastKey === '-') {\n        subObject.push(value)\n      } else if (insert && isArray(subObject) && !isNaN(+lastKey)) {\n        subObject.splice(lastKey, 0, value)\n      } else if (isMap(subObject)) {\n        subObject.set(lastKey, value)\n      } else {\n        subObject[lastKey] = value\n      }\n      return object\n    }\n    console.error(`set error: Invalid JSON Pointer: ${pointer}`)\n    return object\n  }\n\n  /**\n   * 'setCopy' function\n   *\n   * Copies an object and uses a JSON Pointer to set a value on the copy.\n   * Also creates any missing sub objects or arrays to contain that value.\n   *\n   * If the optional fourth parameter is TRUE and the inner-most container\n   * is an array, the function will insert the value as a new item at the\n   * specified location in the array, rather than overwriting the existing value.\n   *\n   * @param object - The object to copy and set value in\n   * @param pointer - The JSON Pointer (string or array)\n   * @param value - The value to set\n   * @param insert - insert value?\n   * @return The new object with the set value\n   */\n  static setCopy(\n    object: object,\n    pointer: Pointer,\n    value: any,\n    insert = false\n  ) {\n    const keyArray = this.parse(pointer)\n    if (keyArray !== null) {\n      const newObject = copy(object)\n      let subObject = newObject\n      for (let i = 0; i < keyArray.length - 1; ++i) {\n        let key = keyArray[i]\n        if (key === '-' && isArray(subObject)) {\n          key = subObject.length\n        }\n        if (isMap(subObject) && subObject.has(key)) {\n          subObject.set(key, copy(subObject.get(key)))\n          subObject = subObject.get(key)\n        } else {\n          if (!hasOwn(subObject, key)) {\n            subObject[key] = (keyArray[i + 1].match(/^(\\d+|-)$/)) ? [] : {}\n          }\n          subObject[key] = copy(subObject[key])\n          subObject = subObject[key]\n        }\n      }\n      const lastKey = keyArray[keyArray.length - 1]\n      if (isArray(subObject) && lastKey === '-') {\n        subObject.push(value)\n      } else if (insert && isArray(subObject) && !isNaN(+lastKey)) {\n        subObject.splice(lastKey, 0, value)\n      } else if (isMap(subObject)) {\n        subObject.set(lastKey, value)\n      } else {\n        subObject[lastKey] = value\n      }\n      return newObject\n    }\n    console.error(`setCopy error: Invalid JSON Pointer: ${pointer}`)\n    return object\n  }\n\n  /**\n   * 'insert' function\n   *\n   * Calls 'set' with insert = TRUE\n   *\n   * @param object - object to insert value in\n   * @param pointer - JSON Pointer (string or array)\n   * @param value - value to insert\n   */\n  static insert(\n    object: object,\n    pointer: Pointer,\n    value: any\n  ) {\n    const updatedObject = this.set(object, pointer, value, true)\n    return updatedObject\n  }\n\n  /**\n   * 'insertCopy' function\n   *\n   * Calls 'setCopy' with insert = TRUE\n   *\n   * @param object - object to insert value in\n   * @param pointer - JSON Pointer (string or array)\n   * @param value - value to insert\n   */\n  static insertCopy(\n    object: object,\n    pointer: Pointer,\n    value: any\n  ) {\n    const updatedObject = this.setCopy(object, pointer, value, true)\n    return updatedObject\n  }\n\n  /**\n   * 'remove' function\n   *\n   * Uses a JSON Pointer to remove a key and its attribute from an object\n   *\n   * @param object - object to delete attribute from\n   * @param pointer - JSON Pointer (string or array)\n   */\n  static remove(\n    object: object,\n    pointer: Pointer\n  ) {\n    const keyArray = this.parse(pointer)\n    if (keyArray !== null && keyArray.length) {\n      const lastKey = keyArray.pop()\n      const parentObject = this.get(object, keyArray)\n      if (Array.isArray(parentObject)) {\n        const lastIndex = (lastKey === '-') ? parentObject.length - 1 : parseInt(lastKey, 10)\n\n        parentObject.splice(lastIndex, 1)\n      } else if (isObject(parentObject)) {\n        delete parentObject[lastKey]\n      }\n      return object\n    }\n    console.error(`remove error: Invalid JSON Pointer: ${pointer}`)\n    return object\n  }\n\n  /**\n   * 'has' function\n   *\n   * Tests if an object has a value at the location specified by a JSON Pointer\n   *\n   * @param object - object to chek for value\n   * @param pointer - JSON Pointer (string or array)\n   */\n  static has(\n    object: object,\n    pointer: Pointer\n  ): boolean {\n    return this.get(object, pointer, 0, null, true)\n  }\n\n  /**\n   * 'dict' function\n   *\n   * Returns a (pointer -> value) dictionary for an object\n   *\n   * @param object - The object to create a dictionary from\n   * @return The resulting dictionary object\n   */\n  static dict(object: object) {\n    const results: any = {}\n    this.forEachDeep(object, (value, pointer) => {\n      if (typeof value !== 'object') {\n        results[pointer] = value\n      }\n    })\n    return results\n  }\n\n  /**\n   * 'forEachDeep' function\n   *\n   * Iterates over own enumerable properties of an object or items in an array\n   * and invokes an iteratee function for each key/value or index/value pair.\n   * By default, iterates over items within objects and arrays after calling\n   * the iteratee function on the containing object or array itself.\n   *\n   * The iteratee is invoked with three arguments: (value, pointer, rootObject),\n   * where pointer is a JSON pointer indicating the location of the current\n   * value within the root object, and rootObject is the root object initially\n   * submitted to th function.\n   *\n   * If a third optional parameter 'bottomUp' is set to TRUE, the iterator\n   * function will be called on sub-objects and arrays after being\n   * called on their contents, rather than before, which is the default.\n   *\n   * This function can also optionally be called directly on a sub-object by\n   * including optional 4th and 5th parameters to specify the initial\n   * root object and pointer.\n   *\n   * @param object - the initial object or array\n   * @param fn - iteratee function\n   * @param bottomUp - optional, set to TRUE to reverse direction\n   * @param pointer - optional, JSON Pointer to object within rootObject\n   * @param rootObject - optional, root object or array\n   * @return The modified object\n   */\n  static forEachDeep(\n    object,\n    fn: (v: any, p?: string, o?: any) => any = (v) => v,\n    bottomUp = false,\n    pointer = '',\n    rootObject = object\n  ) {\n    if (typeof fn !== 'function') {\n      console.error(`forEachDeep error: Iterator is not a function:`, fn)\n      return\n    }\n    if (!bottomUp) {\n      fn(object, pointer, rootObject)\n    }\n    if (isObject(object) || isArray(object)) {\n      for (const key of Object.keys(object)) {\n        const newPointer = pointer + '/' + this.escape(key)\n        this.forEachDeep(object[key], fn, bottomUp, newPointer, rootObject)\n      }\n    }\n    if (bottomUp) {\n      fn(object, pointer, rootObject)\n    }\n  }\n\n  /**\n   * 'forEachDeepCopy' function\n   *\n   * Similar to forEachDeep, but returns a copy of the original object, with\n   * the same keys and indexes, but with values replaced with the result of\n   * the iteratee function.\n   *\n   * @param object - the initial object or array\n   * @param fn - iteratee function\n   * @param bottomUp - optional, set to TRUE to reverse direction\n   * @param pointer - optional, JSON Pointer to object within rootObject\n   * @param rootObject - optional, root object or array\n   * @return The copied object\n   */\n  static forEachDeepCopy(\n    object: object,\n    fn: (v: any, p?: string, o?: any) => any = (v) => v,\n    bottomUp: boolean = false,\n    pointer: string = '',\n    rootObject: object = object\n  ) {\n    if (typeof fn !== 'function') {\n      console.error(`forEachDeepCopy error: Iterator is not a function:`, fn)\n      return null\n    }\n    if (isObject(object) || Array.isArray(object)) {\n      let newObject = Array.isArray(object) ? [...object] : {...object}\n      if (!bottomUp) {\n        newObject = fn(newObject, pointer, rootObject)\n      }\n      for (const key of Object.keys(newObject)) {\n        const newPointer = pointer + '/' + this.escape(key)\n        newObject[key] = this.forEachDeepCopy(\n          newObject[key], fn, bottomUp, newPointer, rootObject\n        )\n      }\n      if (bottomUp) {\n        newObject = fn(newObject, pointer, rootObject)\n      }\n      return newObject\n    } else {\n      return fn(object, pointer, rootObject)\n    }\n  }\n\n  /**\n   * 'escape' function\n   *\n   * Escapes a string reference key\n   *\n   * @param key - string key to escape\n   * @return escaped key\n   */\n  static escape(key: string): string {\n    return key.toString().replace(/~/g, '~0').replace(/\\//g, '~1')\n  }\n\n  /**\n   * 'unescape' function\n   *\n   * Unescapes a string reference key\n   *\n   * @param key - string key to unescape\n   * @return unescaped key\n   */\n  static unescape(key: string) {\n    return key.toString().replace(/~1/g, '/').replace(/~0/g, '~')\n  }\n\n  /**\n   * 'parse' function\n   *\n   * Converts a string JSON Pointer into a array of keys\n   * (if input is already an an array of keys, it is returned unchanged)\n   *\n   * @param pointer - JSON Pointer (string or array)\n   * @param errors - Show error if invalid pointer?\n   * @return JSON Pointer array of keys\n   */\n  static parse(\n    pointer: Pointer,\n    errors: boolean = false\n  ): string[] {\n    if (!this.isJsonPointer(pointer)) {\n      if (errors) {\n        console.error(`parse error: Invalid JSON Pointer: ${pointer}`)\n      }\n      return null\n    }\n    if (isArray(pointer)) {\n      return pointer as string[]\n    }\n    if (typeof pointer === 'string') {\n      if (pointer[0] === '#') {\n        pointer = pointer.slice(1)\n      }\n      if (pointer === '' || pointer === '/') {\n        return []\n      }\n      return pointer.slice(1).split('/').map(this.unescape)\n    }\n  }\n\n  /**\n   * 'compile' function\n   *\n   * Converts an array of keys into a JSON Pointer string\n   * (if input is already a string, it is normalized and returned)\n   *\n   * The optional second parameter is a default which will replace any empty keys.\n   *\n   * @param pointer - JSON Pointer (string or array)\n   * @param defaultValue - Default value\n   * @param errors - Show error if invalid pointer?\n   * @return JSON Pointer string\n   */\n  static compile(\n    pointer: Pointer,\n    defaultValue: string | number = '',\n    errors: boolean = false\n  ): string {\n    if (pointer === '#') {\n      return ''\n    }\n    if (!this.isJsonPointer(pointer)) {\n      if (errors) {\n        console.error(`compile error: Invalid JSON Pointer: ${pointer}`)\n      }\n      return null\n    }\n    if (Array.isArray(pointer)) {\n      if (pointer.length === 0) {\n        return ''\n      }\n      return '/' + pointer.map(\n        key => key === '' ? defaultValue : this.escape(key)\n      ).join('/')\n    }\n    if (typeof pointer === 'string') {\n      if (pointer[0] === '#') {\n        pointer = pointer.slice(1)\n      }\n      return pointer\n    }\n  }\n\n  /**\n   * 'toKey' function\n   *\n   * Extracts name of the final key from a JSON Pointer.\n   *\n   * @param pointer - JSON Pointer (string or array)\n   * @param errors - Show error if invalid pointer?\n   * @return the extracted key\n   */\n  static toKey(\n    pointer: Pointer,\n    errors: boolean = false\n  ): string {\n    const keyArray = this.parse(pointer, errors)\n    if (keyArray === null) {\n      return null\n    }\n    if (!keyArray.length) {\n      return ''\n    }\n    return keyArray[keyArray.length - 1]\n  }\n\n  /**\n   * 'isJsonPointer' function\n   *\n   * Checks a string or array value to determine if it is a valid JSON Pointer.\n   * Returns true if a string is empty, or starts with '/' or '#/'.\n   * Returns true if an array contains only string values.\n   *\n   * @param value - value to check\n   * @return true if value is a valid JSON Pointer, otherwise false\n   */\n  static isJsonPointer(value: any): boolean {\n    if (isArray(value)) {\n      return value.every(key => typeof key === 'string')\n    } else if (isString(value)) {\n      if (value === '' || value === '#') {\n        return true\n      }\n      if (value[0] === '/' || value.slice(0, 2) === '#/') {\n        return !/(~[^01]|~$)/g.test(value)\n      }\n    }\n    return false\n  }\n\n  /**\n   * 'isSubPointer' function\n   *\n   * Checks whether one JSON Pointer is a subset of another.\n   *\n   * @param shortPointer - potential subset JSON Pointer\n   * @param longPointer - potential superset JSON Pointer\n   * @param trueIfMatching - return true if pointers match?\n   * @param errors - Show error if invalid pointer?\n   * @return true if shortPointer is a subset of longPointer, false if not\n   */\n  static isSubPointer(\n    shortPointer: Pointer,\n    longPointer: Pointer,\n    trueIfMatching: boolean = false,\n    errors: boolean = false\n  ): boolean {\n    if (!this.isJsonPointer(shortPointer) || !this.isJsonPointer(longPointer)) {\n      if (errors) {\n        let invalid = ''\n        if (!this.isJsonPointer(shortPointer)) {\n          invalid += ` 1: ${shortPointer}`\n        }\n        if (!this.isJsonPointer(longPointer)) {\n          invalid += ` 2: ${longPointer}`\n        }\n        console.error(`isSubPointer error: Invalid JSON Pointer ${invalid}`)\n      }\n      return\n    }\n    shortPointer = this.compile(shortPointer, '', errors)\n    longPointer = this.compile(longPointer, '', errors)\n    return shortPointer === longPointer ? trueIfMatching :\n      `${shortPointer}/` === longPointer.slice(0, shortPointer.length + 1)\n  }\n\n  /**\n   * 'toIndexedPointer' function\n   *\n   * Merges an array of numeric indexes and a generic pointer to create an\n   * indexed pointer for a specific item.\n   *\n   * For example, merging the generic pointer '/foo/-/bar/-/baz' and\n   * the array [4, 2] would result in the indexed pointer '/foo/4/bar/2/baz'\n   *\n   * @param genericPointer - The generic pointer\n   * @param indexArray - The array of numeric indexes\n   * @param arrayMap - An optional array map\n   * @return The merged pointer with indexes\n   */\n  static toIndexedPointer(\n    genericPointer: Pointer,\n    indexArray: number[],\n    arrayMap: Map<string, number> = null\n  ): string {\n    if (this.isJsonPointer(genericPointer) && isArray(indexArray)) {\n      let indexedPointer = this.compile(genericPointer)\n      if (isMap(arrayMap)) {\n        let arrayIndex = 0\n        return indexedPointer.replace(/\\/\\-(?=\\/|$)/g, (key, stringIndex) =>\n          arrayMap.has((indexedPointer as string).slice(0, stringIndex)) ?\n            '/' + indexArray[arrayIndex++] : key\n        )\n      } else {\n        for (const pointerIndex of indexArray) {\n          indexedPointer = indexedPointer.replace('/-', '/' + pointerIndex)\n        }\n        return indexedPointer\n      }\n    }\n    if (!this.isJsonPointer(genericPointer)) {\n      console.error(`toIndexedPointer error: Invalid JSON Pointer: ${genericPointer}`)\n    }\n    if (!isArray(indexArray)) {\n      console.error(`toIndexedPointer error: Invalid indexArray: ${indexArray}`)\n    }\n  }\n\n  /**\n   * 'toGenericPointer' function\n   *\n   * Compares an indexed pointer to an array map and removes list array\n   * indexes (but leaves tuple arrray indexes and all object keys, including\n   * numeric keys) to create a generic pointer.\n   *\n   * For example, using the indexed pointer '/foo/1/bar/2/baz/3' and\n   * the arrayMap [['/foo', 0], ['/foo/-/bar', 3], ['/foo/-/bar/-/baz', 0]]\n   * would result in the generic pointer '/foo/-/bar/2/baz/-'\n   * Using the indexed pointer '/foo/1/bar/4/baz/3' and the same arrayMap\n   * would result in the generic pointer '/foo/-/bar/-/baz/-'\n   * (the bar array has 3 tuple items, so index 2 is retained, but 4 is removed)\n   *\n   * The structure of the arrayMap is: [['path to array', number of tuple items]...]\n   *\n   * @param indexedPointer - The indexed pointer (array or string)\n   * @param arrayMap - The optional array map (for preserving tuple indexes)\n   * @return The generic pointer with indexes removed\n   */\n  static toGenericPointer(\n    indexedPointer: Pointer,\n    arrayMap: Map<string, number> = new Map<string, number>()\n  ): string {\n    if (this.isJsonPointer(indexedPointer) && isMap(arrayMap)) {\n      const pointerArray = this.parse(indexedPointer)\n      for (let i = 1; i < pointerArray.length; i++) {\n        const subPointer = this.compile(pointerArray.slice(0, i))\n        if (arrayMap.has(subPointer) &&\n          arrayMap.get(subPointer) <= +pointerArray[i]\n        ) {\n          pointerArray[i] = '-'\n        }\n      }\n      return this.compile(pointerArray)\n    }\n    if (!this.isJsonPointer(indexedPointer)) {\n      console.error(`toGenericPointer error: invalid JSON Pointer: ${indexedPointer}`)\n    }\n    if (!isMap(arrayMap)) {\n      console.error(`toGenericPointer error: invalid arrayMap: ${arrayMap}`)\n    }\n  }\n\n  /**\n   * 'toControlPointer' function\n   *\n   * Accepts a JSON Pointer for a data object and returns a JSON Pointer for the\n   * matching control in an Angular FormGroup.\n   *\n   * @param dataPointer - JSON Pointer (string or array) to a data object\n   * @param formGroup - Angular FormGroup to get value from\n   * @param controlMustExist - Only return if control exists?\n   * @return JSON Pointer (string) to the formGroup object\n   */\n  static toControlPointer(\n    dataPointer: Pointer,\n    formGroup: FormGroup,\n    controlMustExist: boolean = false\n  ) {\n    const dataPointerArray = this.parse(dataPointer)\n    const controlPointerArray: string[] = []\n    let subGroup: any = formGroup\n    if (dataPointerArray !== null) {\n      for (const key of dataPointerArray) {\n        if (hasOwn(subGroup, 'controls')) {\n          controlPointerArray.push('controls')\n          subGroup = subGroup.controls\n        }\n        if (isArray(subGroup) && (key === '-')) {\n          controlPointerArray.push((subGroup.length - 1).toString())\n          subGroup = subGroup[subGroup.length - 1]\n        } else if (hasOwn(subGroup, key)) {\n          controlPointerArray.push(key)\n          subGroup = subGroup[key]\n        } else if (controlMustExist) {\n          console.error(`toControlPointer error: Unable to find \"${key}\" item in FormGroup.`)\n          console.error(dataPointer)\n          console.error(formGroup)\n          return\n        } else {\n          controlPointerArray.push(key)\n          subGroup = {controls: {}}\n        }\n      }\n      return this.compile(controlPointerArray)\n    }\n    console.error(`toControlPointer error: Invalid JSON Pointer: ${dataPointer}`)\n  }\n\n  /**\n   * 'toSchemaPointer' function\n   *\n   * Accepts a JSON Pointer to a value inside a data object and a JSON schema\n   * for that object.\n   *\n   * Returns a Pointer to the sub-schema for the value inside the object's schema.\n   *\n   * @param dataPointer - JSON Pointer (string or array) to an object\n   * @param schema - JSON schema for the object\n   * @return JSON Pointer (string) to the object's schema\n   */\n  static toSchemaPointer(\n    dataPointer: Pointer,\n    schema: any\n  ): Pointer {\n    if (this.isJsonPointer(dataPointer) && typeof schema === 'object') {\n      const pointerArray = this.parse(dataPointer)\n      if (!pointerArray.length) {\n        return ''\n      }\n      const firstKey = pointerArray.shift()\n      if (schema.type === 'object' || schema.properties || schema.additionalProperties) {\n        if ((schema.properties || {})[firstKey]) {\n          return `/properties/${this.escape(firstKey)}` +\n            this.toSchemaPointer(pointerArray, schema.properties[firstKey])\n        } else if (schema.additionalProperties) {\n          return '/additionalProperties' +\n            this.toSchemaPointer(pointerArray, schema.additionalProperties)\n        }\n      }\n      if ((schema.type === 'array' || schema.items) &&\n        (isNumber(firstKey) || firstKey === '-' || firstKey === '')\n      ) {\n        const arrayItem = firstKey === '-' || firstKey === '' ? 0 : +firstKey\n        if (isArray(schema.items)) {\n          if (arrayItem < schema.items.length) {\n            return '/items/' + arrayItem +\n              this.toSchemaPointer(pointerArray, schema.items[arrayItem])\n          } else if (schema.additionalItems) {\n            return '/additionalItems' +\n              this.toSchemaPointer(pointerArray, schema.additionalItems)\n          }\n        } else if (isObject(schema.items)) {\n          return '/items' + this.toSchemaPointer(pointerArray, schema.items)\n        } else if (isObject(schema.additionalItems)) {\n          return '/additionalItems' +\n            this.toSchemaPointer(pointerArray, schema.additionalItems)\n        }\n      }\n      console.error(`toSchemaPointer error: Data pointer ${dataPointer} ` +\n        `not compatible with schema ${schema}`)\n      return null\n    }\n    if (!this.isJsonPointer(dataPointer)) {\n      console.error(`toSchemaPointer error: Invalid JSON Pointer: ${dataPointer}`)\n    }\n    if (typeof schema !== 'object') {\n      console.error(`toSchemaPointer error: Invalid JSON Schema: ${schema}`)\n    }\n    return null\n  }\n\n  /**\n   * 'toDataPointer' function\n   *\n   * Accepts a JSON Pointer to a sub-schema inside a JSON schema and the schema.\n   *\n   * If possible, returns a generic Pointer to the corresponding value inside\n   * the data object described by the JSON schema.\n   *\n   * Returns null if the sub-schema is in an ambiguous location (such as\n   * definitions or additionalProperties) where the corresponding value\n   * location cannot be determined.\n   *\n   * @param schemaPointer - JSON Pointer (string or array) to a JSON schema\n   * @param schema - the JSON schema\n   * @param errors - Show errors?\n   * @return JSON Pointer (string) to the value in the data object\n   */\n  static toDataPointer(\n    schemaPointer: Pointer,\n    schema: any,\n    errors: boolean = false\n  ): Pointer {\n    if (this.isJsonPointer(schemaPointer) && typeof schema === 'object' &&\n      this.has(schema, schemaPointer)\n    ) {\n      const pointerArray = this.parse(schemaPointer)\n      if (!pointerArray.length) {\n        return ''\n      }\n      const dataPointer = ''\n      const firstKey = pointerArray.shift()\n      if (firstKey === 'properties' ||\n        (firstKey === 'items' && isArray(schema.items))\n      ) {\n        const secondKey = pointerArray.shift()\n        const pointerSuffix = this.toDataPointer(pointerArray, schema[firstKey][secondKey])\n        return pointerSuffix === null ? null : '/' + secondKey + pointerSuffix\n      } else if (firstKey === 'additionalItems' ||\n        (firstKey === 'items' && isObject(schema.items))\n      ) {\n        const pointerSuffix = this.toDataPointer(pointerArray, schema[firstKey])\n        return pointerSuffix === null ? null : '/-' + pointerSuffix\n      } else if (['allOf', 'anyOf', 'oneOf'].includes(firstKey)) {\n        const secondKey = pointerArray.shift()\n        return this.toDataPointer(pointerArray, schema[firstKey][secondKey])\n      } else if (firstKey === 'not') {\n        return this.toDataPointer(pointerArray, schema[firstKey])\n      } else if (['contains', 'definitions', 'dependencies', 'additionalItems',\n        'additionalProperties', 'patternProperties', 'propertyNames'].includes(firstKey)\n      ) {\n        if (errors) {\n          console.error(`toDataPointer error: Ambiguous location`)\n        }\n      }\n      return ''\n    }\n    if (errors) {\n      if (!this.isJsonPointer(schemaPointer)) {\n        console.error(`toDataPointer error: Invalid JSON Pointer: ${schemaPointer}`)\n      }\n      if (typeof schema !== 'object') {\n        console.error(`toDataPointer error: Invalid JSON Schema: ${schema}`)\n      }\n      if (typeof schema !== 'object') {\n        console.error(`toDataPointer error: Pointer ${schemaPointer} invalid for Schema: ${schema}`)\n      }\n    }\n    return null\n  }\n\n  /**\n   * 'parseObjectPath' function\n   *\n   * Parses a JavaScript object path into an array of keys, which\n   * can then be passed to compile() to convert into a string JSON Pointer.\n   *\n   * Based on mike-marcacci's excellent objectpath parse function:\n   * https://github.com/mike-marcacci/objectpath\n   *\n   * @param path - The object path to parse\n   * @return The resulting array of keys\n   */\n  static parseObjectPath(path: Pointer): string[] {\n    if (isArray(path)) {\n      return path as string[]\n    }\n    if (this.isJsonPointer(path)) {\n      return this.parse(path)\n    }\n    if (typeof path === 'string') {\n      let index = 0\n      const parts: string[] = []\n      while (index < path.length) {\n        const nextDot = path.indexOf('.', index)\n        const nextOB = path.indexOf('[', index) // next open bracket\n        if (nextDot === -1 && nextOB === -1) { // last item\n          parts.push(path.slice(index))\n          index = path.length\n        } else if (nextDot !== -1 && (nextDot < nextOB || nextOB === -1)) { // dot notation\n          parts.push(path.slice(index, nextDot))\n          index = nextDot + 1\n        } else { // bracket notation\n          if (nextOB > index) {\n            parts.push(path.slice(index, nextOB))\n            index = nextOB\n          }\n          const quote = path.charAt(nextOB + 1)\n          if (quote === '\"' || quote === '\\'') { // enclosing quotes\n            let nextCB = path.indexOf(quote + ']', nextOB) // next close bracket\n            while (nextCB !== -1 && path.charAt(nextCB - 1) === '\\\\') {\n              nextCB = path.indexOf(quote + ']', nextCB + 2)\n            }\n            if (nextCB === -1) {\n              nextCB = path.length\n            }\n            parts.push(path.slice(index + 2, nextCB)\n              .replace(new RegExp('\\\\' + quote, 'g'), quote))\n            index = nextCB + 2\n          } else { // no enclosing quotes\n            let nextCB = path.indexOf(']', nextOB) // next close bracket\n            if (nextCB === -1) {\n              nextCB = path.length\n            }\n            parts.push(path.slice(index + 1, nextCB))\n            index = nextCB + 1\n          }\n          if (path.charAt(index) === '.') {\n            index++\n          }\n        }\n      }\n      return parts\n    }\n    console.error('parseObjectPath error: Input object path must be a string.')\n  }\n}\n","// tslint:disable max-line-length\n// updated from AJV fast format regular expressions:\n// https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js\n\nexport const jsonSchemaFormatTests = {\n  date: /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,\n\n  time: /^[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)?$/i,\n\n  // Modified to allow incomplete entries, such as\n  // \"2000-03-14T01:59:26.535\" (needs \"Z\") or \"2000-03-14T01:59\" (needs \":00Z\")\n  'date-time': /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s][0-2]\\d:[0-5]\\d(?::[0-5]\\d)?(?:\\.\\d+)?(?:z|[+-]\\d\\d:\\d\\d)?$/i,\n\n  // email (sources from jsen validator):\n  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\n  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')\n  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\n\n  hostname: /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i,\n\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n\n  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n\n  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\n  uri: /^(?:[a-z][a-z0-9+-.]*)(?::|\\/)\\/?[^\\s]*$/i,\n\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\n  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/\\/)?[^\\s]*$/i,\n\n  // uri-template: https://tools.ietf.org/html/rfc6570\n  'uri-template': /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i,\n\n  // For the source: https://gist.github.com/dperini/729294\n  // For test cases: https://mathiasbynens.be/demo/url-regex\n  // @todo Delete current URL in favour of the commented out URL rule when this ajv issue is fixed https://github.com/eslint/eslint/issues/7983.\n  // URL: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu,\n  url: /^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i,\n\n  // uuid: http://tools.ietf.org/html/rfc4122\n  uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,\n\n  // optimized https://gist.github.com/olmokramer/82ccce673f86db7cda5e\n  color: /^\\s*(#(?:[\\da-f]{3}){1,2}|rgb\\((?:\\d{1,3},\\s*){2}\\d{1,3}\\)|rgba\\((?:\\d{1,3},\\s*){3}\\d*\\.?\\d+\\)|hsl\\(\\d{1,3}(?:,\\s*\\d{1,3}%){2}\\)|hsla\\(\\d{1,3}(?:,\\s*\\d{1,3}%){2},\\s*\\d*\\.?\\d+\\))\\s*$/gi,\n\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\n  'json-pointer': /^(?:\\/(?:[^~/]|~0|~1)*)*$|^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,\n\n  'relative-json-pointer': /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/,\n\n  regex(str) {\n    if (/[^\\\\]\\\\Z/.test(str)) {\n      return false\n    }\n    try {\n      // tslint:disable-next-line no-unused-expression\n      new RegExp(str)\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n}\n\nexport type JsonSchemaFormatNames =\n  'date' | 'time' | 'date-time' | 'email' | 'hostname' | 'ipv4' | 'ipv6' |\n  'uri' | 'uri-reference' | 'uri-template' | 'url' | 'uuid' | 'color' |\n  'json-pointer' | 'relative-json-pointer' | 'regex'\n","import {AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms'\nimport {forkJoin} from 'rxjs-compat/observable/forkJoin'\nimport {map} from 'rxjs-compat/operator/map'\n\nimport * as _ from 'lodash'\n\nimport {\n  executeValidators, executeAsyncValidators, mergeObjects, mergeErrors,\n  isEmpty, isDefined, hasValue, isString, isNumber, isBoolean, isArray,\n  getType, isType, toJavaScriptType, toObservable, xor, SchemaPrimitiveType,\n  IValidatorFn, AsyncIValidatorFn\n} from './functions/validator'\nimport {forEachCopy} from './functions/utility'\nimport {jsonSchemaFormatTests, JsonSchemaFormatNames} from './constants/format-regex.constants'\n\n/**\n * 'JsonValidators' class\n *\n * Provides an extended set of validators to be used by form controls,\n * compatible with standard JSON Schema validation options.\n * http://json-schema.org/latest/json-schema-validation.html\n *\n * Note: This library is designed as a drop-in replacement for the Angular\n * Validators library, and except for one small breaking change to the 'pattern'\n * validator (described below) it can even be imported as a substitute, like so:\n *\n *   import { JsonValidators as Validators } from 'json-validators';\n *\n * and it should work with existing code as a complete replacement.\n *\n * The one exception is the 'pattern' validator, which has been changed to\n * match partial values by default (the standard 'pattern' validator wrapped\n * all patterns in '^' and '$', forcing them to always match an entire value).\n * However, the old behavior can be restored by simply adding '^' and '$'\n * around your patterns, or by passing an optional second parameter of TRUE.\n * This change is to make the 'pattern' validator match the behavior of a\n * JSON Schema pattern, which allows partial matches, rather than the behavior\n * of an HTML input control pattern, which does not.\n *\n * This library replaces Angular's validators and combination functions\n * with the following validators and transformation functions:\n *\n * Validators:\n *   For all formControls:     required (*), type, enum, const\n *   For text formControls:    minLength (*), maxLength (*), pattern (*), format\n *   For numeric formControls: maximum, exclusiveMaximum,\n *                             minimum, exclusiveMinimum, multipleOf\n *   For formGroup objects:    minProperties, maxProperties, dependencies\n *   For formArray arrays:     minItems, maxItems, uniqueItems, contains\n *   Not used by JSON Schema:  min (*), max (*), requiredTrue (*), email (*)\n * (Validators originally included with Angular are marked with (*).)\n *\n * NOTE / TODO: The dependencies validator is not complete.\n * NOTE / TODO: The contains validator is not complete.\n *\n * Validators not used by JSON Schema (but included for compatibility)\n * and their JSON Schema equivalents:\n *\n *   Angular validator | JSON Schema equivalent\n *   ------------------|-----------------------\n *     min(number)     |   minimum(number)\n *     max(number)     |   maximum(number)\n *     requiredTrue()  |   const(true)\n *     email()         |   format('email')\n *\n * Validator transformation functions:\n *   composeAnyOf, composeOneOf, composeAllOf, composeNot\n * (Angular's original combination function, 'compose', is also included for\n * backward compatibility, though it is functionally equivalent to composeAllOf,\n * aside from its more generic error message.)\n *\n * All validators have also been extended to accept an optional second argument\n * which, if passed a TRUE value, causes the validator to perform the opposite\n * of its original function. (This is used internally to enable 'not' and\n * 'composeOneOf' to function and return useful error messages.)\n *\n * The 'required' validator has also been overloaded so that if called with\n * a boolean parameter (or no parameters) it returns the original validator\n * function (rather than executing it). However, if it is called with an\n * AbstractControl parameter (as was previously required), it behaves\n * exactly as before.\n *\n * This enables all validators (including 'required') to be constructed in\n * exactly the same way, so they can be automatically applied using the\n * equivalent key names and values taken directly from a JSON Schema.\n *\n * This source code is partially derived from Angular,\n * which is Copyright (c) 2014-2017 Google, Inc.\n * Use of this source code is therefore governed by the same MIT-style license\n * that can be found in the LICENSE file at https://angular.io/license\n *\n * Original Angular Validators:\n * https://github.com/angular/angular/blob/master/packages/forms/src/validators.ts\n */\nexport class JsonValidators {\n\n  /**\n   * Validator functions:\n   *\n   * For all formControls:     required, type, enum, const\n   * For text formControls:    minLength, maxLength, pattern, format\n   * For numeric formControls: maximum, exclusiveMaximum,\n   *                           minimum, exclusiveMinimum, multipleOf\n   * For formGroup objects:    minProperties, maxProperties, dependencies\n   * For formArray arrays:     minItems, maxItems, uniqueItems, contains\n   *\n   * TODO: finish dependencies validator\n   */\n\n  /**\n   * 'required' validator\n   *\n   * This validator is overloaded, compared to the default required validator.\n   * If called with no parameters, or TRUE, this validator returns the\n   * 'required' validator function (rather than executing it). This matches\n   * the behavior of all other validators in this library.\n   *\n   * If this validator is called with an AbstractControl parameter\n   * (as was previously required) it behaves the same as Angular's default\n   * required validator, and returns an error if the control is empty.\n   *\n   * Behavior: (if no input, or input type = boolean)\n   * param {boolean = true} required? - true to validate, false to disable\n   * return {IValidatorFn} - returns the 'required' validator function itself\n   */\n  static required(input: AbstractControl): ValidationErrors | null\n  static required(input?: boolean): IValidatorFn\n  static required(input?: AbstractControl | boolean): ValidationErrors | null | IValidatorFn {\n    if (input === undefined) {\n      input = true\n    }\n    switch (input) {\n      case true: // Return required function (do not execute it yet)\n        return (control: AbstractControl, invert = false): ValidationErrors | null => {\n          if (invert) {\n            return null\n          } // if not required, always return valid\n          return hasValue(control.value) ? null : {required: true}\n        }\n      case false: // Do nothing (if field is not required, it is always valid)\n        return JsonValidators.nullValidator\n      default: // Execute required function\n        return hasValue((input as AbstractControl).value) ? null : {required: true}\n    }\n  }\n\n  /**\n   * 'type' validator\n   *\n   * Requires a control to only accept values of a specified type,\n   * or one of an array of types.\n   *\n   * Note: SchemaPrimitiveType = 'string'|'number'|'integer'|'boolean'|'null'\n   *\n   * @param requiredType - type(s) to accept\n   */\n  static type(requiredType: SchemaPrimitiveType | SchemaPrimitiveType[]): IValidatorFn {\n    if (!hasValue(requiredType)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue: any = control.value\n      const isValid = isArray(requiredType) ?\n        (requiredType as SchemaPrimitiveType[]).some(type => isType(currentValue, type)) :\n        isType(currentValue, requiredType as SchemaPrimitiveType)\n      return xor(isValid, invert) ?\n        null : {type: {requiredType, currentValue}}\n    }\n  }\n\n  /**\n   * 'enum' validator\n   *\n   * Requires a control to have a value from an enumerated list of values.\n   *\n   * Converts types as needed to allow string inputs to still correctly\n   * match number, boolean, and null enum values.\n   *\n   * @param allowedValues - array of acceptable values\n   */\n  static enum(allowedValues: any[]): IValidatorFn {\n    if (!isArray(allowedValues)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue: any = control.value\n      const isEqual = (enumValue, inputValue) =>\n        enumValue === inputValue ||\n        (isNumber(enumValue) && +inputValue === +enumValue) ||\n        (isBoolean(enumValue, 'strict') &&\n          toJavaScriptType(inputValue, 'boolean') === enumValue) ||\n        (enumValue === null && !hasValue(inputValue)) ||\n        _.isEqual(enumValue, inputValue)\n      const isValid = isArray(currentValue) ?\n        currentValue.every(inputValue => allowedValues.some(enumValue =>\n          isEqual(enumValue, inputValue)\n        )) :\n        allowedValues.some(enumValue => isEqual(enumValue, currentValue))\n      return xor(isValid, invert) ?\n        null : {enum: {allowedValues, currentValue}}\n    }\n  }\n\n  /**\n   * 'const' validator\n   *\n   * Requires a control to have a specific value.\n   *\n   * Converts types as needed to allow string inputs to still correctly\n   * match number, boolean, and null values.\n   *\n   * TODO: modify to work with objects\n   *\n   * @param requiredValue - required value\n   */\n  static const(requiredValue: any): IValidatorFn {\n    if (!hasValue(requiredValue)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue: any = control.value\n      const isEqual = (constValue, inputValue) =>\n        constValue === inputValue ||\n        isNumber(constValue) && +inputValue === +constValue ||\n        isBoolean(constValue, 'strict') &&\n        toJavaScriptType(inputValue, 'boolean') === constValue ||\n        constValue === null && !hasValue(inputValue)\n      const isValid = isEqual(requiredValue, currentValue)\n      return xor(isValid, invert) ?\n        null : {const: {requiredValue, currentValue}}\n    }\n  }\n\n  /**\n   * 'minLength' validator\n   *\n   * Requires a control's text value to be greater than a specified length.\n   *\n   * @param minimumLength - minimum allowed string length\n   */\n  static minLength(minimumLength: number): IValidatorFn {\n    if (!hasValue(minimumLength)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentLength = isString(control.value) ? control.value.length : 0\n      const isValid = currentLength >= minimumLength\n      return xor(isValid, invert) ?\n        null : {minLength: {minimumLength, currentLength}}\n    }\n  }\n\n  /**\n   * 'maxLength' validator\n   *\n   * Requires a control's text value to be less than a specified length.\n   *\n   * @param maximumLength - maximum allowed string length\n   */\n  static maxLength(maximumLength: number): IValidatorFn {\n    if (!hasValue(maximumLength)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      const currentLength = isString(control.value) ? control.value.length : 0\n      const isValid = currentLength <= maximumLength\n      return xor(isValid, invert) ?\n        null : {maxLength: {maximumLength, currentLength}}\n    }\n  }\n\n  /**\n   * 'pattern' validator\n   *\n   * Note: NOT the same as Angular's default pattern validator.\n   *\n   * Requires a control's value to match a specified regular expression pattern.\n   *\n   * This validator changes the behavior of default pattern validator\n   * by replacing RegExp(`^${pattern}$`) with RegExp(`${pattern}`),\n   * which allows for partial matches.\n   *\n   * To return to the default functionality, and match the entire string,\n   * pass TRUE as the optional second parameter.\n   *\n   * @param pattern - regular expression pattern\n   * @param wholeString - match whole value string?\n   */\n  static pattern(pattern: string | RegExp, wholeString = false): IValidatorFn {\n    if (!hasValue(pattern)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      let regex: RegExp\n      let requiredPattern: string\n      if (typeof pattern === 'string') {\n        requiredPattern = (wholeString) ? `^${pattern}$` : pattern\n        regex = new RegExp(requiredPattern)\n      } else {\n        requiredPattern = pattern.toString()\n        regex = pattern\n      }\n      const currentValue: string = control.value\n      const isValid = isString(currentValue) ? regex.test(currentValue) : false\n      return xor(isValid, invert) ?\n        null : {pattern: {requiredPattern, currentValue}}\n    }\n  }\n\n  /**\n   * 'format' validator\n   *\n   * Requires a control to have a value of a certain format.\n   *\n   * This validator currently checks the following formats:\n   *   date, time, date-time, email, hostname, ipv4, ipv6,\n   *   uri, uri-reference, uri-template, url, uuid, color,\n   *   json-pointer, relative-json-pointer, regex\n   *\n   * Fast format regular expressions copied from AJV:\n   * https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js\n   *\n   * @param requiredFormat - format to check\n   */\n  static format(requiredFormat: JsonSchemaFormatNames): IValidatorFn {\n    if (!hasValue(requiredFormat)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      let isValid: boolean\n      const currentValue: string | Date = control.value\n      if (isString(currentValue)) {\n        const formatTest = jsonSchemaFormatTests[requiredFormat]\n        if (typeof formatTest === 'object') {\n          isValid = (formatTest as RegExp).test(currentValue as string)\n        } else if (typeof formatTest === 'function') {\n          isValid = formatTest(currentValue as string)\n        } else {\n          console.error(`format validator error: \"${requiredFormat}\" is not a recognized format.`)\n          isValid = true\n        }\n      } else {\n        // Allow JavaScript Date objects\n        isValid = ['date', 'time', 'date-time'].includes(requiredFormat) &&\n          Object.prototype.toString.call(currentValue) === '[object Date]'\n      }\n      return xor(isValid, invert) ?\n        null : {format: {requiredFormat, currentValue}}\n    }\n  }\n\n  /**\n   * 'minimum' validator\n   *\n   * Requires a control's numeric value to be greater than or equal to\n   * a minimum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a minimum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param minimumValue - minimum allowed value\n   */\n  static minimum(minimumValue: number): IValidatorFn {\n    if (!hasValue(minimumValue)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue = control.value\n      const isValid = !isNumber(currentValue) || currentValue >= minimumValue\n      return xor(isValid, invert) ?\n        null : {minimum: {minimumValue, currentValue}}\n    }\n  }\n\n  /**\n   * 'exclusiveMinimum' validator\n   *\n   * Requires a control's numeric value to be less than a maximum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a maximum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param exclusiveMinimumValue - maximum allowed value\n   */\n  static exclusiveMinimum(exclusiveMinimumValue: number): IValidatorFn {\n    if (!hasValue(exclusiveMinimumValue)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue = control.value\n      const isValid = !isNumber(currentValue) || +currentValue < exclusiveMinimumValue\n      return xor(isValid, invert) ?\n        null : {exclusiveMinimum: {exclusiveMinimumValue, currentValue}}\n    }\n  }\n\n  /**\n   * 'maximum' validator\n   *\n   * Requires a control's numeric value to be less than or equal to\n   * a maximum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a maximum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param maximumValue - maximum allowed value\n   */\n  static maximum(maximumValue: number): IValidatorFn {\n    if (!hasValue(maximumValue)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue = control.value\n      const isValid = !isNumber(currentValue) || +currentValue <= maximumValue\n      return xor(isValid, invert) ?\n        null : {maximum: {maximumValue, currentValue}}\n    }\n  }\n\n  /**\n   * 'exclusiveMaximum' validator\n   *\n   * Requires a control's numeric value to be less than a maximum amount.\n   *\n   * Any non-numeric value is also valid (according to the HTML forms spec,\n   * a non-numeric value doesn't have a maximum).\n   * https://www.w3.org/TR/html5/forms.html#attr-input-max\n   *\n   * @param exclusiveMaximumValue - maximum allowed value\n   */\n  static exclusiveMaximum(exclusiveMaximumValue: number): IValidatorFn {\n    if (!hasValue(exclusiveMaximumValue)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue = control.value\n      const isValid = !isNumber(currentValue) || +currentValue < exclusiveMaximumValue\n      return xor(isValid, invert) ?\n        null : {exclusiveMaximum: {exclusiveMaximumValue, currentValue}}\n    }\n  }\n\n  /**\n   * 'multipleOf' validator\n   *\n   * Requires a control to have a numeric value that is a multiple\n   * of a specified number.\n   *\n   * @param multipleOfValue - number value must be a multiple of\n   */\n  static multipleOf(multipleOfValue: number): IValidatorFn {\n    if (!hasValue(multipleOfValue)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentValue = control.value\n      const isValid = isNumber(currentValue) &&\n        currentValue % multipleOfValue === 0\n      return xor(isValid, invert) ?\n        null : {multipleOf: {multipleOfValue, currentValue}}\n    }\n  }\n\n  /**\n   * 'minProperties' validator\n   *\n   * Requires a form group to have a minimum number of properties (i.e. have\n   * values entered in a minimum number of controls within the group).\n   *\n   * @param minimumProperties - minimum number of properties allowed\n   */\n  static minProperties(minimumProperties: number): IValidatorFn {\n    if (!hasValue(minimumProperties)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentProperties = Object.keys(control.value).length || 0\n      const isValid = currentProperties >= minimumProperties\n      return xor(isValid, invert) ?\n        null : {minProperties: {minimumProperties, currentProperties}}\n    }\n  }\n\n  /**\n   * 'maxProperties' validator\n   *\n   * Requires a form group to have a maximum number of properties (i.e. have\n   * values entered in a maximum number of controls within the group).\n   *\n   * Note: Has no effect if the form group does not contain more than the\n   * maximum number of controls.\n   *\n   * @param maximumProperties - maximum number of properties allowed\n   */\n  static maxProperties(maximumProperties: number): IValidatorFn {\n    if (!hasValue(maximumProperties)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      const currentProperties = Object.keys(control.value).length || 0\n      const isValid = currentProperties <= maximumProperties\n      return xor(isValid, invert) ?\n        null : {maxProperties: {maximumProperties, currentProperties}}\n    }\n  }\n\n  /**\n   * 'dependencies' validator\n   *\n   * Requires the controls in a form group to meet additional validation\n   * criteria, depending on the values of other controls in the group.\n   *\n   * Examples:\n   * https://spacetelescope.github.io/understanding-json-schema/reference/object.html#dependencies\n   *\n   * @param dependencies - required dependencies\n   */\n  static dependencies(dependencies: any): IValidatorFn {\n    if (getType(dependencies) !== 'object' || isEmpty(dependencies)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const allErrors = mergeObjects(\n        forEachCopy(dependencies, (value, requiringField) => {\n          if (!hasValue(control.value[requiringField])) {\n            return null\n          }\n          let requiringFieldErrors: ValidationErrors = {}\n          let requiredFields: string[]\n          let properties: ValidationErrors = {}\n          if (getType(dependencies[requiringField]) === 'array') {\n            requiredFields = dependencies[requiringField]\n          } else if (getType(dependencies[requiringField]) === 'object') {\n            requiredFields = dependencies[requiringField].required || []\n            properties = dependencies[requiringField].properties || {}\n          }\n\n          // Validate property dependencies\n          for (const requiredField of requiredFields) {\n            if (xor(!hasValue(control.value[requiredField]), invert)) {\n              requiringFieldErrors[requiredField] = {required: true}\n            }\n          }\n\n          // Validate schema dependencies\n          requiringFieldErrors = mergeObjects(requiringFieldErrors,\n            forEachCopy(properties, (requirements, requiredField) => {\n              const requiredFieldErrors = mergeObjects(\n                forEachCopy(requirements, (requirement, parameter) => {\n                  let validator: IValidatorFn = null\n                  if (requirement === 'maximum' || requirement === 'minimum') {\n                    const exclusive = !!requirements['exclusiveM' + requirement.slice(1)]\n                    validator = JsonValidators[requirement](parameter, exclusive)\n                  } else if (typeof JsonValidators[requirement] === 'function') {\n                    validator = JsonValidators[requirement](parameter)\n                  }\n                  return !isDefined(validator) ?\n                    null : validator(control.value[requiredField])\n                })\n              )\n              return isEmpty(requiredFieldErrors) ?\n                null : {[requiredField]: requiredFieldErrors}\n            })\n          )\n          return isEmpty(requiringFieldErrors) ?\n            null : {[requiringField]: requiringFieldErrors}\n        })\n      )\n      return isEmpty(allErrors) ? null : allErrors\n    }\n  }\n\n  /**\n   * 'minItems' validator\n   *\n   * Requires a form array to have a minimum number of values.\n   *\n   * @param minimumItems - minimum number of items allowed\n   */\n  static minItems(minimumItems: number): IValidatorFn {\n    if (!hasValue(minimumItems)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const currentItems = isArray(control.value) ? control.value.length : 0\n      const isValid = currentItems >= minimumItems\n      return xor(isValid, invert) ?\n        null : {minItems: {minimumItems, currentItems}}\n    }\n  }\n\n  /**\n   * 'maxItems' validator\n   *\n   * Requires a form array to have a maximum number of values.\n   *\n   * @param maximumItems - maximum number of items allowed\n   */\n  static maxItems(maximumItems: number): IValidatorFn {\n    if (!hasValue(maximumItems)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      const currentItems = isArray(control.value) ? control.value.length : 0\n      const isValid = currentItems <= maximumItems\n      return xor(isValid, invert) ?\n        null : {maxItems: {maximumItems, currentItems}}\n    }\n  }\n\n  /**\n   * 'uniqueItems' validator\n   *\n   * Requires values in a form array to be unique.\n   *\n   * @param unique? - true to validate, false to disable\n   */\n  static uniqueItems(unique = true): IValidatorFn {\n    if (!unique) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const sorted: any[] = control.value.slice().sort()\n      const duplicateItems = []\n      for (let i = 1; i < sorted.length; i++) {\n        if (sorted[i - 1] === sorted[i] && duplicateItems.includes(sorted[i])) {\n          duplicateItems.push(sorted[i])\n        }\n      }\n      const isValid = !duplicateItems.length\n      return xor(isValid, invert) ?\n        null : {uniqueItems: {duplicateItems}}\n    }\n  }\n\n  /**\n   * 'contains' validator\n   *\n   * TODO: Complete this validator\n   *\n   * Requires values in a form array to be unique.\n   *\n   * @param requiredItem? - true to validate, false to disable\n   */\n  static contains(requiredItem = true): IValidatorFn {\n    if (!requiredItem) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value) || !isArray(control.value)) {\n        return null\n      }\n      const currentItems = control.value\n      // const isValid = currentItems.some(item =>\n      //\n      // );\n      const isValid = true\n      return xor(isValid, invert) ?\n        null : {contains: {requiredItem, currentItems}}\n    }\n  }\n\n  /**\n   * No-op validator. Included for backward compatibility.\n   */\n  static nullValidator(control: AbstractControl): ValidationErrors | null {\n    return null\n  }\n\n  /**\n   * Validator transformation functions:\n   * composeAnyOf, composeOneOf, composeAllOf, composeNot,\n   * compose, composeAsync\n   *\n   * TODO: Add composeAnyOfAsync, composeOneOfAsync,\n   *           composeAllOfAsync, composeNotAsync\n   */\n\n  /**\n   * 'composeAnyOf' validator combination function\n   *\n   * Accepts an array of validators and returns a single validator that\n   * evaluates to valid if any one or more of the submitted validators are\n   * valid. If every validator is invalid, it returns combined errors from\n   * all validators.\n   *\n   * @param validators - array of validators to combine\n   */\n  static composeAnyOf(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) {\n      return null\n    }\n    const presentValidators = validators.filter(isDefined)\n    if (presentValidators.length === 0) {\n      return null\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      const arrayOfErrors =\n        executeValidators(control, presentValidators, invert).filter(isDefined)\n      const isValid = validators.length > arrayOfErrors.length\n      return xor(isValid, invert) ?\n        null : mergeObjects(...arrayOfErrors, {anyOf: !invert})\n    }\n  }\n\n  /**\n   * 'composeOneOf' validator combination function\n   *\n   * Accepts an array of validators and returns a single validator that\n   * evaluates to valid only if exactly one of the submitted validators\n   * is valid. Otherwise returns combined information from all validators,\n   * both valid and invalid.\n   *\n   * @param validators - array of validators to combine\n   * @return single combined validator function\n   */\n  static composeOneOf(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) {\n      return null\n    }\n    const presentValidators = validators.filter(isDefined)\n    if (presentValidators.length === 0) {\n      return null\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      const arrayOfErrors =\n        executeValidators(control, presentValidators)\n      const validControls =\n        validators.length - arrayOfErrors.filter(isDefined).length\n      const isValid = validControls === 1\n      if (xor(isValid, invert)) {\n        return null\n      }\n      const arrayOfValids =\n        executeValidators(control, presentValidators, invert)\n      return mergeObjects(...arrayOfErrors, ...arrayOfValids, {oneOf: !invert})\n    }\n  }\n\n  /**\n   * 'composeAllOf' validator combination function\n   *\n   * Accepts an array of validators and returns a single validator that\n   * evaluates to valid only if all the submitted validators are individually\n   * valid. Otherwise it returns combined errors from all invalid validators.\n   *\n   * @param validators - array of validators to combine\n   * @return single combined validator function\n   */\n  static composeAllOf(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) {\n      return null\n    }\n    const presentValidators = validators.filter(isDefined)\n    if (presentValidators.length === 0) {\n      return null\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      const combinedErrors = mergeErrors(\n        executeValidators(control, presentValidators, invert)\n      )\n      const isValid = combinedErrors === null\n      return (xor(isValid, invert)) ?\n        null : mergeObjects(combinedErrors, {allOf: !invert})\n    }\n  }\n\n  /**\n   * 'composeNot' validator inversion function\n   *\n   * Accepts a single validator function and inverts its result.\n   * Returns valid if the submitted validator is invalid, and\n   * returns invalid if the submitted validator is valid.\n   * (Note: this function can itself be inverted\n   *   - e.g. composeNot(composeNot(validator)) -\n   *   but this can be confusing and is therefore not recommended.)\n   *\n   * @param validator - validator(s) to invert\n   * @return new validator function that returns opposite result\n   */\n  static composeNot(validator: IValidatorFn): IValidatorFn {\n    if (!validator) {\n      return null\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null => {\n      if (isEmpty(control.value)) {\n        return null\n      }\n      const error = validator(control, !invert)\n      const isValid = error === null\n      return (xor(isValid, invert)) ?\n        null : mergeObjects(error, {not: !invert})\n    }\n  }\n\n  /**\n   * 'compose' validator combination function\n   *\n   * @param validators - array of validators to combine\n   * @return single combined validator function\n   */\n  static compose(validators: IValidatorFn[]): IValidatorFn {\n    if (!validators) {\n      return null\n    }\n    const presentValidators = validators.filter(isDefined)\n    if (presentValidators.length === 0) {\n      return null\n    }\n    return (control: AbstractControl, invert = false): ValidationErrors | null =>\n      mergeErrors(executeValidators(control, presentValidators, invert))\n  }\n\n  /**\n   * 'composeAsync' async validator combination function\n   *\n   * @param validators - array of async validators\n   * @return single combined async validator function\n   */\n  static composeAsync(validators: AsyncIValidatorFn[]): AsyncIValidatorFn {\n    if (!validators) {\n      return null\n    }\n    const presentValidators = validators.filter(isDefined)\n    if (presentValidators.length === 0) {\n      return null\n    }\n    return (control: AbstractControl) => {\n      const observables =\n        executeAsyncValidators(control, presentValidators).map(toObservable)\n      return map.call(forkJoin(observables), mergeErrors)\n    }\n  }\n\n  // Additional angular validators (not used by Angualr JSON Schema Form)\n  // From https://github.com/angular/angular/blob/master/packages/forms/src/validators.ts\n\n  /**\n   * Validator that requires controls to have a value greater than a number.\n   */\n  static min(min: number): ValidatorFn {\n    if (!hasValue(min)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl): ValidationErrors | null => {\n      // don't validate empty values to allow optional controls\n      if (isEmpty(control.value) || isEmpty(min)) {\n        return null\n      }\n      const value = parseFloat(control.value)\n      const actual = control.value\n      // Controls with NaN values after parsing should be treated as not having a\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n      return isNaN(value) || value >= min ? null : {min: {min, actual}}\n    }\n  }\n\n  /**\n   * Validator that requires controls to have a value less than a number.\n   */\n  static max(max: number): ValidatorFn {\n    if (!hasValue(max)) {\n      return JsonValidators.nullValidator\n    }\n    return (control: AbstractControl): ValidationErrors | null => {\n      // don't validate empty values to allow optional controls\n      if (isEmpty(control.value) || isEmpty(max)) {\n        return null\n      }\n      const value = parseFloat(control.value)\n      const actual = control.value\n      // Controls with NaN values after parsing should be treated as not having a\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n      return isNaN(value) || value <= max ? null : {max: {max, actual}}\n    }\n  }\n\n  /**\n   * Validator that requires control value to be true.\n   */\n  static requiredTrue(control: AbstractControl): ValidationErrors | null {\n    if (!control) {\n      return JsonValidators.nullValidator\n    }\n    return control.value === true ? null : {required: true}\n  }\n\n  /**\n   * Validator that performs email validation.\n   */\n  static email(control: AbstractControl): ValidationErrors | null {\n    if (!control) {\n      return JsonValidators.nullValidator\n    }\n    const EMAIL_REGEXP =\n      // tslint:disable-next-line max-line-length\n      /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/\n    return EMAIL_REGEXP.test(control.value) ? null : {email: true}\n  }\n}\n","import {isString} from '../validator'\nimport {JsonPointer} from '../jsonpointer.functions'\n\n/**\n * 'checkInlineType' function\n *\n * Checks layout and schema nodes for 'inline: true', and converts\n * 'radios' or 'checkboxes' to 'radios-inline' or 'checkboxes-inline'\n */\nexport function checkInlineType(\n  controlType: string,\n  schema: any,\n  layoutNode: any = null\n): string {\n  if (!isString(controlType) || (\n    controlType.slice(0, 8) !== 'checkbox' && controlType.slice(0, 5) !== 'radio'\n  )) {\n    return controlType\n  }\n  if (\n    JsonPointer.getFirst([\n      [layoutNode, '/inline'],\n      [layoutNode, '/options/inline'],\n      [schema, '/inline'],\n      [schema, '/x-schema-form/inline'],\n      [schema, '/x-schema-form/options/inline'],\n      [schema, '/x-schema-form/widget/inline'],\n      [schema, '/x-schema-form/widget/component/inline'],\n      [schema, '/x-schema-form/widget/component/options/inline'],\n      [schema, '/widget/inline'],\n      [schema, '/widget/component/inline'],\n      [schema, '/widget/component/options/inline'],\n    ]) === true\n  ) {\n    return controlType.slice(0, 5) === 'radio' ?\n      'radios-inline' : 'checkboxes-inline'\n  } else {\n    return controlType\n  }\n}\n","import {isArray, isEmpty, isNumber, isObject, isString} from '../validator'\nimport {commonItems, hasOwn, uniqueItems} from '../utility'\nimport * as _ from 'lodash'\n\n/**\n * 'mergeSchemas' function\n *\n * Merges multiple JSON schemas into a single schema with combined rules.\n *\n * If able to logically merge properties from all schemas,\n * returns a single schema object containing all merged properties.\n *\n * Example: ({ a: b, max: 1 }, { c: d, max: 2 }) => { a: b, c: d, max: 1 }\n *\n * If unable to logically merge, returns an allOf schema object containing\n * an array of the original schemas;\n *\n * Example: ({ a: b }, { a: d }) => { allOf: [ { a: b }, { a: d } ] }\n *\n * @param schemas - one or more input schemas\n * @return merged schema\n */\nexport function mergeSchemas(...schemas: any) {\n  schemas = schemas.filter(schema => !isEmpty(schema))\n  if (schemas.some(schema => !isObject(schema))) {\n    return null\n  }\n  const combinedSchema: any = {}\n  for (const schema of schemas) {\n    for (const key of Object.keys(schema)) {\n      const combinedValue = combinedSchema[key]\n      const schemaValue = schema[key]\n      if (!hasOwn(combinedSchema, key) || _.isEqual(combinedValue, schemaValue)) {\n        combinedSchema[key] = schemaValue\n      } else {\n        switch (key) {\n          case 'allOf':\n            // Combine all items from both arrays\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.allOf = mergeSchemas(...combinedValue, ...schemaValue)\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'additionalItems':\n          case 'additionalProperties':\n          case 'contains':\n          case 'propertyNames':\n            // Merge schema objects\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              combinedSchema[key] = mergeSchemas(combinedValue, schemaValue)\n              // additionalProperties == false in any schema overrides all other values\n            } else if (\n              key === 'additionalProperties' &&\n              (combinedValue === false || schemaValue === false)\n            ) {\n              combinedSchema.combinedSchema = false\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'anyOf':\n          case 'oneOf':\n          case 'enum':\n            // Keep only items that appear in both arrays\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema[key] = combinedValue.filter(item1 =>\n                schemaValue.findIndex(item2 => _.isEqual(item1, item2)) > -1\n              )\n              if (!combinedSchema[key].length) {\n                return {allOf: [...schemas]}\n              }\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'definitions':\n            // Combine keys from both objects\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = {...combinedValue}\n              for (const subKey of Object.keys(schemaValue)) {\n                if (!hasOwn(combinedObject, subKey) ||\n                  _.isEqual(combinedObject[subKey], schemaValue[subKey])\n                ) {\n                  combinedObject[subKey] = schemaValue[subKey]\n                  // Don't combine matching keys with different values\n                } else {\n                  return {allOf: [...schemas]}\n                }\n              }\n              combinedSchema.definitions = combinedObject\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'dependencies':\n            // Combine all keys from both objects\n            // and merge schemas on matching keys,\n            // converting from arrays to objects if necessary\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = {...combinedValue}\n              for (const subKey of Object.keys(schemaValue)) {\n                if (!hasOwn(combinedObject, subKey) ||\n                  _.isEqual(combinedObject[subKey], schemaValue[subKey])\n                ) {\n                  combinedObject[subKey] = schemaValue[subKey]\n                  // If both keys are arrays, include all items from both arrays,\n                  // excluding duplicates\n                } else if (\n                  isArray(schemaValue[subKey]) && isArray(combinedObject[subKey])\n                ) {\n                  combinedObject[subKey] =\n                    uniqueItems(...combinedObject[subKey], ...schemaValue[subKey])\n                  // If either key is an object, merge the schemas\n                } else if (\n                  (isArray(schemaValue[subKey]) || isObject(schemaValue[subKey])) &&\n                  (isArray(combinedObject[subKey]) || isObject(combinedObject[subKey]))\n                ) {\n                  // If either key is an array, convert it to an object first\n                  const required = isArray(combinedSchema.required) ?\n                    combinedSchema.required : []\n                  const combinedDependency = isArray(combinedObject[subKey]) ?\n                    {required: uniqueItems(...required, combinedObject[subKey])} :\n                    combinedObject[subKey]\n                  const schemaDependency = isArray(schemaValue[subKey]) ?\n                    {required: uniqueItems(...required, schemaValue[subKey])} :\n                    schemaValue[subKey]\n                  combinedObject[subKey] =\n                    mergeSchemas(combinedDependency, schemaDependency)\n                } else {\n                  return {allOf: [...schemas]}\n                }\n              }\n              combinedSchema.dependencies = combinedObject\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'items':\n            // If arrays, keep only items that appear in both arrays\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.items = combinedValue.filter(item1 =>\n                schemaValue.findIndex(item2 => _.isEqual(item1, item2)) > -1\n              )\n              if (!combinedSchema.items.length) {\n                return {allOf: [...schemas]}\n              }\n              // If both keys are objects, merge them\n            } else if (isObject(combinedValue) && isObject(schemaValue)) {\n              combinedSchema.items = mergeSchemas(combinedValue, schemaValue)\n              // If object + array, combine object with each array item\n            } else if (isArray(combinedValue) && isObject(schemaValue)) {\n              combinedSchema.items =\n                combinedValue.map(item => mergeSchemas(item, schemaValue))\n            } else if (isObject(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.items =\n                schemaValue.map(item => mergeSchemas(item, combinedValue))\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'multipleOf':\n            // TODO: Adjust to correctly handle decimal values\n            // If numbers, set to least common multiple\n            if (isNumber(combinedValue) && isNumber(schemaValue)) {\n              const gcd = (x, y) => !y ? x : gcd(y, x % y)\n              const lcm = (x, y) => (x * y) / gcd(x, y)\n              combinedSchema.multipleOf = lcm(combinedValue, schemaValue)\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'maximum':\n          case 'exclusiveMaximum':\n          case 'maxLength':\n          case 'maxItems':\n          case 'maxProperties':\n            // If numbers, set to lowest value\n            if (isNumber(combinedValue) && isNumber(schemaValue)) {\n              combinedSchema[key] = Math.min(combinedValue, schemaValue)\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'minimum':\n          case 'exclusiveMinimum':\n          case 'minLength':\n          case 'minItems':\n          case 'minProperties':\n            // If numbers, set to highest value\n            if (isNumber(combinedValue) && isNumber(schemaValue)) {\n              combinedSchema[key] = Math.max(combinedValue, schemaValue)\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'not':\n            // Combine not values into anyOf array\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const notAnyOf = [combinedValue, schemaValue]\n                .reduce((notAnyOfArray, notSchema) =>\n                    isArray(notSchema.anyOf) &&\n                    Object.keys(notSchema).length === 1 ?\n                      [...notAnyOfArray, ...notSchema.anyOf] :\n                      [...notAnyOfArray, notSchema]\n                  , [])\n              // TODO: Remove duplicate items from array\n              combinedSchema.not = {anyOf: notAnyOf}\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'patternProperties':\n            // Combine all keys from both objects\n            // and merge schemas on matching keys\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = {...combinedValue}\n              for (const subKey of Object.keys(schemaValue)) {\n                if (!hasOwn(combinedObject, subKey) ||\n                  _.isEqual(combinedObject[subKey], schemaValue[subKey])\n                ) {\n                  combinedObject[subKey] = schemaValue[subKey]\n                  // If both keys are objects, merge them\n                } else if (\n                  isObject(schemaValue[subKey]) && isObject(combinedObject[subKey])\n                ) {\n                  combinedObject[subKey] =\n                    mergeSchemas(combinedObject[subKey], schemaValue[subKey])\n                } else {\n                  return {allOf: [...schemas]}\n                }\n              }\n              combinedSchema.patternProperties = combinedObject\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'properties':\n            // Combine all keys from both objects\n            // unless additionalProperties === false\n            // and merge schemas on matching keys\n            if (isObject(combinedValue) && isObject(schemaValue)) {\n              const combinedObject = {...combinedValue}\n              // If new schema has additionalProperties,\n              // merge or remove non-matching property keys in combined schema\n              if (hasOwn(schemaValue, 'additionalProperties')) {\n                Object.keys(combinedValue)\n                  .filter(combinedKey => !Object.keys(schemaValue).includes(combinedKey))\n                  .forEach(nonMatchingKey => {\n                    if (schemaValue.additionalProperties === false) {\n                      delete combinedObject[nonMatchingKey]\n                    } else if (isObject(schemaValue.additionalProperties)) {\n                      combinedObject[nonMatchingKey] = mergeSchemas(\n                        combinedObject[nonMatchingKey],\n                        schemaValue.additionalProperties\n                      )\n                    }\n                  })\n              }\n              for (const subKey of Object.keys(schemaValue)) {\n                if (_.isEqual(combinedObject[subKey], schemaValue[subKey]) || (\n                  !hasOwn(combinedObject, subKey) &&\n                  !hasOwn(combinedObject, 'additionalProperties')\n                )) {\n                  combinedObject[subKey] = schemaValue[subKey]\n                  // If combined schema has additionalProperties,\n                  // merge or ignore non-matching property keys in new schema\n                } else if (\n                  !hasOwn(combinedObject, subKey) &&\n                  hasOwn(combinedObject, 'additionalProperties')\n                ) {\n                  // If combinedObject.additionalProperties === false,\n                  // do nothing (don't set key)\n                  // If additionalProperties is object, merge with new key\n                  if (isObject(combinedObject.additionalProperties)) {\n                    combinedObject[subKey] = mergeSchemas(\n                      combinedObject.additionalProperties, schemaValue[subKey]\n                    )\n                  }\n                  // If both keys are objects, merge them\n                } else if (\n                  isObject(schemaValue[subKey]) &&\n                  isObject(combinedObject[subKey])\n                ) {\n                  combinedObject[subKey] =\n                    mergeSchemas(combinedObject[subKey], schemaValue[subKey])\n                } else {\n                  return {allOf: [...schemas]}\n                }\n              }\n              combinedSchema.properties = combinedObject\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'required':\n            // If arrays, include all items from both arrays, excluding duplicates\n            if (isArray(combinedValue) && isArray(schemaValue)) {\n              combinedSchema.required = uniqueItems(...combinedValue, ...schemaValue)\n              // If booleans, aet true if either true\n            } else if (\n              typeof schemaValue === 'boolean' &&\n              typeof combinedValue === 'boolean'\n            ) {\n              combinedSchema.required = !!combinedValue || !!schemaValue\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case '$schema':\n          case '$id':\n          case 'id':\n            // Don't combine these keys\n            break\n          case 'title':\n          case 'description':\n            // Return the last value, overwriting any previous one\n            // These properties are not used for validation, so conflicts don't matter\n            combinedSchema[key] = schemaValue\n            break\n          case 'type':\n            if (\n              (isArray(schemaValue) || isString(schemaValue)) &&\n              (isArray(combinedValue) || isString(combinedValue))\n            ) {\n              const combinedTypes = commonItems(combinedValue, schemaValue)\n              if (!combinedTypes.length) {\n                return {allOf: [...schemas]}\n              }\n              combinedSchema.type = combinedTypes.length > 1 ? combinedTypes : combinedTypes[0]\n            } else {\n              return {allOf: [...schemas]}\n            }\n            break\n          case 'uniqueItems':\n            // Set true if either true\n            combinedSchema.uniqueItems = !!combinedValue || !!schemaValue\n            break\n          default:\n            return {allOf: [...schemas]}\n        }\n      }\n    }\n  }\n  return combinedSchema\n}\n","import {isArray, isObject} from '../validator'\nimport {mergeSchemas} from '../merge-schemas'\n\n/**\n * 'combineAllOf' function\n *\n * Attempt to convert an allOf schema object into\n * a non-allOf schema object with equivalent rules.\n *\n * @param  schema - allOf schema object\n * @return converted schema object\n */\nexport function combineAllOf(schema: any) {\n  if (!isObject(schema) || !isArray(schema.allOf)) {\n    return schema\n  }\n  let mergedSchema = mergeSchemas(...schema.allOf)\n  if (Object.keys(schema).length > 1) {\n    const extraKeys = {...schema}\n    delete extraKeys.allOf\n    mergedSchema = mergeSchemas(mergedSchema, extraKeys)\n  }\n  return mergedSchema\n}\n","import {isArray} from '../validator'\nimport {hasOwn} from '../utility'\nimport * as _ from 'lodash'\n\n/**\n * 'fixRequiredArrayProperties' function\n *\n * Fixes an incorrectly placed required list inside an array schema, by moving\n * it into items.properties or additionalItems.properties, where it belongs.\n *\n * @param  schema - allOf schema object\n * @return converted schema object\n */\nexport function fixRequiredArrayProperties(schema: any) {\n  if (schema.type === 'array' && isArray(schema.required)) {\n    const itemsObject = hasOwn(schema.items, 'properties') ? 'items' :\n      hasOwn(schema.additionalItems, 'properties') ? 'additionalItems' : null\n    if (itemsObject && !hasOwn(schema[itemsObject], 'required') && (\n      hasOwn(schema[itemsObject], 'additionalProperties') ||\n      schema.required.every(key => hasOwn(schema[itemsObject].properties, key))\n    )) {\n      schema = _.cloneDeep(schema)\n      schema[itemsObject].required = schema.required\n      delete schema.required\n    }\n  }\n  return schema\n}\n","import {isObject} from '../validator'\nimport {forEach, hasOwn} from '../utility'\n\n/**\n * 'getControlValidators' function\n */\nexport function getControlValidators(schema: any) {\n  if (!isObject(schema)) {\n    return null\n  }\n  const validators: any = {}\n  if (hasOwn(schema, 'type')) {\n    switch (schema.type) {\n      case 'string':\n        forEach(['pattern', 'format', 'minLength', 'maxLength'], (prop) => {\n          if (hasOwn(schema, prop)) {\n            validators[prop] = [schema[prop]]\n          }\n        })\n        break\n      case 'number':\n      case 'integer':\n        forEach(['Minimum', 'Maximum'], (ucLimit) => {\n          const eLimit = 'exclusive' + ucLimit\n          const limit = ucLimit.toLowerCase()\n          if (hasOwn(schema, limit)) {\n            const exclusive = hasOwn(schema, eLimit) && schema[eLimit] === true\n            validators[limit] = [schema[limit], exclusive]\n          }\n        })\n        forEach(['multipleOf', 'type'], (prop) => {\n          if (hasOwn(schema, prop)) {\n            validators[prop] = [schema[prop]]\n          }\n        })\n        break\n      case 'object':\n        forEach(['minProperties', 'maxProperties', 'dependencies'], (prop) => {\n          if (hasOwn(schema, prop)) {\n            validators[prop] = [schema[prop]]\n          }\n        })\n        break\n      case 'array':\n        forEach(['minItems', 'maxItems', 'uniqueItems'], (prop) => {\n          if (hasOwn(schema, prop)) {\n            validators[prop] = [schema[prop]]\n          }\n        })\n        break\n    }\n  }\n  if (hasOwn(schema, 'enum')) {\n    validators.enum = [schema.enum]\n  }\n  return validators\n}\n","import {JsonPointer, Pointer} from '../jsonpointer.functions'\nimport {hasOwn} from '../utility'\nimport {isArray, isObject} from '../validator'\n\n/**\n * 'getFromSchema' function\n *\n * Uses a JSON Pointer for a value within a data object to retrieve\n * the schema for that value within schema for the data object.\n *\n * The optional third parameter can also be set to return something else:\n * 'schema' (default): the schema for the value indicated by the data pointer\n * 'parentSchema': the schema for the value's parent object or array\n * 'schemaPointer': a pointer to the value's schema within the object's schema\n * 'parentSchemaPointer': a pointer to the schema for the value's parent object or array\n *\n * @param  schema - The schema to get the sub-schema from\n * @param  dataPointer - JSON Pointer (string or array)\n * @param  returnType - what to return?\n * @return The located sub-schema\n */\nexport function getFromSchema(\n  schema: any,\n  dataPointer: Pointer,\n  returnType = 'schema'\n) {\n  const dataPointerArray: any[] = JsonPointer.parse(dataPointer)\n  if (dataPointerArray === null) {\n    console.error(`getFromSchema error: Invalid JSON Pointer: ${dataPointer}`)\n    return null\n  }\n  let subSchema = schema\n  const schemaPointer = []\n  const length = dataPointerArray.length\n  if (returnType.slice(0, 6) === 'parent') {\n    dataPointerArray.length--\n  }\n  for (let i = 0; i < length; ++i) {\n    const parentSchema = subSchema\n    const key = dataPointerArray[i]\n    let subSchemaFound = false\n    if (typeof subSchema !== 'object') {\n      console.error(`getFromSchema error: Unable to find \"${key}\" key in schema.`)\n      console.error(schema)\n      console.error(dataPointer)\n      return null\n    }\n    if (subSchema.type === 'array' && (!isNaN(key) || key === '-')) {\n      if (hasOwn(subSchema, 'items')) {\n        if (isObject(subSchema.items)) {\n          subSchemaFound = true\n          subSchema = subSchema.items\n          schemaPointer.push('items')\n        } else if (isArray(subSchema.items)) {\n          if (!isNaN(key) && subSchema.items.length >= +key) {\n            subSchemaFound = true\n            subSchema = subSchema.items[+key]\n            schemaPointer.push('items', key)\n          }\n        }\n      }\n      if (!subSchemaFound && isObject(subSchema.additionalItems)) {\n        subSchemaFound = true\n        subSchema = subSchema.additionalItems\n        schemaPointer.push('additionalItems')\n      } else if (subSchema.additionalItems !== false) {\n        subSchemaFound = true\n        subSchema = {}\n        schemaPointer.push('additionalItems')\n      }\n    } else if (subSchema.type === 'object') {\n      if (isObject(subSchema.properties) && hasOwn(subSchema.properties, key)) {\n        subSchemaFound = true\n        subSchema = subSchema.properties[key]\n        schemaPointer.push('properties', key)\n      } else if (isObject(subSchema.additionalProperties)) {\n        subSchemaFound = true\n        subSchema = subSchema.additionalProperties\n        schemaPointer.push('additionalProperties')\n      } else if (subSchema.additionalProperties !== false) {\n        subSchemaFound = true\n        subSchema = {}\n        schemaPointer.push('additionalProperties')\n      }\n    }\n    if (!subSchemaFound) {\n      console.error(`getFromSchema error: Unable to find \"${key}\" item in schema.`)\n      console.error(schema)\n      console.error(dataPointer)\n      return\n    }\n  }\n  return returnType.slice(-7) === 'Pointer' ? schemaPointer : subSchema\n}\n","import {isArray} from '../validator'\nimport {hasOwn} from '../utility'\n\n/**\n * 'getTitleMapFromOneOf' function\n */\nexport function getTitleMapFromOneOf(\n  schema: any = {},\n  flatList: boolean = null,\n  validateOnly = false\n) {\n  let titleMap = null\n  const oneOf = schema.oneOf || schema.anyOf || null\n  if (isArray(oneOf) && oneOf.every(item => item.title)) {\n    if (oneOf.every(item => isArray(item.enum) && item.enum.length === 1)) {\n      if (validateOnly) {\n        return true\n      }\n      titleMap = oneOf.map(item => ({name: item.title, value: item.enum[0]}))\n    } else if (oneOf.every(item => item.const)) {\n      if (validateOnly) {\n        return true\n      }\n      titleMap = oneOf.map(item => ({name: item.title, value: item.const}))\n    }\n\n    // if flatList !== false and some items have colons, make grouped map\n    if (flatList !== false && (titleMap || [])\n      .filter(title => ((title || {}).name || '').indexOf(': ')).length > 1\n    ) {\n\n      // Split name on first colon to create grouped map (name -> group: name)\n      const newTitleMap = titleMap.map(title => {\n        const [group, name] = title.name.split(/: (.+)/)\n        return group && name ? {...title, group, name} : title\n      })\n\n      // If flatList === true or at least one group has multiple items, use grouped map\n      if (flatList === true || newTitleMap.some((title, index) => index &&\n        hasOwn(title, 'group') && title.group === newTitleMap[index - 1].group\n      )) {\n        titleMap = newTitleMap\n      }\n    }\n  }\n  return validateOnly ? false : titleMap\n}\n","import {JsonPointer} from '../jsonpointer.functions'\nimport {inArray, isArray, isString} from '../validator'\nimport {hasOwn} from '../utility'\nimport {checkInlineType} from './checkInlineType'\nimport {getTitleMapFromOneOf} from './getTitleMapFromOneOf'\n\n/**\n * 'getInputType' function\n */\nexport function getInputType(\n  schema: any,\n  layoutNode: any = null\n): string {\n  // x-schema-form = Angular Schema Form compatibility\n  // widget & component = React Jsonschema Form compatibility\n  const controlType = JsonPointer.getFirst([\n    [schema, '/x-schema-form/type'],\n    [schema, '/x-schema-form/widget/component'],\n    [schema, '/x-schema-form/widget'],\n    [schema, '/widget/component'],\n    [schema, '/widget']\n  ])\n  if (isString(controlType)) {\n    return checkInlineType(controlType, schema, layoutNode)\n  }\n  let schemaType = schema.type\n  if (schemaType) {\n    if (isArray(schemaType)) { // If multiple types listed, use most inclusive type\n      schemaType =\n        inArray('object', schemaType) && hasOwn(schema, 'properties') ? 'object' :\n          inArray('array', schemaType) && hasOwn(schema, 'items') ? 'array' :\n            inArray('array', schemaType) && hasOwn(schema, 'additionalItems') ? 'array' :\n              inArray('string', schemaType) ? 'string' :\n                inArray('number', schemaType) ? 'number' :\n                  inArray('integer', schemaType) ? 'integer' :\n                    inArray('boolean', schemaType) ? 'boolean' : 'unknown'\n    }\n    if (schemaType === 'boolean') {\n      return 'checkbox'\n    }\n    if (schemaType === 'object') {\n      if (hasOwn(schema, 'properties') || hasOwn(schema, 'additionalProperties')) {\n        return 'section'\n      }\n      // TODO: Figure out how to handle additionalProperties\n      if (hasOwn(schema, '$ref')) {\n        return '$ref'\n      }\n    }\n    if (schemaType === 'array') {\n      const itemsObject = JsonPointer.getFirst([\n        [schema, '/items'],\n        [schema, '/additionalItems']\n      ]) || {}\n      return hasOwn(itemsObject, 'enum') && schema.maxItems !== 1 ?\n        checkInlineType('checkboxes', schema, layoutNode) : 'array'\n    }\n    if (schemaType === 'null') {\n      return 'none'\n    }\n    if (JsonPointer.has(layoutNode, '/options/titleMap') ||\n      hasOwn(schema, 'enum') || getTitleMapFromOneOf(schema, null, true)\n    ) {\n      return 'select'\n    }\n    if (schemaType === 'number' || schemaType === 'integer') {\n      return (schemaType === 'integer' || hasOwn(schema, 'multipleOf')) &&\n      hasOwn(schema, 'maximum') && hasOwn(schema, 'minimum') ? 'range' : schemaType\n    }\n    if (schemaType === 'string') {\n      return {\n        color: 'color',\n        date: 'date',\n        'date-time': 'datetime-local',\n        email: 'email',\n        uri: 'url',\n      }[schema.format] || 'text'\n    }\n  }\n  if (hasOwn(schema, '$ref')) {\n    return '$ref'\n  }\n  if (isArray(schema.oneOf) || isArray(schema.anyOf)) {\n    return 'one-of'\n  }\n  console.error(`getInputType error: Unable to determine input type for ${schemaType}`)\n  console.error('schema', schema)\n  if (layoutNode) {\n    console.error('layoutNode', layoutNode)\n  }\n  return 'none'\n}\n","import {JsonPointer, Pointer} from '../jsonpointer.functions'\n\n/**\n * 'removeRecursiveReferences' function\n *\n * Checks a JSON Pointer against a map of recursive references and returns\n * a JSON Pointer to the shallowest equivalent location in the same object.\n *\n * Using this functions enables an object to be constructed with unlimited\n * recursion, while maintaing a fixed set of metadata, such as field data types.\n * The object can grow as large as it wants, and deeply recursed nodes can\n * just refer to the metadata for their shallow equivalents, instead of having\n * to add additional redundant metadata for each recursively added node.\n *\n * Example:\n *\n * pointer:         '/stuff/and/more/and/more/and/more/and/more/stuff'\n * recursiveRefMap: [['/stuff/and/more/and/more', '/stuff/and/more/']]\n * returned:        '/stuff/and/more/stuff'\n */\nexport function removeRecursiveReferences(\n  pointer: Pointer,\n  recursiveRefMap: Map<string, string>,\n  arrayMap:Map<string, number> = new Map()\n): string {\n  if (!pointer) {\n    return ''\n  }\n  let genericPointer =\n    JsonPointer.toGenericPointer(JsonPointer.compile(pointer), arrayMap)\n  if (genericPointer.indexOf('/') === -1) {\n    return genericPointer\n  }\n  let possibleReferences = true\n  while (possibleReferences) {\n    possibleReferences = false\n    recursiveRefMap.forEach((toPointer, fromPointer) => {\n      if (JsonPointer.isSubPointer(toPointer, fromPointer)) {\n        while (JsonPointer.isSubPointer(fromPointer, genericPointer, true)) {\n          genericPointer = JsonPointer.toGenericPointer(\n            toPointer + genericPointer.slice(fromPointer.length), arrayMap\n          )\n          possibleReferences = true\n        }\n      }\n    })\n  }\n  return genericPointer\n}\n","import {JsonPointer, Pointer} from '../jsonpointer.functions'\nimport {isArray, isObject, isString} from '../validator'\nimport {mergeSchemas} from '../merge-schemas'\nimport {combineAllOf} from './combineAllOf'\nimport {fixRequiredArrayProperties} from './fixRequiredArrayProperties'\nimport {removeRecursiveReferences} from './removeRecursiveReferences'\nimport * as _ from 'lodash'\n\n/**\n * 'getSubSchema' function\n */\nexport function getSubSchema(\n  schema: any,\n  pointerArg: Pointer | string,\n  schemaRefLibrary: object = null,\n  schemaRecursiveRefMap: Map<string, string> = null,\n  usedPointers: string[] = []\n) {\n  if (!schemaRefLibrary || !schemaRecursiveRefMap) {\n    return JsonPointer.getCopy(schema, pointerArg)\n  }\n  const pointer: string = typeof pointerArg !== 'string' ? JsonPointer.compile(pointerArg) : pointerArg\n\n  usedPointers = [...usedPointers, pointer]\n  let newSchema: any = null\n  if (pointer === '') {\n    newSchema = _.cloneDeep(schema)\n  } else {\n    const shortPointer = removeRecursiveReferences(pointer, schemaRecursiveRefMap)\n    if (shortPointer !== pointer) {\n      usedPointers = [...usedPointers, shortPointer]\n    }\n    newSchema = JsonPointer.getFirstCopy([\n      [schemaRefLibrary, [shortPointer]],\n      [schema, pointer],\n      [schema, shortPointer]\n    ])\n  }\n  return JsonPointer.forEachDeepCopy(newSchema, (subSchema, subPointer) => {\n    if (isObject(subSchema)) {\n      // Replace non-recursive $ref links with referenced schemas\n      if (isString(subSchema.$ref)) {\n        const refPointer = JsonPointer.compile(subSchema.$ref)\n        if (refPointer.length && usedPointers.every(ptr =>\n          !JsonPointer.isSubPointer(refPointer, ptr, true)\n        )) {\n          const refSchema = getSubSchema(\n            schema, refPointer, schemaRefLibrary, schemaRecursiveRefMap, usedPointers\n          )\n          if (Object.keys(subSchema).length === 1) {\n            return refSchema\n          } else {\n            const extraKeys = {...subSchema}\n            delete extraKeys.$ref\n            return mergeSchemas(refSchema, extraKeys)\n          }\n        }\n      }\n\n      // TODO: Convert schemas with 'type' arrays to 'oneOf'\n\n      // Combine allOf subSchemas\n      if (isArray(subSchema.allOf)) {\n        return combineAllOf(subSchema)\n      }\n\n      // Fix incorrectly placed array object required lists\n      if (subSchema.type === 'array' && isArray(subSchema.required)) {\n        return fixRequiredArrayProperties(subSchema)\n      }\n    }\n    return subSchema\n  }, true, pointer)\n}\n","import {isArray, isNumber, isObject} from '../validator'\nimport {JsonPointer} from '../jsonpointer.functions'\nimport {hasOwn} from '../utility'\n\n/**\n * 'isInputRequired' function\n *\n * Checks a JSON Schema to see if an item is required\n *\n * @param schema - the schema to check\n * @param schemaPointer - the pointer to the item to check\n * @return true if the item is required, false if not\n */\nexport function isInputRequired(\n  schema: any,\n  schemaPointer: string\n): boolean {\n  if (!isObject(schema)) {\n    console.error('isInputRequired error: Input schema must be an object.')\n    return false\n  }\n  const listPointerArray = JsonPointer.parse(schemaPointer)\n  if (isArray(listPointerArray)) {\n    if (!listPointerArray.length) {\n      return schema.required === true\n    }\n    const keyName = listPointerArray.pop()\n    const nextToLastKey = listPointerArray[listPointerArray.length - 1]\n    if (['properties', 'additionalProperties', 'patternProperties', 'items', 'additionalItems']\n      .includes(nextToLastKey)\n    ) {\n      listPointerArray.pop()\n    }\n    const parentSchema = JsonPointer.get(schema, listPointerArray) || {}\n    if (isArray(parentSchema.required)) {\n      return parentSchema.required.includes(keyName)\n    }\n    if (parentSchema.type === 'array') {\n      return hasOwn(parentSchema, 'minItems') &&\n        isNumber(keyName) &&\n        +parentSchema.minItems > +keyName\n    }\n  }\n  return false\n}\n","import {hasValue, isObject} from '../validator'\nimport {hasOwn, mergeFilteredObject} from '../utility'\nimport {JsonPointer} from '../jsonpointer.functions'\nimport {getTitleMapFromOneOf} from './getTitleMapFromOneOf'\n\n/**\n * 'updateInputOptions' function\n */\nexport function updateInputOptions(\n  layoutNode: any,\n  schema: any,\n  jsf: any\n): void {\n  if (!isObject(layoutNode) || !isObject(layoutNode.options)) {\n    return\n  }\n\n  // Set all option values in layoutNode.options\n  const newOptions: any = {}\n  const fixUiKeys = key => key.slice(0, 3).toLowerCase() === 'ui:' ? key.slice(3) : key\n  mergeFilteredObject(newOptions, jsf.formOptions.defautWidgetOptions, [], fixUiKeys);\n  [[JsonPointer.get(schema, '/ui:widget/options'), []],\n    [JsonPointer.get(schema, '/ui:widget'), []],\n    [schema, [\n      'additionalProperties', 'additionalItems', 'properties', 'items',\n      'required', 'type', 'x-schema-form', '$ref'\n    ]],\n    [JsonPointer.get(schema, '/x-schema-form/options'), []],\n    [JsonPointer.get(schema, '/x-schema-form'), ['items', 'options']],\n    [layoutNode, [\n      '_id', '$ref', 'arrayItem', 'arrayItemType', 'dataPointer', 'dataType',\n      'items', 'key', 'name', 'options', 'recursiveReference', 'type', 'widget'\n    ]],\n    [layoutNode.options, []],\n  ].forEach(([object, excludeKeys]) =>\n    mergeFilteredObject(newOptions, object, excludeKeys, fixUiKeys)\n  )\n  if (!hasOwn(newOptions, 'titleMap')) {\n    let newTitleMap: any = null\n    newTitleMap = getTitleMapFromOneOf(schema, newOptions.flatList)\n    if (newTitleMap) {\n      newOptions.titleMap = newTitleMap\n    }\n    if (!hasOwn(newOptions, 'titleMap') && !hasOwn(newOptions, 'enum') && hasOwn(schema, 'items')) {\n      if (JsonPointer.has(schema, '/items/titleMap')) {\n        newOptions.titleMap = schema.items.titleMap\n      } else if (JsonPointer.has(schema, '/items/enum')) {\n        newOptions.enum = schema.items.enum\n        if (!hasOwn(newOptions, 'enumNames') && JsonPointer.has(schema, '/items/enumNames')) {\n          newOptions.enumNames = schema.items.enumNames\n        }\n      } else if (JsonPointer.has(schema, '/items/oneOf')) {\n        newTitleMap = getTitleMapFromOneOf(schema.items, newOptions.flatList)\n        if (newTitleMap) {\n          newOptions.titleMap = newTitleMap\n        }\n      }\n    }\n  }\n\n  // If schema type is integer, enforce by setting multipleOf = 1\n  if (schema.type === 'integer' && !hasValue(newOptions.multipleOf)) {\n    newOptions.multipleOf = 1\n  }\n\n  // Copy any typeahead word lists to options.typeahead.source\n  if (JsonPointer.has(newOptions, '/autocomplete/source')) {\n    newOptions.typeahead = newOptions.autocomplete\n  } else if (JsonPointer.has(newOptions, '/tagsinput/source')) {\n    newOptions.typeahead = newOptions.tagsinput\n  } else if (JsonPointer.has(newOptions, '/tagsinput/typeahead/source')) {\n    newOptions.typeahead = newOptions.tagsinput.typeahead\n  }\n\n  layoutNode.options = newOptions\n}\n","import {forEach, hasOwn} from '../utility'\nimport {isArray, isEmpty} from '../validator'\nimport {JsonPointer} from '../jsonpointer.functions'\n\n/**\n * 'setRequiredFields' function\n *\n * @param schema - JSON Schema\n * @param formControlTemplate - Form Control Template object\n * @return true if any fields have been set to required, false if not\n */\nexport function setRequiredFields(\n  schema: any,\n  formControlTemplate: any\n): boolean {\n  let fieldsRequired = false\n  if (hasOwn(schema, 'required') && !isEmpty(schema.required)) {\n    fieldsRequired = true\n    let requiredArray = isArray(schema.required) ? schema.required : [schema.required]\n    requiredArray = forEach(requiredArray,\n      key => JsonPointer.set(formControlTemplate, '/' + key + '/validators/required', [])\n    )\n  }\n  return fieldsRequired\n\n  // TODO: Add support for patternProperties\n  // https://spacetelescope.github.io/understanding-json-schema/reference/object.html#pattern-properties\n}\n","import {JsonPointer} from '../jsonpointer.functions'\nimport {fixTitle, hasOwn} from '../utility'\nimport {getInputType, isInputRequired, removeRecursiveReferences, updateInputOptions} from '../json-schema'\nimport {isArray, isDefined, isEmpty, isNumber, isObject} from '../validator'\nimport * as _ from 'lodash'\n/**\n * 'getLayoutNode' function\n * Copy a new layoutNode from layoutRefLibrary\n */\nexport function getLayoutNode(\n  refNode: any,\n  jsf: any,\n  widgetLibrary: any = null,\n  nodeValue: any = null\n) {\n\n  // If recursive reference and building initial layout, return Add button\n  if (refNode.recursiveReference && widgetLibrary) {\n    const newLayoutNode = _.cloneDeep(refNode)\n    if (!newLayoutNode.options) {\n      newLayoutNode.options = {}\n    }\n    Object.assign(newLayoutNode, {\n      recursiveReference: true,\n      widget: widgetLibrary.getWidget('$ref'),\n    })\n    Object.assign(newLayoutNode.options, {\n      removable: false,\n      title: 'Add ' + newLayoutNode.$ref,\n    })\n    return newLayoutNode\n\n    // Otherwise, return referenced layout\n  } else {\n    let newLayoutNode = jsf.layoutRefLibrary[refNode.$ref]\n    // If value defined, build new node from schema (to set array lengths)\n    if (isDefined(nodeValue)) {\n      newLayoutNode = buildLayoutFromSchema(\n        jsf, widgetLibrary, nodeValue,\n        JsonPointer.toSchemaPointer(refNode.$ref, jsf.schema) as any,\n        refNode.$ref, newLayoutNode.arrayItem,\n        newLayoutNode.arrayItemType, newLayoutNode.options.removable, false\n      )\n    } else {\n      // If value not defined, copy node from layoutRefLibrary\n      newLayoutNode = _.cloneDeep(newLayoutNode)\n      JsonPointer.forEachDeep(newLayoutNode, (subNode, pointer) => {\n\n        // Reset all _id's in newLayoutNode to unique values\n        if (hasOwn(subNode, '_id')) {\n          subNode._id = _.uniqueId()\n        }\n\n        // If adding a recursive item, prefix current dataPointer\n        // to all dataPointers in new layoutNode\n        if (refNode.recursiveReference && hasOwn(subNode, 'dataPointer')) {\n          subNode.dataPointer = refNode.dataPointer + subNode.dataPointer\n        }\n      })\n    }\n    return newLayoutNode\n  }\n}\n/**\n * 'buildLayoutFromSchema' function\n */\nexport function buildLayoutFromSchema(\n  jsf: any,\n  widgetLibrary: any,\n  nodeValue: any = null,\n  schemaPointer: string = '',\n  dataPointer: string = '',\n  arrayItem: boolean = false,\n  arrayItemType: string = null,\n  removable: boolean = null,\n  forRefLibrary: boolean = false,\n  dataPointerPrefix: string = ''\n) {\n  const schema = JsonPointer.get(jsf.schema, schemaPointer)\n  if (!hasOwn(schema, 'type') && !hasOwn(schema, '$ref') &&\n    !hasOwn(schema, 'x-schema-form')\n  ) {\n    return null\n  }\n  const newNodeType: string = getInputType(schema)\n  if (!isDefined(nodeValue) && (\n    jsf.formOptions.setSchemaDefaults === true ||\n    (jsf.formOptions.setSchemaDefaults === 'auto' && isEmpty(jsf.formValues))\n  )) {\n    nodeValue = JsonPointer.get(jsf.schema, schemaPointer + '/default')\n  }\n  let newNode: any = {\n    _id: forRefLibrary ? null : _.uniqueId(),\n    arrayItem,\n    dataPointer: JsonPointer.toGenericPointer(dataPointer, jsf.arrayMap),\n    dataType: schema.type || (hasOwn(schema, '$ref') ? '$ref' : null),\n    options: {},\n    required: isInputRequired(jsf.schema, schemaPointer),\n    type: newNodeType,\n    widget: widgetLibrary.getWidget(newNodeType),\n  }\n  const lastDataKey = JsonPointer.toKey(newNode.dataPointer)\n  if (lastDataKey !== '-') {\n    newNode.name = lastDataKey\n  }\n  if (newNode.arrayItem) {\n    newNode.arrayItemType = arrayItemType\n    newNode.options.removable = removable !== false\n  }\n  const shortDataPointer = removeRecursiveReferences(\n    dataPointerPrefix + dataPointer, jsf.dataRecursiveRefMap, jsf.arrayMap\n  )\n  const recursive = !shortDataPointer.length ||\n    shortDataPointer !== dataPointerPrefix + dataPointer\n  if (!jsf.dataMap.has(shortDataPointer)) {\n    jsf.dataMap.set(shortDataPointer, new Map())\n  }\n  const nodeDataMap = jsf.dataMap.get(shortDataPointer)\n  if (!nodeDataMap.has('inputType')) {\n    nodeDataMap.set('schemaPointer', schemaPointer)\n    nodeDataMap.set('inputType', newNode.type)\n    nodeDataMap.set('widget', newNode.widget)\n    nodeDataMap.set('disabled', !!newNode.options.disabled)\n  }\n  updateInputOptions(newNode, schema, jsf)\n  if (!newNode.options.title && newNode.name && !/^\\d+$/.test(newNode.name)) {\n    newNode.options.title = fixTitle(newNode.name)\n  }\n\n  if (newNode.dataType === 'object') {\n    if (isArray(schema.required) && !nodeDataMap.has('required')) {\n      nodeDataMap.set('required', schema.required)\n    }\n    if (isObject(schema.properties)) {\n      const newSection: any[] = []\n      const propertyKeys = schema['ui:order'] || Object.keys(schema.properties)\n      if (propertyKeys.includes('*') && !hasOwn(schema.properties, '*')) {\n        const unnamedKeys = Object.keys(schema.properties)\n          .filter(key => !propertyKeys.includes(key))\n        for (let i = propertyKeys.length - 1; i >= 0; i--) {\n          if (propertyKeys[i] === '*') {\n            propertyKeys.splice(i, 1, ...unnamedKeys)\n          }\n        }\n      }\n      propertyKeys\n        .filter(key => hasOwn(schema.properties, key) ||\n          hasOwn(schema, 'additionalProperties')\n        )\n        .forEach(key => {\n          const keySchemaPointer = hasOwn(schema.properties, key) ?\n            '/properties/' + key : '/additionalProperties'\n          const innerItem = buildLayoutFromSchema(\n            jsf, widgetLibrary, isObject(nodeValue) ? nodeValue[key] : null,\n            schemaPointer + keySchemaPointer,\n            dataPointer + '/' + key,\n            false, null, null, forRefLibrary, dataPointerPrefix\n          )\n          if (innerItem) {\n            if (isInputRequired(schema, '/' + key)) {\n              innerItem.options.required = true\n              jsf.fieldsRequired = true\n            }\n            newSection.push(innerItem)\n          }\n        })\n      if (dataPointer === '' && !forRefLibrary) {\n        newNode = newSection\n      } else {\n        newNode.items = newSection\n      }\n    }\n    // TODO: Add patternProperties and additionalProperties inputs?\n    // ... possibly provide a way to enter both key names and values?\n    // if (isObject(schema.patternProperties)) { }\n    // if (isObject(schema.additionalProperties)) { }\n\n  } else if (newNode.dataType === 'array') {\n    newNode.items = []\n    const templateArray: any[] = []\n    newNode.options.maxItems = Math.min(\n      schema.maxItems || 1000, newNode.options.maxItems || 1000\n    )\n    newNode.options.minItems = Math.max(\n      schema.minItems || 0, newNode.options.minItems || 0\n    )\n    if (!newNode.options.minItems && isInputRequired(jsf.schema, schemaPointer)) {\n      newNode.options.minItems = 1\n    }\n    if (!hasOwn(newNode.options, 'listItems')) {\n      newNode.options.listItems = 1\n    }\n    newNode.options.tupleItems = isArray(schema.items) ? schema.items.length : 0\n    if (newNode.options.maxItems <= newNode.options.tupleItems) {\n      newNode.options.tupleItems = newNode.options.maxItems\n      newNode.options.listItems = 0\n    } else if (newNode.options.maxItems <\n      newNode.options.tupleItems + newNode.options.listItems\n    ) {\n      newNode.options.listItems = newNode.options.maxItems - newNode.options.tupleItems\n    } else if (newNode.options.minItems >\n      newNode.options.tupleItems + newNode.options.listItems\n    ) {\n      newNode.options.listItems = newNode.options.minItems - newNode.options.tupleItems\n    }\n    if (!nodeDataMap.has('maxItems')) {\n      nodeDataMap.set('maxItems', newNode.options.maxItems)\n      nodeDataMap.set('minItems', newNode.options.minItems)\n      nodeDataMap.set('tupleItems', newNode.options.tupleItems)\n      nodeDataMap.set('listItems', newNode.options.listItems)\n    }\n    if (!jsf.arrayMap.has(shortDataPointer)) {\n      jsf.arrayMap.set(shortDataPointer, newNode.options.tupleItems)\n    }\n    removable = newNode.options.removable !== false\n    let additionalItemsSchemaPointer: string = null\n\n    // If 'items' is an array = tuple items\n    if (isArray(schema.items)) {\n      newNode.items = []\n      for (let i = 0; i < newNode.options.tupleItems; i++) {\n        let newItem: any\n        const itemRefPointer = removeRecursiveReferences(\n          shortDataPointer + '/' + i, jsf.dataRecursiveRefMap, jsf.arrayMap\n        )\n        const itemRecursive = !itemRefPointer.length ||\n          itemRefPointer !== shortDataPointer + '/' + i\n\n        // If removable, add tuple item layout to layoutRefLibrary\n        if (removable && i >= newNode.options.minItems) {\n          if (!hasOwn(jsf.layoutRefLibrary, itemRefPointer)) {\n            // Set to null first to prevent recursive reference from causing endless loop\n            jsf.layoutRefLibrary[itemRefPointer] = null\n            jsf.layoutRefLibrary[itemRefPointer] = buildLayoutFromSchema(\n              jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null,\n              schemaPointer + '/items/' + i,\n              itemRecursive ? '' : dataPointer + '/' + i,\n              true, 'tuple', true, true, itemRecursive ? dataPointer + '/' + i : ''\n            )\n            if (itemRecursive) {\n              jsf.layoutRefLibrary[itemRefPointer].recursiveReference = true\n            }\n          }\n          newItem = getLayoutNode({\n            $ref: itemRefPointer,\n            dataPointer: dataPointer + '/' + i,\n            recursiveReference: itemRecursive,\n          }, jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null)\n        } else {\n          newItem = buildLayoutFromSchema(\n            jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null,\n            schemaPointer + '/items/' + i,\n            dataPointer + '/' + i,\n            true, 'tuple', false, forRefLibrary, dataPointerPrefix\n          )\n        }\n        if (newItem) {\n          newNode.items.push(newItem)\n        }\n      }\n\n      // If 'additionalItems' is an object = additional list items, after tuple items\n      if (isObject(schema.additionalItems)) {\n        additionalItemsSchemaPointer = schemaPointer + '/additionalItems'\n      }\n\n      // If 'items' is an object = list items only (no tuple items)\n    } else if (isObject(schema.items)) {\n      additionalItemsSchemaPointer = schemaPointer + '/items'\n    }\n\n    if (additionalItemsSchemaPointer) {\n      const itemRefPointer = removeRecursiveReferences(\n        shortDataPointer + '/-', jsf.dataRecursiveRefMap, jsf.arrayMap\n      )\n      const itemRecursive = !itemRefPointer.length ||\n        itemRefPointer !== shortDataPointer + '/-'\n      const itemSchemaPointer = removeRecursiveReferences(\n        additionalItemsSchemaPointer, jsf.schemaRecursiveRefMap, jsf.arrayMap\n      )\n      // Add list item layout to layoutRefLibrary\n      if (itemRefPointer.length && !hasOwn(jsf.layoutRefLibrary, itemRefPointer)) {\n        // Set to null first to prevent recursive reference from causing endless loop\n        jsf.layoutRefLibrary[itemRefPointer] = null\n        jsf.layoutRefLibrary[itemRefPointer] = buildLayoutFromSchema(\n          jsf, widgetLibrary, null,\n          itemSchemaPointer,\n          itemRecursive ? '' : dataPointer + '/-',\n          true, 'list', removable, true, itemRecursive ? dataPointer + '/-' : ''\n        )\n        if (itemRecursive) {\n          jsf.layoutRefLibrary[itemRefPointer].recursiveReference = true\n        }\n      }\n\n      // Add any additional default items\n      if (!itemRecursive || newNode.options.required) {\n        const arrayLength = Math.min(Math.max(\n          itemRecursive ? 0 :\n            newNode.options.tupleItems + newNode.options.listItems,\n          isArray(nodeValue) ? nodeValue.length : 0\n        ), newNode.options.maxItems)\n        if (newNode.items.length < arrayLength) {\n          for (let i = newNode.items.length; i < arrayLength; i++) {\n            newNode.items.push(getLayoutNode({\n              $ref: itemRefPointer,\n              dataPointer: dataPointer + '/-',\n              recursiveReference: itemRecursive,\n            }, jsf, widgetLibrary, isArray(nodeValue) ? nodeValue[i] : null))\n          }\n        }\n      }\n\n      // If needed, add button to add items to array\n      if (newNode.options.addable !== false &&\n        newNode.options.minItems < newNode.options.maxItems &&\n        (newNode.items[newNode.items.length - 1] || {}).type !== '$ref'\n      ) {\n        let buttonText =\n          ((jsf.layoutRefLibrary[itemRefPointer] || {}).options || {}).title\n        const prefix = buttonText ? 'Add ' : 'Add to '\n        if (!buttonText) {\n          buttonText = schema.title || fixTitle(JsonPointer.toKey(dataPointer))\n        }\n        if (!/^add\\b/i.test(buttonText)) {\n          buttonText = prefix + buttonText\n        }\n        newNode.items.push({\n          _id: _.uniqueId(),\n          arrayItem: true,\n          arrayItemType: 'list',\n          dataPointer: newNode.dataPointer + '/-',\n          options: {\n            listItems: newNode.options.listItems,\n            maxItems: newNode.options.maxItems,\n            minItems: newNode.options.minItems,\n            removable: false,\n            title: buttonText,\n            tupleItems: newNode.options.tupleItems,\n          },\n          recursiveReference: itemRecursive,\n          type: '$ref',\n          widget: widgetLibrary.getWidget('$ref'),\n          $ref: itemRefPointer,\n        })\n      }\n    }\n\n  } else if (newNode.dataType === '$ref') {\n    const schemaRef = JsonPointer.compile(schema.$ref)\n    const dataRef = JsonPointer.toDataPointer(schemaRef, jsf.schema) as any\n    let buttonText = ''\n\n    // Get newNode title\n    if (newNode.options.add) {\n      buttonText = newNode.options.add\n    } else if (newNode.name && !/^\\d+$/.test(newNode.name)) {\n      buttonText =\n        (/^add\\b/i.test(newNode.name) ? '' : 'Add ') + fixTitle(newNode.name)\n\n      // If newNode doesn't have a title, look for title of parent array item\n    } else {\n      const parentSchema =\n        JsonPointer.get(jsf.schema, schemaPointer, 0, -1)\n      if (hasOwn(parentSchema, 'title')) {\n        buttonText = 'Add to ' + parentSchema.title\n      } else {\n        const pointerArray = JsonPointer.parse(newNode.dataPointer)\n        buttonText = 'Add to ' + fixTitle(pointerArray[pointerArray.length - 2])\n      }\n    }\n    Object.assign(newNode, {\n      recursiveReference: true,\n      widget: widgetLibrary.getWidget('$ref'),\n      $ref: dataRef,\n    })\n    Object.assign(newNode.options, {\n      removable: false,\n      title: buttonText,\n    })\n    if (isNumber(JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems)) {\n      newNode.options.maxItems =\n        JsonPointer.get(jsf.schema, schemaPointer, 0, -1).maxItems\n    }\n\n    // Add layout template to layoutRefLibrary\n    if (dataRef.length) {\n      if (!hasOwn(jsf.layoutRefLibrary, dataRef)) {\n        // Set to null first to prevent recursive reference from causing endless loop\n        jsf.layoutRefLibrary[dataRef] = null\n        const newLayout = buildLayoutFromSchema(\n          jsf, widgetLibrary, null, schemaRef, '',\n          newNode.arrayItem, newNode.arrayItemType, true, true, dataPointer\n        )\n        if (newLayout) {\n          newLayout.recursiveReference = true\n          jsf.layoutRefLibrary[dataRef] = newLayout\n        } else {\n          delete jsf.layoutRefLibrary[dataRef]\n        }\n      } else if (!jsf.layoutRefLibrary[dataRef].recursiveReference) {\n        jsf.layoutRefLibrary[dataRef].recursiveReference = true\n      }\n    }\n  }\n  return newNode\n}\n","import {copy, forEach, hasOwn} from '../utility'\nimport {isArray, isDefined, isObject} from '../validator'\n\n/**\n * 'mapLayout' function\n *\n * Creates a new layout by running each element in an existing layout through\n * an iteratee. Recursively maps within array elements 'items' and 'tabs'.\n * The iteratee is invoked with four arguments: (value, index, layout, path)\n *\n * The returned layout may be longer (or shorter) then the source layout.\n *\n * If an item from the source layout returns multiple items (as '*' usually will),\n * this function will keep all returned items in-line with the surrounding items.\n *\n * If an item from the source layout causes an error and returns null, it is\n * skipped without error, and the function will still return all non-null items.\n *\n * @param layout - the layout to map\n * @param fn - the function to invoke on each element\n * @param layoutPointer - the layoutPointer to layout, inside rootLayout\n * @param rootLayout - the root layout, which contains layout\n */\nexport function mapLayout(\n  layout: any[],\n  fn: (v: any, i?: number, l?: any, p?: string) => any,\n  layoutPointer: string|string[] = '',\n  rootLayout: any = layout\n): any[] {\n  let indexPad = 0\n  let newLayout: any[] = []\n  forEach(layout, (item, index) => {\n    const realIndex = +index + indexPad\n    const newLayoutPointer = layoutPointer + '/' + realIndex\n    let newNode: any = copy(item)\n    let itemsArray: any[] = []\n    if (isObject(item)) {\n      if (hasOwn(item, 'tabs')) {\n        item.items = item.tabs\n        delete item.tabs\n      }\n      if (hasOwn(item, 'items')) {\n        itemsArray = isArray(item.items) ? item.items : [item.items]\n      }\n    }\n    if (itemsArray.length) {\n      newNode.items = mapLayout(itemsArray, fn, newLayoutPointer + '/items', rootLayout)\n    }\n    newNode = fn(newNode, realIndex, newLayoutPointer, rootLayout)\n    if (!isDefined(newNode)) {\n      indexPad--\n    } else {\n      if (isArray(newNode)) {\n        indexPad += newNode.length - 1\n      }\n      newLayout = newLayout.concat(newNode)\n    }\n  })\n  return newLayout\n}\n","/**\n * 'findDate' function\n */\nexport function findDate(text): string {\n  if (!text) {\n    return null\n  }\n  let foundDate: any[]\n  // Match ...YYYY-MM-DD...\n  foundDate = text.match(/(?:19|20)\\d\\d[-_\\\\\\/\\. ](?:0?\\d|1[012])[-_\\\\\\/\\. ](?:[012]?\\d|3[01])(?!\\d)/)\n  if (foundDate) {\n    return foundDate[0]\n  }\n  // Match ...MM-DD-YYYY...\n  foundDate = text.match(/(?:[012]?\\d|3[01])[-_\\\\\\/\\. ](?:0?\\d|1[012])[-_\\\\\\/\\. ](?:19|20)\\d\\d(?!\\d)/)\n  if (foundDate) {\n    return foundDate[0]\n  }\n  // Match MM-DD-YY...\n  foundDate = text.match(/^(?:[012]?\\d|3[01])[-_\\\\\\/\\. ](?:0?\\d|1[012])[-_\\\\\\/\\. ]\\d\\d(?!\\d)/)\n  if (foundDate) {\n    return foundDate[0]\n  }\n  // Match YY-MM-DD...\n  foundDate = text.match(/^\\d\\d[-_\\\\\\/\\. ](?:[012]?\\d|3[01])[-_\\\\\\/\\. ](?:0?\\d|1[012])(?!\\d)/)\n  if (foundDate) {\n    return foundDate[0]\n  }\n  // Match YYYYMMDD...\n  foundDate = text.match(/^(?:19|20)\\d\\d(?:0\\d|1[012])(?:[012]\\d|3[01])/)\n  if (foundDate) {\n    return foundDate[0]\n  }\n}\n","import {findDate} from './findDate'\n\n/**\n * 'stringToDate' function\n */\nexport function stringToDate(dateString: string): Date {\n  const getDate: string = findDate(dateString)\n  if (!getDate) {\n    return null\n  }\n  let dateParts: number[] = []\n  // Split x-y-z to [x, y, z]\n  if (/^\\d+[^\\d]\\d+[^\\d]\\d+$/.test(getDate)) {\n    dateParts = getDate.split(/[^\\d]/).map(part => +part)\n    // Split xxxxyyzz to [xxxx, yy, zz]\n  } else if (/^\\d{8}$/.test(getDate)) {\n    dateParts = [+getDate.slice(0, 4), +getDate.slice(4, 6), +getDate.slice(6)]\n  }\n  const thisYear = +(new Date().getFullYear() + '').slice(-2)\n  // Check for [YYYY, MM, DD]\n  if (dateParts[0] > 1000 && dateParts[0] < 2100 && dateParts[1] <= 12 && dateParts[2] <= 31) {\n    return new Date(dateParts[0], dateParts[1] - 1, dateParts[2])\n    // Check for [MM, DD, YYYY]\n  } else if (dateParts[0] <= 12 && dateParts[1] <= 31 && dateParts[2] > 1000 && dateParts[2] < 2100) {\n    return new Date(dateParts[2], dateParts[0] - 1, dateParts[1])\n    // Check for [MM, DD, YY]\n  } else if (dateParts[0] <= 12 && dateParts[1] <= 31 && dateParts[2] < 100) {\n    const year = (dateParts[2] <= thisYear ? 2000 : 1900) + dateParts[2]\n    return new Date(year, dateParts[0] - 1, dateParts[1])\n    // Check for [YY, MM, DD]\n  } else if (dateParts[0] < 100 && dateParts[1] <= 12 && dateParts[2] <= 31) {\n    const year = (dateParts[0] <= thisYear ? 2000 : 1900) + dateParts[0]\n    return new Date(year, dateParts[1] - 1, dateParts[2])\n  }\n  return null\n}\n","import {Injectable} from '@angular/core'\n\n@Injectable()\nexport class Framework {\n  name: string\n  framework: any\n  widgets?: { [key: string]: any } = {}\n  stylesheets?: string[] = []\n  scripts?: string[] = []\n}\n","export const enValidationMessages: any = { // Default English error messages\n  required: 'This field is required.',\n  minLength: 'Must be {{minimumLength}} characters or longer (current length: {{currentLength}})',\n  maxLength: 'Must be {{maximumLength}} characters or shorter (current length: {{currentLength}})',\n  pattern: 'Must match pattern: {{requiredPattern}}',\n  format(error) {\n    switch (error.requiredFormat) {\n      case 'date':\n        return 'Must be a date, like \"2000-12-31\"'\n      case 'time':\n        return 'Must be a time, like \"16:20\" or \"03:14:15.9265\"'\n      case 'date-time':\n        return 'Must be a date-time, like \"2000-03-14T01:59\" or \"2000-03-14T01:59:26.535Z\"'\n      case 'email':\n        return 'Must be an email address, like \"name@example.com\"'\n      case 'hostname':\n        return 'Must be a hostname, like \"example.com\"'\n      case 'ipv4':\n        return 'Must be an IPv4 address, like \"127.0.0.1\"'\n      case 'ipv6':\n        return 'Must be an IPv6 address, like \"1234:5678:9ABC:DEF0:1234:5678:9ABC:DEF0\"'\n      // TODO: add examples for 'uri', 'uri-reference', and 'uri-template'\n      // case 'uri': case 'uri-reference': case 'uri-template':\n      case 'url':\n        return 'Must be a url, like \"http://www.example.com/page.html\"'\n      case 'uuid':\n        return 'Must be a uuid, like \"12345678-9ABC-DEF0-1234-56789ABCDEF0\"'\n      case 'color':\n        return 'Must be a color, like \"#FFFFFF\" or \"rgb(255, 255, 255)\"'\n      case 'json-pointer':\n        return 'Must be a JSON Pointer, like \"/pointer/to/something\"'\n      case 'relative-json-pointer':\n        return 'Must be a relative JSON Pointer, like \"2/pointer/to/something\"'\n      case 'regex':\n        return 'Must be a regular expression, like \"(1-)?\\\\d{3}-\\\\d{3}-\\\\d{4}\"'\n      default:\n        return 'Must be a correctly formatted ' + error.requiredFormat\n    }\n  },\n  minimum: 'Must be {{minimumValue}} or more',\n  exclusiveMinimum: 'Must be more than {{exclusiveMinimumValue}}',\n  maximum: 'Must be {{maximumValue}} or less',\n  exclusiveMaximum: 'Must be less than {{exclusiveMaximumValue}}',\n  multipleOf(error) {\n    if ((1 / error.multipleOfValue) % 10 === 0) {\n      const decimals = Math.log10(1 / error.multipleOfValue)\n      return `Must have ${decimals} or fewer decimal places.`\n    } else {\n      return `Must be a multiple of ${error.multipleOfValue}.`\n    }\n  },\n  minProperties: 'Must have {{minimumProperties}} or more items (current items: {{currentProperties}})',\n  maxProperties: 'Must have {{maximumProperties}} or fewer items (current items: {{currentProperties}})',\n  minItems: 'Must have {{minimumItems}} or more items (current items: {{currentItems}})',\n  maxItems: 'Must have {{maximumItems}} or fewer items (current items: {{currentItems}})',\n  uniqueItems: 'All items must be unique',\n  // Note: No default error messages for 'type', 'const', 'enum', or 'dependencies'\n}\n","export const frValidationMessages: any = { // French error messages\n  required: 'Est obligatoire.',\n  minLength: 'Doit avoir minimum {{minimumLength}} caractères (actuellement: {{currentLength}})',\n  maxLength: 'Doit avoir maximum {{maximumLength}} caractères (actuellement: {{currentLength}})',\n  pattern: 'Doit respecter: {{requiredPattern}}',\n  format(error) {\n    switch (error.requiredFormat) {\n      case 'date':\n        return 'Doit être une date, tel que \"2000-12-31\"'\n      case 'time':\n        return 'Doit être une heure, tel que \"16:20\" ou \"03:14:15.9265\"'\n      case 'date-time':\n        return 'Doit être une date et une heure, tel que \"2000-03-14T01:59\" ou \"2000-03-14T01:59:26.535Z\"'\n      case 'email':\n        return 'Doit être une adresse e-mail, tel que \"name@example.com\"'\n      case 'hostname':\n        return 'Doit être un nom de domaine, tel que \"example.com\"'\n      case 'ipv4':\n        return 'Doit être une adresse IPv4, tel que \"127.0.0.1\"'\n      case 'ipv6':\n        return 'Doit être une adresse IPv6, tel que \"1234:5678:9ABC:DEF0:1234:5678:9ABC:DEF0\"'\n      // TODO: add examples for 'uri', 'uri-reference', and 'uri-template'\n      // case 'uri': case 'uri-reference': case 'uri-template':\n      case 'url':\n        return 'Doit être une URL, tel que \"http://www.example.com/page.html\"'\n      case 'uuid':\n        return 'Doit être un UUID, tel que \"12345678-9ABC-DEF0-1234-56789ABCDEF0\"'\n      case 'color':\n        return 'Doit être une couleur, tel que \"#FFFFFF\" or \"rgb(255, 255, 255)\"'\n      case 'json-pointer':\n        return 'Doit être un JSON Pointer, tel que \"/pointer/to/something\"'\n      case 'relative-json-pointer':\n        return 'Doit être un relative JSON Pointer, tel que \"2/pointer/to/something\"'\n      case 'regex':\n        return 'Doit être une expression régulière, tel que \"(1-)?\\\\d{3}-\\\\d{3}-\\\\d{4}\"'\n      default:\n        return 'Doit être avoir le format correct: ' + error.requiredFormat\n    }\n  },\n  minimum: 'Doit être supérieur à {{minimumValue}}',\n  exclusiveMinimum: 'Doit avoir minimum {{exclusiveMinimumValue}} charactères',\n  maximum: 'Doit être inférieur à {{maximumValue}}',\n  exclusiveMaximum: 'Doit avoir maximum {{exclusiveMaximumValue}} charactères',\n  multipleOf(error) {\n    if ((1 / error.multipleOfValue) % 10 === 0) {\n      const decimals = Math.log10(1 / error.multipleOfValue)\n      return `Doit comporter ${decimals} ou moins de decimales.`\n    } else {\n      return `Doit être un multiple de ${error.multipleOfValue}.`\n    }\n  },\n  minProperties: 'Doit comporter au minimum {{minimumProperties}} éléments',\n  maxProperties: 'Doit comporter au maximum {{maximumProperties}} éléments',\n  minItems: 'Doit comporter au minimum {{minimumItems}} éléments',\n  maxItems: 'Doit comporter au maximum {{minimumItems}} éléments',\n  uniqueItems: 'Tous les éléments doivent être uniques',\n  // Note: No default error messages for 'type', 'const', 'enum', or 'dependencies'\n}\n","import {isArray, isSet, isString} from '../validator'\n\n/**\n * 'addClasses' function\n *\n * Merges two space-delimited lists of CSS classes and removes duplicates.\n */\nexport function addClasses(\n  oldClasses: string | string[] | Set<string>,\n  newClasses: string | string[] | Set<string>\n): string | string[] | Set<string> {\n  const badType = i => !isSet(i) && !isArray(i) && !isString(i)\n  if (badType(newClasses)) {\n    return oldClasses\n  }\n  if (badType(oldClasses)) {\n    oldClasses = ''\n  }\n  const toSet = i => isSet(i) ? i : isArray(i) ? new Set(i) : new Set(i.split(' '))\n  const combinedSet: Set<any> = toSet(oldClasses)\n  const newSet: Set<any> = toSet(newClasses)\n  newSet.forEach(c => combinedSet.add(c))\n  if (isSet(oldClasses)) {\n    return combinedSet\n  }\n  if (isArray(oldClasses)) {\n    return Array.from(combinedSet)\n  }\n  return Array.from(combinedSet).join(' ')\n}\n","import {AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn} from '@angular/forms'\nimport {forEach, hasOwn} from '../utility'\nimport {JsonValidators} from '../../json.validators'\nimport {inArray} from '../validator'\nimport * as _ from 'lodash'\n\n/**\n * 'buildFormGroup' function\n */\nexport function buildFormGroup(template: any): AbstractControl {\n  const validatorFns: ValidatorFn[] = []\n  let validatorFn: ValidatorFn = null\n  if (hasOwn(template, 'validators')) {\n    forEach(template.validators, (parameters, validator) => {\n      if (typeof JsonValidators[validator] === 'function') {\n        validatorFns.push(JsonValidators[validator].apply(null, parameters))\n      }\n    })\n    if (validatorFns.length &&\n      inArray(template.controlType, ['FormGroup', 'FormArray'])\n    ) {\n      validatorFn = validatorFns.length > 1 ?\n        JsonValidators.compose(validatorFns) : validatorFns[0]\n    }\n  }\n  if (hasOwn(template, 'controlType')) {\n    switch (template.controlType) {\n      case 'FormGroup':\n        const groupControls: { [key: string]: AbstractControl } = {}\n        forEach(template.controls, (controls, key) => {\n          const newControl: AbstractControl = buildFormGroup(controls)\n          if (newControl) {\n            groupControls[key] = newControl\n          }\n        })\n        return new FormGroup(groupControls, validatorFn)\n      case 'FormArray':\n        return new FormArray(_.filter(_.map(template.controls,\n          controls => buildFormGroup(controls)\n        )), validatorFn)\n      case 'FormControl':\n        return new FormControl(template.value, validatorFns)\n    }\n  }\n  return null\n}\n","import {JsonPointer} from '../jsonpointer.functions'\nimport {isArray, isDefined, isEmpty, isObject, isPrimitive} from '../validator'\nimport {hasOwn} from '../utility'\nimport {getControlValidators, removeRecursiveReferences} from '../json-schema'\nimport {setRequiredFields} from './setRequiredFields'\nimport * as _ from 'lodash'\n\n/**\n * 'buildFormGroupTemplate' function\n *\n * Builds a template for an Angular FormGroup from a JSON Schema.\n *\n * TODO: add support for pattern properties\n * https://spacetelescope.github.io/understanding-json-schema/reference/object.html\n */\nexport function buildFormGroupTemplate(\n  jsf: any,\n  nodeValue: any = null,\n  setValues = true,\n  schemaPointer = '',\n  dataPointer = '',\n  templatePointer = ''\n) {\n  const schema = JsonPointer.get(jsf.schema, schemaPointer)\n  if (setValues) {\n    if (!isDefined(nodeValue) && (\n      jsf.formOptions.setSchemaDefaults === true ||\n      (jsf.formOptions.setSchemaDefaults === 'auto' && isEmpty(jsf.formValues))\n    )) {\n      nodeValue = JsonPointer.get(jsf.schema, schemaPointer + '/default')\n    }\n  } else {\n    nodeValue = null\n  }\n  // TODO: If nodeValue still not set, check layout for default value\n  const schemaType: string | string[] = JsonPointer.get(schema, '/type')\n  const controlType =\n    (hasOwn(schema, 'properties') || hasOwn(schema, 'additionalProperties')) &&\n    schemaType === 'object' ? 'FormGroup' :\n      (hasOwn(schema, 'items') || hasOwn(schema, 'additionalItems')) &&\n      schemaType === 'array' ? 'FormArray' :\n        !schemaType && hasOwn(schema, '$ref') ? '$ref' : 'FormControl'\n  const shortDataPointer =\n    removeRecursiveReferences(dataPointer, jsf.dataRecursiveRefMap, jsf.arrayMap)\n  if (!jsf.dataMap.has(shortDataPointer)) {\n    jsf.dataMap.set(shortDataPointer, new Map())\n  }\n  const nodeOptions = jsf.dataMap.get(shortDataPointer)\n  if (!nodeOptions.has('schemaType')) {\n    nodeOptions.set('schemaPointer', schemaPointer)\n    nodeOptions.set('schemaType', schema.type)\n    if (schema.format) {\n      nodeOptions.set('schemaFormat', schema.format)\n      if (!schema.type) {\n        nodeOptions.set('schemaType', 'string')\n      }\n    }\n    if (controlType) {\n      nodeOptions.set('templatePointer', templatePointer)\n      nodeOptions.set('templateType', controlType)\n    }\n  }\n  let controls: any\n  const validators = getControlValidators(schema)\n  switch (controlType) {\n    case 'FormGroup':\n      controls = {}\n      if (hasOwn(schema, 'ui:order') || hasOwn(schema, 'properties')) {\n        const propertyKeys = schema['ui:order'] || Object.keys(schema.properties)\n        if (propertyKeys.includes('*') && !hasOwn(schema.properties, '*')) {\n          const unnamedKeys = Object.keys(schema.properties)\n            .filter(key => !propertyKeys.includes(key))\n          for (let i = propertyKeys.length - 1; i >= 0; i--) {\n            if (propertyKeys[i] === '*') {\n              propertyKeys.splice(i, 1, ...unnamedKeys)\n            }\n          }\n        }\n        propertyKeys\n          .filter(key => hasOwn(schema.properties, key) ||\n            hasOwn(schema, 'additionalProperties')\n          )\n          .forEach(key => controls[key] = buildFormGroupTemplate(\n            jsf, JsonPointer.get(nodeValue, [key]), setValues,\n            schemaPointer + (hasOwn(schema.properties, key) ?\n              '/properties/' + key : '/additionalProperties'\n            ),\n            dataPointer + '/' + key,\n            templatePointer + '/controls/' + key\n          ))\n        jsf.formOptions.fieldsRequired = setRequiredFields(schema, controls)\n      }\n      return {controlType, controls, validators}\n\n    case 'FormArray':\n      controls = []\n      const minItems =\n        Math.max(schema.minItems || 0, nodeOptions.get('minItems') || 0)\n      const maxItems =\n        Math.min(schema.maxItems || 1000, nodeOptions.get('maxItems') || 1000)\n      let additionalItemsPointer: string = null\n      if (isArray(schema.items)) { // 'items' is an array = tuple items\n        const tupleItems = nodeOptions.get('tupleItems') ||\n          (isArray(schema.items) ? Math.min(schema.items.length, maxItems) : 0)\n        for (let i = 0; i < tupleItems; i++) {\n          if (i < minItems) {\n            controls.push(buildFormGroupTemplate(\n              jsf, isArray(nodeValue) ? nodeValue[i] : nodeValue, setValues,\n              schemaPointer + '/items/' + i,\n              dataPointer + '/' + i,\n              templatePointer + '/controls/' + i\n            ))\n          } else {\n            const schemaRefPointer = removeRecursiveReferences(\n              schemaPointer + '/items/' + i, jsf.schemaRecursiveRefMap\n            )\n            const itemRefPointer = removeRecursiveReferences(\n              shortDataPointer + '/' + i, jsf.dataRecursiveRefMap, jsf.arrayMap\n            )\n            const itemRecursive = itemRefPointer !== shortDataPointer + '/' + i\n            if (!hasOwn(jsf.templateRefLibrary, itemRefPointer)) {\n              jsf.templateRefLibrary[itemRefPointer] = null\n              jsf.templateRefLibrary[itemRefPointer] = buildFormGroupTemplate(\n                jsf, null, setValues,\n                schemaRefPointer,\n                itemRefPointer,\n                templatePointer + '/controls/' + i\n              )\n            }\n            controls.push(\n              isArray(nodeValue) ?\n                buildFormGroupTemplate(\n                  jsf, nodeValue[i], setValues,\n                  schemaPointer + '/items/' + i,\n                  dataPointer + '/' + i,\n                  templatePointer + '/controls/' + i\n                ) :\n                itemRecursive ?\n                  null : _.cloneDeep(jsf.templateRefLibrary[itemRefPointer])\n            )\n          }\n        }\n\n        // If 'additionalItems' is an object = additional list items (after tuple items)\n        if (schema.items.length < maxItems && isObject(schema.additionalItems)) {\n          additionalItemsPointer = schemaPointer + '/additionalItems'\n        }\n\n        // If 'items' is an object = list items only (no tuple items)\n      } else {\n        additionalItemsPointer = schemaPointer + '/items'\n      }\n\n      if (additionalItemsPointer) {\n        const schemaRefPointer = removeRecursiveReferences(\n          additionalItemsPointer, jsf.schemaRecursiveRefMap\n        )\n        const itemRefPointer = removeRecursiveReferences(\n          shortDataPointer + '/-', jsf.dataRecursiveRefMap, jsf.arrayMap\n        )\n        const itemRecursive = itemRefPointer !== shortDataPointer + '/-'\n        if (!hasOwn(jsf.templateRefLibrary, itemRefPointer)) {\n          jsf.templateRefLibrary[itemRefPointer] = null\n          jsf.templateRefLibrary[itemRefPointer] = buildFormGroupTemplate(\n            jsf, null, setValues,\n            schemaRefPointer,\n            itemRefPointer,\n            templatePointer + '/controls/-'\n          )\n        }\n        // const itemOptions = jsf.dataMap.get(itemRefPointer) || new Map();\n        const itemOptions = nodeOptions\n        if (!itemRecursive || hasOwn(validators, 'required')) {\n          const arrayLength = Math.min(Math.max(\n            itemRecursive ? 0 :\n              (itemOptions.get('tupleItems') + itemOptions.get('listItems')) || 0,\n            isArray(nodeValue) ? nodeValue.length : 0\n          ), maxItems)\n          for (let i = controls.length; i < arrayLength; i++) {\n            controls.push(\n              isArray(nodeValue) ?\n                buildFormGroupTemplate(\n                  jsf, nodeValue[i], setValues,\n                  schemaRefPointer,\n                  dataPointer + '/-',\n                  templatePointer + '/controls/-'\n                ) :\n                itemRecursive ?\n                  null : _.cloneDeep(jsf.templateRefLibrary[itemRefPointer])\n            )\n          }\n        }\n      }\n      return {controlType, controls, validators}\n\n    case '$ref':\n      const schemaRef = JsonPointer.compile(schema.$ref)\n      const dataRef = JsonPointer.toDataPointer(schemaRef, schema)\n      const refPointer = removeRecursiveReferences(\n        dataRef, jsf.dataRecursiveRefMap, jsf.arrayMap\n      )\n      if (refPointer && !hasOwn(jsf.templateRefLibrary, refPointer)) {\n        // Set to null first to prevent recursive reference from causing endless loop\n        jsf.templateRefLibrary[refPointer] = null\n        const newTemplate = buildFormGroupTemplate(jsf, setValues, setValues, schemaRef)\n        if (newTemplate) {\n          jsf.templateRefLibrary[refPointer] = newTemplate\n        } else {\n          delete jsf.templateRefLibrary[refPointer]\n        }\n      }\n      return null\n\n    case 'FormControl':\n      const value = {\n        value: setValues && isPrimitive(nodeValue) ? nodeValue : null,\n        disabled: nodeOptions.get('disabled') || false\n      }\n      return {controlType, value, validators}\n\n    default:\n      return null\n  }\n}\n","import {JsonPointer} from '../jsonpointer.functions'\nimport {inArray, isArray, isEmpty, isObject, isString} from '../validator'\nimport {fixTitle, forEach, hasOwn} from '../utility'\nimport {\n  checkInlineType,\n  getFromSchema,\n  getInputType,\n  isInputRequired,\n  removeRecursiveReferences,\n  updateInputOptions\n} from '../json-schema'\nimport {buildLayoutFromSchema, getLayoutNode} from './buildLayoutFromSchema'\nimport {mapLayout} from './mapLayout'\nimport * as _ from 'lodash'\n\n/**\n * 'buildLayout' function\n */\nexport function buildLayout(jsf: any, widgetLibrary: any): any[] {\n  let hasSubmitButton = !JsonPointer.get(jsf, '/formOptions/addSubmit')\n  const formLayout = mapLayout(jsf.layout, (layoutItem, index, layoutPointer) => {\n    const currentIndex = index\n    const newNode: any = {\n      _id: _.uniqueId(),\n      options: {},\n    }\n    if (isObject(layoutItem)) {\n      Object.assign(newNode, layoutItem)\n      Object.keys(newNode)\n        .filter(option => !inArray(option, [\n          '_id', '$ref', 'arrayItem', 'arrayItemType', 'dataPointer', 'dataType',\n          'items', 'key', 'name', 'options', 'recursiveReference', 'type', 'widget'\n        ]))\n        .forEach(option => {\n          newNode.options[option] = newNode[option]\n          delete newNode[option]\n        })\n      if (!hasOwn(newNode, 'type') && isString(newNode.widget)) {\n        newNode.type = newNode.widget\n        delete newNode.widget\n      }\n      if (!hasOwn(newNode.options, 'title')) {\n        if (hasOwn(newNode.options, 'legend')) {\n          newNode.options.title = newNode.options.legend\n          delete newNode.options.legend\n        }\n      }\n      if (!hasOwn(newNode.options, 'validationMessages')) {\n        if (hasOwn(newNode.options, 'errorMessages')) {\n          newNode.options.validationMessages = newNode.options.errorMessages\n          delete newNode.options.errorMessages\n\n          // Convert Angular Schema Form (AngularJS) 'validationMessage' to\n          // Angular JSON Schema Form 'validationMessages'\n          // TV4 codes from https://github.com/geraintluff/tv4/blob/master/source/api.js\n        } else if (hasOwn(newNode.options, 'validationMessage')) {\n          if (typeof newNode.options.validationMessage === 'string') {\n            newNode.options.validationMessages = newNode.options.validationMessage\n          } else {\n            newNode.options.validationMessages = {}\n            Object.keys(newNode.options.validationMessage).forEach(key => {\n              const code = key + ''\n              const newKey =\n                code === '0' ? 'type' :\n                  code === '1' ? 'enum' :\n                    code === '100' ? 'multipleOf' :\n                      code === '101' ? 'minimum' :\n                        code === '102' ? 'exclusiveMinimum' :\n                          code === '103' ? 'maximum' :\n                            code === '104' ? 'exclusiveMaximum' :\n                              code === '200' ? 'minLength' :\n                                code === '201' ? 'maxLength' :\n                                  code === '202' ? 'pattern' :\n                                    code === '300' ? 'minProperties' :\n                                      code === '301' ? 'maxProperties' :\n                                        code === '302' ? 'required' :\n                                          code === '304' ? 'dependencies' :\n                                            code === '400' ? 'minItems' :\n                                              code === '401' ? 'maxItems' :\n                                                code === '402' ? 'uniqueItems' :\n                                                  code === '500' ? 'format' : code + ''\n              newNode.options.validationMessages[newKey] = newNode.options.validationMessage[key]\n            })\n          }\n          delete newNode.options.validationMessage\n        }\n      }\n    } else if (JsonPointer.isJsonPointer(layoutItem)) {\n      newNode.dataPointer = layoutItem\n    } else if (isString(layoutItem)) {\n      newNode.key = layoutItem\n    } else {\n      console.error('buildLayout error: Form layout element not recognized:')\n      console.error(layoutItem)\n      return null\n    }\n    let nodeSchema: any = null\n\n    // If newNode does not have a dataPointer, try to find an equivalent\n    if (!hasOwn(newNode, 'dataPointer')) {\n\n      // If newNode has a key, change it to a dataPointer\n      if (hasOwn(newNode, 'key')) {\n        newNode.dataPointer = newNode.key === '*' ? newNode.key :\n          JsonPointer.compile(JsonPointer.parseObjectPath(newNode.key), '-')\n        delete newNode.key\n\n        // If newNode is an array, search for dataPointer in child nodes\n      } else if (hasOwn(newNode, 'type') && newNode.type.slice(-5) === 'array') {\n        const findDataPointer = (items) => {\n          if (items === null || typeof items !== 'object') {\n            return\n          }\n          if (hasOwn(items, 'dataPointer')) {\n            return items.dataPointer\n          }\n          if (isArray(items.items)) {\n            for (const item of items.items) {\n              if (hasOwn(item, 'dataPointer') && item.dataPointer.indexOf('/-') !== -1) {\n                return item.dataPointer\n              }\n              if (hasOwn(item, 'items')) {\n                const searchItem = findDataPointer(item)\n                if (searchItem) {\n                  return searchItem\n                }\n              }\n            }\n          }\n        }\n        const childDataPointer = findDataPointer(newNode)\n        if (childDataPointer) {\n          newNode.dataPointer =\n            childDataPointer.slice(0, childDataPointer.lastIndexOf('/-'))\n        }\n      }\n    }\n\n    if (hasOwn(newNode, 'dataPointer')) {\n      if (newNode.dataPointer === '*') {\n        return buildLayoutFromSchema(jsf, widgetLibrary, jsf.formValues)\n      }\n      const nodeValue =\n        JsonPointer.get(jsf.formValues, newNode.dataPointer.replace(/\\/-/g, '/1'))\n\n      // TODO: Create function getFormValues(jsf, dataPointer, forRefLibrary)\n      // check formOptions.setSchemaDefaults and formOptions.setLayoutDefaults\n      // then set apropriate values from initialVaues, schema, or layout\n\n      newNode.dataPointer =\n        JsonPointer.toGenericPointer(newNode.dataPointer, jsf.arrayMap)\n      const LastKey = JsonPointer.toKey(newNode.dataPointer)\n      if (!newNode.name && isString(LastKey) && LastKey !== '-') {\n        newNode.name = LastKey\n      }\n      const shortDataPointer = removeRecursiveReferences(\n        newNode.dataPointer, jsf.dataRecursiveRefMap, jsf.arrayMap\n      )\n      const recursive = !shortDataPointer.length ||\n        shortDataPointer !== newNode.dataPointer\n      let schemaPointer: string\n      if (!jsf.dataMap.has(shortDataPointer)) {\n        jsf.dataMap.set(shortDataPointer, new Map())\n      }\n      const nodeDataMap = jsf.dataMap.get(shortDataPointer)\n      if (nodeDataMap.has('schemaPointer')) {\n        schemaPointer = nodeDataMap.get('schemaPointer')\n      } else {\n        schemaPointer = JsonPointer.toSchemaPointer(shortDataPointer, jsf.schema) as any\n        nodeDataMap.set('schemaPointer', schemaPointer)\n      }\n      nodeDataMap.set('disabled', !!newNode.options.disabled)\n      nodeSchema = JsonPointer.get(jsf.schema, schemaPointer)\n      if (nodeSchema) {\n        if (!hasOwn(newNode, 'type')) {\n          newNode.type = getInputType(nodeSchema, newNode)\n        } else if (!widgetLibrary.hasWidget(newNode.type)) {\n          const oldWidgetType = newNode.type\n          newNode.type = getInputType(nodeSchema, newNode)\n          console.error(`error: widget type \"${oldWidgetType}\" ` +\n            `not found in library. Replacing with \"${newNode.type}\".`)\n        } else {\n          newNode.type = checkInlineType(newNode.type, nodeSchema, newNode)\n        }\n        if (nodeSchema.type === 'object' && isArray(nodeSchema.required)) {\n          nodeDataMap.set('required', nodeSchema.required)\n        }\n        newNode.dataType =\n          nodeSchema.type || (hasOwn(nodeSchema, '$ref') ? '$ref' : null)\n        updateInputOptions(newNode, nodeSchema, jsf)\n\n        // Present checkboxes as single control, rather than array\n        if (newNode.type === 'checkboxes' && hasOwn(nodeSchema, 'items')) {\n          updateInputOptions(newNode, nodeSchema.items, jsf)\n        } else if (newNode.dataType === 'array') {\n          newNode.options.maxItems = Math.min(\n            nodeSchema.maxItems || 1000, newNode.options.maxItems || 1000\n          )\n          newNode.options.minItems = Math.max(\n            nodeSchema.minItems || 0, newNode.options.minItems || 0\n          )\n          newNode.options.listItems = Math.max(\n            newNode.options.listItems || 0, isArray(nodeValue) ? nodeValue.length : 0\n          )\n          newNode.options.tupleItems =\n            isArray(nodeSchema.items) ? nodeSchema.items.length : 0\n          if (newNode.options.maxItems < newNode.options.tupleItems) {\n            newNode.options.tupleItems = newNode.options.maxItems\n            newNode.options.listItems = 0\n          } else if (newNode.options.maxItems <\n            newNode.options.tupleItems + newNode.options.listItems\n          ) {\n            newNode.options.listItems =\n              newNode.options.maxItems - newNode.options.tupleItems\n          } else if (newNode.options.minItems >\n            newNode.options.tupleItems + newNode.options.listItems\n          ) {\n            newNode.options.listItems =\n              newNode.options.minItems - newNode.options.tupleItems\n          }\n          if (!nodeDataMap.has('maxItems')) {\n            nodeDataMap.set('maxItems', newNode.options.maxItems)\n            nodeDataMap.set('minItems', newNode.options.minItems)\n            nodeDataMap.set('tupleItems', newNode.options.tupleItems)\n            nodeDataMap.set('listItems', newNode.options.listItems)\n          }\n          if (!jsf.arrayMap.has(shortDataPointer)) {\n            jsf.arrayMap.set(shortDataPointer, newNode.options.tupleItems)\n          }\n        }\n        if (isInputRequired(jsf.schema, schemaPointer)) {\n          newNode.options.required = true\n          jsf.fieldsRequired = true\n        }\n      } else {\n        // TODO: create item in FormGroup model from layout key (?)\n        updateInputOptions(newNode, {}, jsf)\n      }\n\n      if (!newNode.options.title && !/^\\d+$/.test(newNode.name)) {\n        newNode.options.title = fixTitle(newNode.name)\n      }\n\n      if (hasOwn(newNode.options, 'copyValueTo')) {\n        if (typeof newNode.options.copyValueTo === 'string') {\n          newNode.options.copyValueTo = [newNode.options.copyValueTo]\n        }\n        if (isArray(newNode.options.copyValueTo)) {\n          newNode.options.copyValueTo = newNode.options.copyValueTo.map(item =>\n            JsonPointer.compile(JsonPointer.parseObjectPath(item), '-')\n          )\n        }\n      }\n\n      newNode.widget = widgetLibrary.getWidget(newNode.type)\n      nodeDataMap.set('inputType', newNode.type)\n      nodeDataMap.set('widget', newNode.widget)\n\n      if (newNode.dataType === 'array' &&\n        (hasOwn(newNode, 'items') || hasOwn(newNode, 'additionalItems'))\n      ) {\n        const itemRefPointer = removeRecursiveReferences(\n          newNode.dataPointer + '/-', jsf.dataRecursiveRefMap, jsf.arrayMap\n        )\n        if (!jsf.dataMap.has(itemRefPointer)) {\n          jsf.dataMap.set(itemRefPointer, new Map())\n        }\n        jsf.dataMap.get(itemRefPointer).set('inputType', 'section')\n\n        // Fix insufficiently nested array item groups\n        if (newNode.items.length > 1) {\n          const arrayItemGroup = []\n          const arrayItemGroupTemplate = []\n          let newIndex = 0\n          for (let i = newNode.items.length - 1; i >= 0; i--) {\n            const subItem = newNode.items[i]\n            if (hasOwn(subItem, 'dataPointer') &&\n              subItem.dataPointer.slice(0, itemRefPointer.length) === itemRefPointer\n            ) {\n              const arrayItem = newNode.items.splice(i, 1)[0]\n              arrayItem.dataPointer = newNode.dataPointer + '/-' +\n                arrayItem.dataPointer.slice(itemRefPointer.length)\n              arrayItemGroup.unshift(arrayItem)\n              newIndex++\n            } else {\n              subItem.arrayItem = true\n              // TODO: Check schema to get arrayItemType and removable\n              subItem.arrayItemType = 'list'\n              subItem.removable = newNode.options.removable !== false\n            }\n          }\n          if (arrayItemGroup.length) {\n            newNode.items.push({\n              _id: _.uniqueId(),\n              arrayItem: true,\n              arrayItemType: newNode.options.tupleItems > newNode.items.length ?\n                'tuple' : 'list',\n              items: arrayItemGroup,\n              options: {removable: newNode.options.removable !== false,},\n              dataPointer: newNode.dataPointer + '/-',\n              type: 'section',\n              widget: widgetLibrary.getWidget('section'),\n            })\n          }\n        } else {\n          // TODO: Fix to hndle multiple items\n          newNode.items[0].arrayItem = true\n          if (!newNode.items[0].dataPointer) {\n            newNode.items[0].dataPointer =\n              JsonPointer.toGenericPointer(itemRefPointer, jsf.arrayMap)\n          }\n          if (!JsonPointer.has(newNode, '/items/0/options/removable')) {\n            newNode.items[0].options.removable = true\n          }\n          if (newNode.options.orderable === false) {\n            newNode.items[0].options.orderable = false\n          }\n          newNode.items[0].arrayItemType =\n            newNode.options.tupleItems ? 'tuple' : 'list'\n        }\n\n        if (isArray(newNode.items)) {\n          const arrayListItems =\n            newNode.items.filter(item => item.type !== '$ref').length -\n            newNode.options.tupleItems\n          if (arrayListItems > newNode.options.listItems) {\n            newNode.options.listItems = arrayListItems\n            nodeDataMap.set('listItems', arrayListItems)\n          }\n        }\n\n        if (!hasOwn(jsf.layoutRefLibrary, itemRefPointer)) {\n          jsf.layoutRefLibrary[itemRefPointer] =\n            _.cloneDeep(newNode.items[newNode.items.length - 1])\n          if (recursive) {\n            jsf.layoutRefLibrary[itemRefPointer].recursiveReference = true\n          }\n          forEach(jsf.layoutRefLibrary[itemRefPointer], (item, key) => {\n            if (hasOwn(item, '_id')) {\n              item._id = null\n            }\n            if (recursive) {\n              if (hasOwn(item, 'dataPointer')) {\n                item.dataPointer = item.dataPointer.slice(itemRefPointer.length)\n              }\n            }\n          }, 'top-down')\n        }\n\n        // Add any additional default items\n        if (!newNode.recursiveReference || newNode.options.required) {\n          const arrayLength = Math.min(Math.max(\n            newNode.options.tupleItems + newNode.options.listItems,\n            isArray(nodeValue) ? nodeValue.length : 0\n          ), newNode.options.maxItems)\n          for (let i = newNode.items.length; i < arrayLength; i++) {\n            newNode.items.push(getLayoutNode({\n              $ref: itemRefPointer,\n              dataPointer: newNode.dataPointer,\n              recursiveReference: newNode.recursiveReference,\n            }, jsf, widgetLibrary))\n          }\n        }\n\n        // If needed, add button to add items to array\n        if (newNode.options.addable !== false &&\n          newNode.options.minItems < newNode.options.maxItems &&\n          (newNode.items[newNode.items.length - 1] || {}).type !== '$ref'\n        ) {\n          let buttonText = 'Add'\n          if (newNode.options.title) {\n            if (/^add\\b/i.test(newNode.options.title)) {\n              buttonText = newNode.options.title\n            } else {\n              buttonText += ' ' + newNode.options.title\n            }\n          } else if (newNode.name && !/^\\d+$/.test(newNode.name)) {\n            if (/^add\\b/i.test(newNode.name)) {\n              buttonText += ' ' + fixTitle(newNode.name)\n            } else {\n              buttonText = fixTitle(newNode.name)\n            }\n\n            // If newNode doesn't have a title, look for title of parent array item\n          } else {\n            const parentSchema =\n              getFromSchema(jsf.schema, newNode.dataPointer, 'parentSchema')\n            if (hasOwn(parentSchema, 'title')) {\n              buttonText += ' to ' + parentSchema.title\n            } else {\n              const pointerArray = JsonPointer.parse(newNode.dataPointer)\n              buttonText += ' to ' + fixTitle(pointerArray[pointerArray.length - 2])\n            }\n          }\n          newNode.items.push({\n            _id: _.uniqueId(),\n            arrayItem: true,\n            arrayItemType: 'list',\n            dataPointer: newNode.dataPointer + '/-',\n            options: {\n              listItems: newNode.options.listItems,\n              maxItems: newNode.options.maxItems,\n              minItems: newNode.options.minItems,\n              removable: false,\n              title: buttonText,\n              tupleItems: newNode.options.tupleItems,\n            },\n            recursiveReference: recursive,\n            type: '$ref',\n            widget: widgetLibrary.getWidget('$ref'),\n            $ref: itemRefPointer,\n          })\n          if (isString(JsonPointer.get(newNode, '/style/add'))) {\n            newNode.items[newNode.items.length - 1].options.fieldStyle =\n              newNode.style.add\n            delete newNode.style.add\n            if (isEmpty(newNode.style)) {\n              delete newNode.style\n            }\n          }\n        }\n      } else {\n        newNode.arrayItem = false\n      }\n    } else if (hasOwn(newNode, 'type') || hasOwn(newNode, 'items')) {\n      const parentType: string =\n        JsonPointer.get(jsf.layout, layoutPointer, 0, -2).type\n      if (!hasOwn(newNode, 'type')) {\n        newNode.type =\n          inArray(parentType, ['tabs', 'tabarray']) ? 'tab' : 'array'\n      }\n      newNode.arrayItem = parentType === 'array'\n      newNode.widget = widgetLibrary.getWidget(newNode.type)\n      updateInputOptions(newNode, {}, jsf)\n    }\n    if (newNode.type === 'submit') {\n      hasSubmitButton = true\n    }\n    return newNode\n  })\n  if (jsf.hasRootReference) {\n    const fullLayout = _.cloneDeep(formLayout)\n    if (fullLayout[fullLayout.length - 1].type === 'submit') {\n      fullLayout.pop()\n    }\n    jsf.layoutRefLibrary[''] = {\n      _id: null,\n      dataPointer: '',\n      dataType: 'object',\n      items: fullLayout,\n      name: '',\n      options: _.cloneDeep(jsf.formOptions.defautWidgetOptions),\n      recursiveReference: true,\n      required: false,\n      type: 'section',\n      widget: widgetLibrary.getWidget('section'),\n    }\n  }\n  if (!hasSubmitButton) {\n    formLayout.push({\n      _id: _.uniqueId(),\n      options: {title: 'Submit'},\n      type: 'submit',\n      widget: widgetLibrary.getWidget('submit'),\n    })\n  }\n  return formLayout\n}\n","import {getType} from '../validator'\n\n/**\n * 'buildSchemaFromData' function\n *\n * Build a JSON Schema from a data object\n *\n * @param  data - The data object\n * @param  requireAllFields - Require all fields?\n * @param  isRoot - is root\n * @return The new JSON Schema\n */\nexport function buildSchemaFromData(\n  data: any,\n  requireAllFields = false,\n  isRoot = true\n) {\n  const newSchema: any = {}\n  const getFieldType = (value: any): string => {\n    const fieldType = getType(value, 'strict')\n    return {integer: 'number', null: 'string'}[fieldType] || fieldType\n  }\n  const buildSubSchema = (value) =>\n    buildSchemaFromData(value, requireAllFields, false)\n  if (isRoot) {\n    newSchema.$schema = 'http://json-schema.org/draft-06/schema#'\n  }\n  newSchema.type = getFieldType(data)\n  if (newSchema.type === 'object') {\n    newSchema.properties = {}\n    if (requireAllFields) {\n      newSchema.required = []\n    }\n    for (const key of Object.keys(data)) {\n      newSchema.properties[key] = buildSubSchema(data[key])\n      if (requireAllFields) {\n        newSchema.required.push(key)\n      }\n    }\n  } else if (newSchema.type === 'array') {\n    newSchema.items = data.map(buildSubSchema)\n    // If all items are the same type, use an object for items instead of an array\n    if ((new Set(data.map(getFieldType))).size === 1) {\n      newSchema.items = newSchema.items.reduce((a, b) => ({...a, ...b}), {})\n    }\n    if (requireAllFields) {\n      newSchema.minItems = 1\n    }\n  }\n  return newSchema\n}\n","/**\n * 'buildSchemaFromLayout' function\n *\n * TODO: Build a JSON Schema from a JSON Form layout\n *\n * @param  layout - The JSON Form layout\n * @return The new JSON Schema\n */\nexport function buildSchemaFromLayout(layout: any[]) {\n  return\n  // let newSchema: any = { };\n  // const walkLayout = (layoutItems: any[], callback: Function): any[] => {\n  //   let returnArray: any[] = [];\n  //   for (let layoutItem of layoutItems) {\n  //     const returnItem: any = callback(layoutItem);\n  //     if (returnItem) { returnArray = returnArray.concat(callback(layoutItem)); }\n  //     if (layoutItem.items) {\n  //       returnArray = returnArray.concat(walkLayout(layoutItem.items, callback));\n  //     }\n  //   }\n  //   return returnArray;\n  // };\n  // walkLayout(layout, layoutItem => {\n  //   let itemKey: string;\n  //   if (typeof layoutItem === 'string') {\n  //     itemKey = layoutItem;\n  //   } else if (layoutItem.key) {\n  //     itemKey = layoutItem.key;\n  //   }\n  //   if (!itemKey) { return; }\n  //   //\n  // });\n}\n","import * as _ from 'lodash'\n\nexport interface OptionObject {\n  changed?: boolean\n  draft?: number\n}\n\n/**\n * 'convertSchemaToDraft6' function\n *\n * Converts a JSON Schema from draft 1 through 4 format to draft 6 format\n *\n * Inspired by on geraintluff's JSON Schema 3 to 4 compatibility function:\n *   https://github.com/geraintluff/json-schema-compatibility\n * Also uses suggestions from AJV's JSON Schema 4 to 6 migration guide:\n *   https://github.com/epoberezkin/ajv/releases/tag/5.0.0\n * And additional details from the official JSON Schema documentation:\n *   http://json-schema.org\n *\n * @param schema - JSON schema (draft 1, 2, 3, 4, or 6)\n * @param options - options: parent schema changed?, schema draft number?\n * @return JSON schema (draft 6)\n */\nexport function convertSchemaToDraft6(\n  schema: any,\n  options: OptionObject = {}\n) {\n  let draft: number = options.draft || null\n  let changed: boolean = options.changed || false\n\n  if (typeof schema !== 'object') {\n    return schema\n  }\n  if (typeof schema.map === 'function') {\n    return [...schema.map(subSchema => convertSchemaToDraft6(subSchema, {changed, draft}))]\n  }\n  let newSchema = {...schema}\n  const simpleTypes = ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']\n\n  if (typeof newSchema.$schema === 'string' &&\n    /http\\:\\/\\/json\\-schema\\.org\\/draft\\-0\\d\\/schema\\#/.test(newSchema.$schema)\n  ) {\n    draft = newSchema.$schema[30]\n  }\n\n  // Convert v1-v2 'contentEncoding' to 'media.binaryEncoding'\n  // Note: This is only used in JSON hyper-schema (not regular JSON schema)\n  if (newSchema.contentEncoding) {\n    newSchema.media = {binaryEncoding: newSchema.contentEncoding}\n    delete newSchema.contentEncoding\n    changed = true\n  }\n\n  // Convert v1-v3 'extends' to 'allOf'\n  if (typeof newSchema.extends === 'object') {\n    newSchema.allOf = typeof newSchema.extends.map === 'function' ?\n      newSchema.extends.map(subSchema => convertSchemaToDraft6(subSchema, {changed, draft})) :\n      [convertSchemaToDraft6(newSchema.extends, {changed, draft})]\n    delete newSchema.extends\n    changed = true\n  }\n\n  // Convert v1-v3 'disallow' to 'not'\n  if (newSchema.disallow) {\n    if (typeof newSchema.disallow === 'string') {\n      newSchema.not = {type: newSchema.disallow}\n    } else if (typeof newSchema.disallow.map === 'function') {\n      newSchema.not = {\n        anyOf: newSchema.disallow\n          .map(type => typeof type === 'object' ? type : {type})\n      }\n    }\n    delete newSchema.disallow\n    changed = true\n  }\n\n  // Convert v3 string 'dependencies' properties to arrays\n  if (typeof newSchema.dependencies === 'object' &&\n    Object.keys(newSchema.dependencies)\n      .some(key => typeof newSchema.dependencies[key] === 'string')\n  ) {\n    newSchema.dependencies = {...newSchema.dependencies}\n    Object.keys(newSchema.dependencies)\n      .filter(key => typeof newSchema.dependencies[key] === 'string')\n      .forEach(key => newSchema.dependencies[key] = [newSchema.dependencies[key]])\n    changed = true\n  }\n\n  // Convert v1 'maxDecimal' to 'multipleOf'\n  if (typeof newSchema.maxDecimal === 'number') {\n    newSchema.multipleOf = 1 / Math.pow(10, newSchema.maxDecimal)\n    delete newSchema.divisibleBy\n    changed = true\n    if (!draft || draft === 2) {\n      draft = 1\n    }\n  }\n\n  // Convert v2-v3 'divisibleBy' to 'multipleOf'\n  if (typeof newSchema.divisibleBy === 'number') {\n    newSchema.multipleOf = newSchema.divisibleBy\n    delete newSchema.divisibleBy\n    changed = true\n  }\n\n  // Convert v1-v2 boolean 'minimumCanEqual' to 'exclusiveMinimum'\n  if (typeof newSchema.minimum === 'number' && newSchema.minimumCanEqual === false) {\n    newSchema.exclusiveMinimum = newSchema.minimum\n    delete newSchema.minimum\n    changed = true\n    if (!draft) {\n      draft = 2\n    }\n  } else if (typeof newSchema.minimumCanEqual === 'boolean') {\n    delete newSchema.minimumCanEqual\n    changed = true\n    if (!draft) {\n      draft = 2\n    }\n  }\n\n  // Convert v3-v4 boolean 'exclusiveMinimum' to numeric\n  if (typeof newSchema.minimum === 'number' && newSchema.exclusiveMinimum === true) {\n    newSchema.exclusiveMinimum = newSchema.minimum\n    delete newSchema.minimum\n    changed = true\n  } else if (typeof newSchema.exclusiveMinimum === 'boolean') {\n    delete newSchema.exclusiveMinimum\n    changed = true\n  }\n\n  // Convert v1-v2 boolean 'maximumCanEqual' to 'exclusiveMaximum'\n  if (typeof newSchema.maximum === 'number' && newSchema.maximumCanEqual === false) {\n    newSchema.exclusiveMaximum = newSchema.maximum\n    delete newSchema.maximum\n    changed = true\n    if (!draft) {\n      draft = 2\n    }\n  } else if (typeof newSchema.maximumCanEqual === 'boolean') {\n    delete newSchema.maximumCanEqual\n    changed = true\n    if (!draft) {\n      draft = 2\n    }\n  }\n\n  // Convert v3-v4 boolean 'exclusiveMaximum' to numeric\n  if (typeof newSchema.maximum === 'number' && newSchema.exclusiveMaximum === true) {\n    newSchema.exclusiveMaximum = newSchema.maximum\n    delete newSchema.maximum\n    changed = true\n  } else if (typeof newSchema.exclusiveMaximum === 'boolean') {\n    delete newSchema.exclusiveMaximum\n    changed = true\n  }\n\n  // Search object 'properties' for 'optional', 'required', and 'requires' items,\n  // and convert them into object 'required' arrays and 'dependencies' objects\n  if (typeof newSchema.properties === 'object') {\n    const properties = {...newSchema.properties}\n    const requiredKeys = Array.isArray(newSchema.required) ?\n      new Set(newSchema.required) : new Set()\n\n    // Convert v1-v2 boolean 'optional' properties to 'required' array\n    if (draft === 1 || draft === 2 ||\n      Object.keys(properties).some(key => properties[key].optional === true)\n    ) {\n      Object.keys(properties)\n        .filter(key => properties[key].optional !== true)\n        .forEach(key => requiredKeys.add(key))\n      changed = true\n      if (!draft) {\n        draft = 2\n      }\n    }\n\n    // Convert v3 boolean 'required' properties to 'required' array\n    if (Object.keys(properties).some(key => properties[key].required === true)) {\n      Object.keys(properties)\n        .filter(key => properties[key].required === true)\n        .forEach(key => requiredKeys.add(key))\n      changed = true\n    }\n\n    if (requiredKeys.size) {\n      newSchema.required = Array.from(requiredKeys)\n    }\n\n    // Convert v1-v2 array or string 'requires' properties to 'dependencies' object\n    if (Object.keys(properties).some(key => properties[key].requires)) {\n      const dependencies = typeof newSchema.dependencies === 'object' ?\n        {...newSchema.dependencies} : {}\n      Object.keys(properties)\n        .filter(key => properties[key].requires)\n        .forEach(key => dependencies[key] =\n          typeof properties[key].requires === 'string' ?\n            [properties[key].requires] : properties[key].requires\n        )\n      newSchema.dependencies = dependencies\n      changed = true\n      if (!draft) {\n        draft = 2\n      }\n    }\n\n    newSchema.properties = properties\n  }\n\n  // Revove v1-v2 boolean 'optional' key\n  if (typeof newSchema.optional === 'boolean') {\n    delete newSchema.optional\n    changed = true\n    if (!draft) {\n      draft = 2\n    }\n  }\n\n  // Revove v1-v2 'requires' key\n  if (newSchema.requires) {\n    delete newSchema.requires\n  }\n\n  // Revove v3 boolean 'required' key\n  if (typeof newSchema.required === 'boolean') {\n    delete newSchema.required\n  }\n\n  // Convert id to $id\n  if (typeof newSchema.id === 'string' && !newSchema.$id) {\n    if (newSchema.id.slice(-1) === '#') {\n      newSchema.id = newSchema.id.slice(0, -1)\n    }\n    newSchema.$id = newSchema.id + '-CONVERTED-TO-DRAFT-06#'\n    delete newSchema.id\n    changed = true\n  }\n\n  // Check if v1-v3 'any' or object types will be converted\n  if (newSchema.type && (typeof newSchema.type.every === 'function' ?\n      !newSchema.type.every(type => simpleTypes.includes(type)) :\n      !simpleTypes.includes(newSchema.type)\n  )) {\n    changed = true\n  }\n\n  // If schema changed, update or remove $schema identifier\n  if (typeof newSchema.$schema === 'string' &&\n    /http\\:\\/\\/json\\-schema\\.org\\/draft\\-0[1-4]\\/schema\\#/.test(newSchema.$schema)\n  ) {\n    newSchema.$schema = 'http://json-schema.org/draft-06/schema#'\n    changed = true\n  } else if (changed && typeof newSchema.$schema === 'string') {\n    const addToDescription = 'Converted to draft 6 from ' + newSchema.$schema\n    if (typeof newSchema.description === 'string' && newSchema.description.length) {\n      newSchema.description += '\\n' + addToDescription\n    } else {\n      newSchema.description = addToDescription\n    }\n    delete newSchema.$schema\n  }\n\n  // Convert v1-v3 'any' and object types\n  if (newSchema.type && (typeof newSchema.type.every === 'function' ?\n      !newSchema.type.every(type => simpleTypes.includes(type)) :\n      !simpleTypes.includes(newSchema.type)\n  )) {\n    if (newSchema.type.length === 1) {\n      newSchema.type = newSchema.type[0]\n    }\n    if (typeof newSchema.type === 'string') {\n      // Convert string 'any' type to array of all standard types\n      if (newSchema.type === 'any') {\n        newSchema.type = simpleTypes\n        // Delete non-standard string type\n      } else {\n        delete newSchema.type\n      }\n    } else if (typeof newSchema.type === 'object') {\n      if (typeof newSchema.type.every === 'function') {\n        // If array of strings, only allow standard types\n        if (newSchema.type.every(type => typeof type === 'string')) {\n          newSchema.type = newSchema.type.some(type => type === 'any') ?\n            newSchema.type = simpleTypes :\n            newSchema.type.filter(type => simpleTypes.includes(type))\n          // If type is an array with objects, convert the current schema to an 'anyOf' array\n        } else if (newSchema.type.length > 1) {\n          const arrayKeys = ['additionalItems', 'items', 'maxItems', 'minItems', 'uniqueItems', 'contains']\n          const numberKeys = ['multipleOf', 'maximum', 'exclusiveMaximum', 'minimum', 'exclusiveMinimum']\n          const objectKeys = ['maxProperties', 'minProperties', 'required', 'additionalProperties',\n            'properties', 'patternProperties', 'dependencies', 'propertyNames']\n          const stringKeys = ['maxLength', 'minLength', 'pattern', 'format']\n          const filterKeys = {\n            array: [...numberKeys, ...objectKeys, ...stringKeys],\n            integer: [...arrayKeys, ...objectKeys, ...stringKeys],\n            number: [...arrayKeys, ...objectKeys, ...stringKeys],\n            object: [...arrayKeys, ...numberKeys, ...stringKeys],\n            string: [...arrayKeys, ...numberKeys, ...objectKeys],\n            all: [...arrayKeys, ...numberKeys, ...objectKeys, ...stringKeys],\n          }\n          const anyOf = []\n          for (const type of newSchema.type) {\n            const newType = typeof type === 'string' ? {type} : {...type}\n            Object.keys(newSchema)\n              .filter(key => !newType.hasOwnProperty(key) &&\n                ![...(filterKeys[newType.type] || filterKeys.all), 'type', 'default']\n                  .includes(key)\n              )\n              .forEach(key => newType[key] = newSchema[key])\n            anyOf.push(newType)\n          }\n          newSchema = newSchema.hasOwnProperty('default') ?\n            {anyOf, default: newSchema.default} : {anyOf}\n          // If type is an object, merge it with the current schema\n        } else {\n          const typeSchema = newSchema.type\n          delete newSchema.type\n          Object.assign(newSchema, typeSchema)\n        }\n      }\n    } else {\n      delete newSchema.type\n    }\n  }\n\n  // Convert sub schemas\n  Object.keys(newSchema)\n    .filter(key => typeof newSchema[key] === 'object')\n    .forEach(key => {\n      if (\n        ['definitions', 'dependencies', 'properties', 'patternProperties']\n          .includes(key) && typeof newSchema[key].map !== 'function'\n      ) {\n        const newKey = {}\n        Object.keys(newSchema[key]).forEach(subKey => newKey[subKey] =\n          convertSchemaToDraft6(newSchema[key][subKey], {changed, draft})\n        )\n        newSchema[key] = newKey\n      } else if (\n        ['items', 'additionalItems', 'additionalProperties',\n          'allOf', 'anyOf', 'oneOf', 'not'].includes(key)\n      ) {\n        newSchema[key] = convertSchemaToDraft6(newSchema[key], {changed, draft})\n      } else {\n        newSchema[key] = _.cloneDeep(newSchema[key])\n      }\n    })\n\n  return newSchema\n}\n","import {ordinal} from './ordinal'\nimport {stringToDate} from './stringToDate'\n\n/**\n * 'dateToString' function\n */\nexport function dateToString(date: Date | string, options: any = {}): string {\n  const dateFormat = options.dateFormat || 'YYYY-MM-DD'\n  // TODO: Use options.locale to change default format and names\n  // const locale = options.locale || 'en-US';\n  if (typeof date === 'string') {\n    date = stringToDate(date)\n  }\n  if (Object.prototype.toString.call(date) !== '[object Date]') {\n    return null\n  }\n  const longMonths = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December']\n  const shortMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  const longDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  const shortDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  return dateFormat\n    .replace(/YYYY/ig, date.getFullYear() + '')\n    .replace(/YY/ig, (date.getFullYear() + '').slice(-2))\n    .replace(/MMMM/ig, longMonths[date.getMonth()])\n    .replace(/MMM/ig, shortMonths[date.getMonth()])\n    .replace(/MM/ig, ('0' + (date.getMonth() + 1)).slice(-2))\n    .replace(/M/ig, (date.getMonth() + 1) + '')\n    .replace(/DDDD/ig, longDays[date.getDay()])\n    .replace(/DDD/ig, shortDays[date.getDay()])\n    .replace(/DD/ig, ('0' + date.getDate()).slice(-2))\n    .replace(/D/ig, date.getDate() + '')\n    .replace(/S/ig, ordinal(date.getDate()))\n}\n","export function ordinal(value: number | string): string {\n  if (typeof value === 'number') {\n    value = value + ''\n  }\n  const last = value.slice(-1)\n  const nextToLast = value.slice(-2, 1)\n  return (nextToLast !== '1' && {1: 'st', 2: 'nd', 3: 'rd'}[last]) || 'th'\n}\n","import {\n  hasValue,\n  inArray,\n  isArray,\n  isDate,\n  isDefined,\n  isObject,\n  SchemaType,\n  toJavaScriptType,\n  toSchemaType\n} from '../validator'\nimport {JsonPointer} from '../jsonpointer.functions'\nimport {removeRecursiveReferences} from '../json-schema'\n\n/**\n * 'formatFormData' function\n *\n * @param formData - Angular FormGroup data object\n * @param dataMap -\n * @param recursiveRefMap -\n * @param arrayMap -\n * @param returnEmptyFields -\n * @param fixErrors - if TRUE, tries to fix data\n * @return formatted data object\n */\nexport function formatFormData(\n  formData: any,\n  dataMap: Map<string, any>,\n  recursiveRefMap: Map<string, string>,\n  arrayMap: Map<string, number>,\n  returnEmptyFields = false,\n  fixErrors = false\n): any {\n  if (formData === null || typeof formData !== 'object') {\n    return formData\n  }\n  const formattedData = isArray(formData) ? [] : {}\n  JsonPointer.forEachDeep(formData, (value, dataPointer) => {\n\n    // If returnEmptyFields === true,\n    // add empty arrays and objects to all allowed keys\n    if (returnEmptyFields && isArray(value)) {\n      JsonPointer.set(formattedData, dataPointer, [])\n    } else if (returnEmptyFields && isObject(value) && !isDate(value)) {\n      JsonPointer.set(formattedData, dataPointer, {})\n    } else {\n      const genericPointer =\n        JsonPointer.has(dataMap, [dataPointer, 'schemaType']) ? dataPointer :\n          removeRecursiveReferences(dataPointer, recursiveRefMap, arrayMap)\n      if (JsonPointer.has(dataMap, [genericPointer, 'schemaType'])) {\n        const schemaType: SchemaType | SchemaType[] =\n          dataMap.get(genericPointer).get('schemaType')\n        if (schemaType === 'null') {\n          JsonPointer.set(formattedData, dataPointer, null)\n        } else if ((hasValue(value) || returnEmptyFields) &&\n          inArray(schemaType, ['string', 'integer', 'number', 'boolean'])\n        ) {\n          const newValue = (fixErrors || (value === null && returnEmptyFields)) ?\n            toSchemaType(value, schemaType as any) : toJavaScriptType(value, schemaType as any)\n          if (isDefined(newValue) || returnEmptyFields) {\n            JsonPointer.set(formattedData, dataPointer, newValue)\n          }\n\n          // If returnEmptyFields === false,\n          // only add empty arrays and objects to required keys\n        } else if (schemaType === 'object' && !returnEmptyFields) {\n          (dataMap.get(genericPointer).get('required') || []).forEach(key => {\n            const keySchemaType =\n              dataMap.get(`${genericPointer}/${key}`).get('schemaType')\n            if (keySchemaType === 'array') {\n              JsonPointer.set(formattedData, `${dataPointer}/${key}`, [])\n            } else if (keySchemaType === 'object') {\n              JsonPointer.set(formattedData, `${dataPointer}/${key}`, {})\n            }\n          })\n        }\n\n        // Finish incomplete 'date-time' entries\n        if (dataMap.get(genericPointer).get('schemaFormat') === 'date-time') {\n          // \"2000-03-14T01:59:26.535\" -> \"2000-03-14T01:59:26.535Z\" (add \"Z\")\n          if (/^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s][0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?$/i.test(value)) {\n            JsonPointer.set(formattedData, dataPointer, `${value}Z`)\n            // \"2000-03-14T01:59\" -> \"2000-03-14T01:59:00Z\" (add \":00Z\")\n          } else if (/^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s][0-2]\\d:[0-5]\\d$/i.test(value)) {\n            JsonPointer.set(formattedData, dataPointer, `${value}:00Z`)\n            // \"2000-03-14\" -> \"2000-03-14T00:00:00Z\" (add \"T00:00:00Z\")\n          } else if (fixErrors && /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/i.test(value)) {\n            JsonPointer.set(formattedData, dataPointer, `${value}:00:00:00Z`)\n          }\n        }\n      } else if (typeof value !== 'object' || isDate(value) ||\n        (value === null && returnEmptyFields)\n      ) {\n        console.error('formatFormData error: ' +\n          `Schema type not found for form value at ${genericPointer}`)\n        console.error('dataMap', dataMap)\n        console.error('recursiveRefMap', recursiveRefMap)\n        console.error('genericPointer', genericPointer)\n      }\n    }\n  })\n  return formattedData\n}\n","import {JsonPointer, Pointer} from '../jsonpointer.functions'\nimport {isArray, isObject} from '../validator'\nimport {hasOwn} from '../utility'\nimport {FormGroup} from '@angular/forms'\n\n/**\n * 'getControl' function\n *\n * Uses a JSON Pointer for a data object to retrieve a control from\n * an Angular formGroup or formGroup template. (Note: though a formGroup\n * template is much simpler, its basic structure is idential to a formGroup).\n *\n * If the optional third parameter 'returnGroup' is set to TRUE, the group\n * containing the control is returned, rather than the control itself.\n *\n * @param formGroup - Angular FormGroup to get value from\n * @param dataPointer - JSON Pointer (string or array)\n * @param returnGroup - If true, return group containing control\n * @return Located value (or null, if no control found)\n */\nexport function getControl(\n  formGroup: FormGroup, dataPointer: Pointer, returnGroup = false\n) {\n  if (!isObject(formGroup) || !JsonPointer.isJsonPointer(dataPointer)) {\n    if (!JsonPointer.isJsonPointer(dataPointer)) {\n      // If dataPointer input is not a valid JSON pointer, check to\n      // see if it is instead a valid object path, using dot notaion\n      if (typeof dataPointer === 'string') {\n        const formControl = formGroup.get(dataPointer)\n        if (formControl) {\n          return formControl\n        }\n      }\n      console.error(`getControl error: Invalid JSON Pointer: ${dataPointer}`)\n    }\n    if (!isObject(formGroup)) {\n      console.error(`getControl error: Invalid formGroup: ${formGroup}`)\n    }\n    return null\n  }\n  let dataPointerArray = JsonPointer.parse(dataPointer)\n  if (returnGroup) {\n    dataPointerArray = dataPointerArray.slice(0, -1)\n  }\n\n  // If formGroup input is a real formGroup (not a formGroup template)\n  // try using formGroup.get() to return the control\n  if (typeof formGroup.get === 'function' &&\n    dataPointerArray.every(key => key.indexOf('.') === -1)\n  ) {\n    const formControl = formGroup.get(dataPointerArray.join('.'))\n    if (formControl) {\n      return formControl\n    }\n  }\n\n  // If formGroup input is a formGroup template,\n  // or formGroup.get() failed to return the control,\n  // search the formGroup object for dataPointer's control\n  let subGroup: any = formGroup\n  for (const key of dataPointerArray) {\n    if (hasOwn(subGroup, 'controls')) {\n      subGroup = subGroup.controls\n    }\n    if (isArray(subGroup) && (key === '-')) {\n      subGroup = subGroup[subGroup.length - 1]\n    } else if (hasOwn(subGroup, key)) {\n      subGroup = subGroup[key]\n    } else {\n      console.error(`getControl error: Unable to find \"${key}\" item in FormGroup.`)\n      console.error(dataPointer)\n      console.error(formGroup)\n      return\n    }\n  }\n  return subGroup\n}\n","export function isFunction(item: any): boolean {\n  return typeof item === 'function'\n}\n","import {Observable} from 'rxjs'\n\n/**\n * 'isObservable' function\n */\nexport function isObservable(object: any): object is Observable<any> {\n  return !!object && typeof object.subscribe === 'function'\n}\n","import {isArray, isObject, isString} from '../validator'\nimport {JsonPointer} from '../jsonpointer.functions'\nimport {hasOwn} from '../utility'\nimport {getSubSchema} from './getSubSchema'\nimport {removeRecursiveReferences} from './removeRecursiveReferences'\n\n/**\n * 'resolveSchemaReferences' function\n *\n * Find all $ref links in schema and save links and referenced schemas in\n * schemaRefLibrary, schemaRecursiveRefMap, and dataRecursiveRefMap\n */\nexport function resolveSchemaReferences(\n  schema: any,\n  schemaRefLibrary: any,\n  schemaRecursiveRefMap: Map<string, string>,\n  dataRecursiveRefMap: Map<string, string>,\n  arrayMap: Map<string, number>\n) {\n  if (!isObject(schema)) {\n    console.error('resolveSchemaReferences error: schema must be an object.')\n    return\n  }\n  const refLinks = new Set<string>()\n  const refMapSet = new Set<string>()\n  const refMap = new Map<string, string>()\n  const recursiveRefMap = new Map<string, string>()\n  const refLibrary: any = {}\n\n  // Search schema for all $ref links, and build full refLibrary\n  JsonPointer.forEachDeep(schema, (subSchema, subSchemaPointer) => {\n    if (hasOwn(subSchema, '$ref') && isString(subSchema.$ref)) {\n      const refPointer = JsonPointer.compile(subSchema.$ref)\n      refLinks.add(refPointer)\n      refMapSet.add(subSchemaPointer + '~~' + refPointer)\n      refMap.set(subSchemaPointer, refPointer)\n    }\n  })\n  refLinks.forEach(ref => refLibrary[ref] = getSubSchema(schema, ref))\n\n  // Follow all ref links and save in refMapSet,\n  // to find any multi-link recursive refernces\n  let checkRefLinks = true\n  while (checkRefLinks) {\n    checkRefLinks = false\n    Array.from(refMap).forEach(([fromRef1, toRef1]) => Array.from(refMap)\n      .filter(([fromRef2, toRef2]) =>\n        JsonPointer.isSubPointer(toRef1, fromRef2, true) &&\n        !JsonPointer.isSubPointer(toRef2, toRef1, true) &&\n        !refMapSet.has(fromRef1 + fromRef2.slice(toRef1.length) + '~~' + toRef2)\n      )\n      .forEach(([fromRef2, toRef2]) => {\n        refMapSet.add(fromRef1 + fromRef2.slice(toRef1.length) + '~~' + toRef2)\n        checkRefLinks = true\n      })\n    )\n  }\n\n  // Build full recursiveRefMap\n  // First pass - save all internally recursive refs from refMapSet\n  Array.from(refMapSet)\n    .map(refLink => refLink.split('~~'))\n    .filter(([fromRef, toRef]) => JsonPointer.isSubPointer(toRef, fromRef))\n    .forEach(([fromRef, toRef]) => recursiveRefMap.set(fromRef, toRef))\n  // Second pass - create recursive versions of any other refs that link to recursive refs\n  Array.from(refMap)\n    .filter(([fromRef1, toRef1]) => Array.from(recursiveRefMap.keys())\n      .every(fromRef2 => !JsonPointer.isSubPointer(fromRef1, fromRef2, true))\n    )\n    .forEach(([fromRef1, toRef1]) => Array.from(recursiveRefMap)\n      .filter(([fromRef2, toRef2]) =>\n        !recursiveRefMap.has(fromRef1 + fromRef2.slice(toRef1.length)) &&\n        JsonPointer.isSubPointer(toRef1, fromRef2, true) &&\n        !JsonPointer.isSubPointer(toRef1, fromRef1, true)\n      )\n      .forEach(([fromRef2, toRef2]) => recursiveRefMap.set(\n        fromRef1 + fromRef2.slice(toRef1.length),\n        fromRef1 + toRef2.slice(toRef1.length)\n      ))\n    )\n\n  // Create compiled schema by replacing all non-recursive $ref links with\n  // thieir linked schemas and, where possible, combining schemas in allOf arrays.\n  let compiledSchema = {...schema}\n  delete compiledSchema.definitions\n  compiledSchema =\n    getSubSchema(compiledSchema, '', refLibrary, recursiveRefMap)\n\n  // Make sure all remaining schema $refs are recursive, and build final\n  // schemaRefLibrary, schemaRecursiveRefMap, dataRecursiveRefMap, & arrayMap\n  JsonPointer.forEachDeep(compiledSchema, (subSchema, subSchemaPointer) => {\n    if (isString(subSchema.$ref)) {\n      let refPointer = JsonPointer.compile(subSchema.$ref)\n      if (!JsonPointer.isSubPointer(refPointer, subSchemaPointer, true)) {\n        refPointer = removeRecursiveReferences(subSchemaPointer, recursiveRefMap)\n        JsonPointer.set(compiledSchema, subSchemaPointer, {$ref: `#${refPointer}`})\n      }\n      if (!hasOwn(schemaRefLibrary, 'refPointer')) {\n        schemaRefLibrary[refPointer] = !refPointer.length ? compiledSchema :\n          getSubSchema(compiledSchema, refPointer, schemaRefLibrary, recursiveRefMap)\n      }\n      if (!schemaRecursiveRefMap.has(subSchemaPointer)) {\n        schemaRecursiveRefMap.set(subSchemaPointer, refPointer)\n      }\n      const fromDataRef = JsonPointer.toDataPointer(subSchemaPointer, compiledSchema) as any\n      if (!dataRecursiveRefMap.has(fromDataRef)) {\n        const toDataRef = JsonPointer.toDataPointer(refPointer, compiledSchema) as any\n        dataRecursiveRefMap.set(fromDataRef, toDataRef)\n      }\n    }\n    if (subSchema.type === 'array' &&\n      (hasOwn(subSchema, 'items') || hasOwn(subSchema, 'additionalItems'))\n    ) {\n      const dataPointer = JsonPointer.toDataPointer(subSchemaPointer, compiledSchema) as any\n      if (!arrayMap.has(dataPointer)) {\n        const tupleItems = isArray(subSchema.items) ? subSchema.items.length : 0\n        arrayMap.set(dataPointer, tupleItems)\n      }\n    }\n  }, true)\n  return compiledSchema\n}\n","import {isPromise} from './isPromise'\n\n/**\n * 'toPromise' function\n */\nexport function toPromise(object: object): Promise<any> {\n  return isPromise(object) ? object : toPromise.call(object)\n}\n"]}