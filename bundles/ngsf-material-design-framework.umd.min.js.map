{"version":3,"sources":["ng://@ngsf/material-design-framework/lib/components/flex-layout-root.component.ts","ng://@ngsf/material-design-framework/lib/components/flex-layout-section.component.ts","ng://@ngsf/material-design-framework/lib/components/material-add-reference.component.ts","ng://@ngsf/material-design-framework/lib/components/material-button.component.ts","ng://@ngsf/material-design-framework/lib/components/material-button-group.component.ts","ng://@ngsf/material-design-framework/lib/components/material-checkbox.component.ts","ng://@ngsf/material-design-framework/lib/components/material-checkboxes.component.ts","ng://@ngsf/material-design-framework/lib/components/material-chip-list.component.ts","ng://@ngsf/material-design-framework/lib/components/material-datepicker.component.ts","ng://@ngsf/material-design-framework/lib/components/material-file.component.ts","ng://@ngsf/material-design-framework/lib/components/material-input.component.ts","ng://@ngsf/material-design-framework/lib/components/material-number.component.ts","ng://@ngsf/material-design-framework/lib/components/material-one-of.component.ts","ng://@ngsf/material-design-framework/lib/components/material-radios.component.ts","ng://@ngsf/material-design-framework/lib/components/material-select.component.ts","ng://@ngsf/material-design-framework/lib/components/material-slider.component.ts","ng://@ngsf/material-design-framework/lib/components/material-stepper.component.ts","ng://@ngsf/material-design-framework/lib/components/material-tabs.component.ts","ng://@ngsf/material-design-framework/lib/components/material-textarea.component.ts","ng://@ngsf/material-design-framework/lib/components/material-design-framework.component.ts","ng://@ngsf/material-design-framework/lib/material-design.framework.ts","ng://@ngsf/material-design-framework/lib/material-design-framework.module.ts"],"names":["FlexLayoutRootComponent","jsf","this","isFlexItem","prototype","removeItem","item","getFlexAttribute","node","attribute","index","indexOf","options","flex","split","showWidget","layoutNode","evaluateCondition","dataIndex","JsonSchemaFormService","__decorate","Input","Component","selector","template","changeDetection","ChangeDetectionStrategy","Default","FlexLayoutSectionComponent","controlDisabled","boundControl","expanded","containerType","Object","defineProperty","notitle","setItemTitle","ngOnInit","initializeControl","expandable","type","toggleExpanded","flexActive","displayFlex","display","fxLayout","fxLayoutWrap","__decorate$1","MaterialAddReferenceComponent","arrayItem","layoutIndex","length","maxItems","parent","slice","getParentNode","add","setArrayItemTitle","itemCount","addItem","event","preventDefault","__decorate$2","MaterialButtonComponent","_this","hasOwn","disabled","formOptions","disableInvalidSubmit","isValid","isValidChanges","subscribe","updateValue","onClick","target","value","__decorate$3","MaterialButtonGroupComponent","radiosList","vertical","buildTitleMap","titleMap","enumNames","enum","showErrors","__decorate$4","MaterialCheckboxComponent","trueValue","falseValue","showSlideToggle","getFormControlValue","readonly","controlValue","undefined","format","checked","__decorate$5","MaterialCheckboxesComponent","horizontalList","checkboxList","filter","t","checkedItems","formArray","getFormControl","_b","__values","_c","next","done","checkboxItem","includes","updateArrayCheckboxList","updateAllValues","forEach","__decorate$6","MaterialChipListComponent","__decorate$7","MaterialDatepickerComponent","autoCompleteList","setControlDate","description","placeholder","ngOnChanges","dateString","dateValue","stringToDate","dateToString","__decorate$8","MaterialFileComponent","__decorate$9","MaterialInputComponent","__decorate$a","MaterialNumberComponent","allowNegative","allowDecimal","allowExponents","lastValidNumber","dataType","__decorate$b","MaterialOneOfComponent","__decorate$c","MaterialRadiosComponent","flexDirection","__decorate$d","MaterialSelectComponent","selectList","isArray","required","flatList","__decorate$e","MaterialSliderComponent","__decorate$f","MaterialStepperComponent","__decorate$g","MaterialTabsComponent","selectedItem","showAddTab","items","updateControl","select","concat","lastItem","setTabTitle","__decorate$h","MaterialTextareaComponent","__decorate$i","MaterialDesignFrameworkComponent","changeDetector","frameworkInitialized","formControl","parentArray","isOrderable","dynamicTitle","widgetOptions","removable","recursiveReference","minItems","arrayItemType","initializeFramework","updateTitle","_.cloneDeep","widgetLayoutNode","__assign","isDefined","minimum","maximum","multipleOf","test","title","orderable","parseText","getFormControlGroup","ChangeDetectorRef","__decorate$j","MaterialDesignFramework","_super","apply","arguments","name","framework","stylesheets","widgets","root","section","$ref","button","button-group","checkbox","checkboxes","chip-list","date","file","number","one-of","radios","slider","stepper","tabs","text","textarea","alt-date","any-of","card","color","expansion-panel","hidden","image","integer","radiobuttons","range","submit","tagsinput","wizard","__extends","__decorate$k","Injectable","Framework","MaterialDesignFrameworkModule","forRoot","ngModule","MaterialDesignFrameworkModule_1","providers","provide","useClass","multi","__decorate$l","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatAutocompleteModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatDatepickerModule","MatExpansionModule","MatFormFieldModule","MatIconModule","MatInputModule","MatNativeDateModule","MatRadioModule","MatSelectModule","MatSliderModule","MatSlideToggleModule","MatStepperModule","MatTabsModule","MatTooltipModule","WidgetLibraryModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import {ChangeDetectionStrategy, Component, Input} from '@angular/core'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'flex-layout-root-widget',\n  template: `\n      <div *ngFor=\"let layoutNode of layout; let i = index\"\n           [class.form-flex-item]=\"isFlexItem\"\n           [style.flex-grow]=\"getFlexAttribute(layoutNode, 'flex-grow')\"\n           [style.flex-shrink]=\"getFlexAttribute(layoutNode, 'flex-shrink')\"\n           [style.flex-basis]=\"getFlexAttribute(layoutNode, 'flex-basis')\"\n           [style.align-self]=\"(layoutNode?.options || {})['align-self']\"\n           [style.order]=\"layoutNode?.options?.order\"\n           [fxFlex]=\"layoutNode?.options?.fxFlex\"\n           [fxFlexOrder]=\"layoutNode?.options?.fxFlexOrder\"\n           [fxFlexOffset]=\"layoutNode?.options?.fxFlexOffset\"\n           [fxFlexAlign]=\"layoutNode?.options?.fxFlexAlign\">\n          <select-framework-widget *ngIf=\"showWidget(layoutNode)\"\n                                   [dataIndex]=\"layoutNode?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n                                   [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n                                   [layoutNode]=\"layoutNode\"></select-framework-widget>\n          </div>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class FlexLayoutRootComponent {\n  @Input() dataIndex: number[]\n  @Input() layoutIndex: number[]\n  @Input() layout: any[]\n  @Input() isFlexItem = false\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  removeItem(item) {\n    this.jsf.removeItem(item)\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in flex-layout-section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute)\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index]\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'flex-layout-section-widget',\n  template: `\n      <div *ngIf=\"containerType === 'div'\"\n           [class]=\"options?.htmlClass || ''\"\n           [class.expandable]=\"options?.expandable && !expanded\"\n           [class.expanded]=\"options?.expandable && expanded\">\n          <label *ngIf=\"sectionTitle\"\n                 [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                 [innerHTML]=\"sectionTitle\"\n                 (click)=\"toggleExpanded()\"></label>\n          <flex-layout-root-widget *ngIf=\"expanded\"\n                                   [layout]=\"layoutNode.items\"\n                                   [dataIndex]=\"dataIndex\"\n                                   [layoutIndex]=\"layoutIndex\"\n                                   [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                   [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                   [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                   [style.display]=\"getFlexAttribute('display')\"\n                                   [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                   [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                   [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                   [style.align-items]=\"getFlexAttribute('align-items')\"\n                                   [style.align-content]=\"getFlexAttribute('align-content')\"\n                                   [fxLayout]=\"getFlexAttribute('layout')\"\n                                   [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                   [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                   [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>\n\n      <fieldset *ngIf=\"containerType === 'fieldset'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\"\n                [disabled]=\"options?.readonly\">\n          <legend *ngIf=\"sectionTitle\"\n                  [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                  [innerHTML]=\"sectionTitle\"\n                  (click)=\"toggleExpanded()\"></legend>\n          <flex-layout-root-widget *ngIf=\"expanded\"\n                                   [layout]=\"layoutNode.items\"\n                                   [dataIndex]=\"dataIndex\"\n                                   [layoutIndex]=\"layoutIndex\"\n                                   [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                   [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                   [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                   [style.display]=\"getFlexAttribute('display')\"\n                                   [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                   [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                   [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                   [style.align-items]=\"getFlexAttribute('align-items')\"\n                                   [style.align-content]=\"getFlexAttribute('align-content')\"\n                                   [fxLayout]=\"getFlexAttribute('layout')\"\n                                   [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                   [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                   [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </fieldset>\n\n      <mat-card *ngIf=\"containerType === 'card'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\">\n          <mat-card-header *ngIf=\"sectionTitle\">\n              <legend\n                      [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                      [innerHTML]=\"sectionTitle\"\n                      (click)=\"toggleExpanded()\"></legend>\n          </mat-card-header>\n          <mat-card-content *ngIf=\"expanded\">\n              <fieldset [disabled]=\"options?.readonly\">\n                  <flex-layout-root-widget *ngIf=\"expanded\"\n                                           [layout]=\"layoutNode.items\"\n                                           [dataIndex]=\"dataIndex\"\n                                           [layoutIndex]=\"layoutIndex\"\n                                           [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                           [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                           [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                           [style.display]=\"getFlexAttribute('display')\"\n                                           [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                           [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                           [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                           [style.align-items]=\"getFlexAttribute('align-items')\"\n                                           [style.align-content]=\"getFlexAttribute('align-content')\"\n                                           [fxLayout]=\"getFlexAttribute('layout')\"\n                                           [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                           [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                           [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n              </fieldset>\n          </mat-card-content>\n          <mat-card-footer>\n              <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                         [innerHTML]=\"options?.errorMessage\"></mat-error>\n          </mat-card-footer>\n      </mat-card>\n\n      <mat-expansion-panel *ngIf=\"containerType === 'expansion-panel'\"\n                           [expanded]=\"expanded\"\n                           [hideToggle]=\"!options?.expandable\">\n          <mat-expansion-panel-header>\n              <mat-panel-title>\n                  <legend *ngIf=\"sectionTitle\"\n                          [class]=\"options?.labelHtmlClass\"\n                          [innerHTML]=\"sectionTitle\"\n                          (click)=\"toggleExpanded()\"></legend>\n              </mat-panel-title>\n          </mat-expansion-panel-header>\n          <fieldset [disabled]=\"options?.readonly\">\n              <flex-layout-root-widget *ngIf=\"expanded\"\n                                       [layout]=\"layoutNode.items\"\n                                       [dataIndex]=\"dataIndex\"\n                                       [layoutIndex]=\"layoutIndex\"\n                                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                       [style.display]=\"getFlexAttribute('display')\"\n                                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                       [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                                       [fxLayout]=\"getFlexAttribute('layout')\"\n                                       [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                       [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                       [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          </fieldset>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </mat-expansion-panel>`,\n  styles: [`\n      fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n      }\n\n      .legend {\n          font-weight: bold;\n      }\n\n      .expandable > .legend:before {\n          content: '▶';\n          padding-right: .3em;\n      }\n\n      .expanded > .legend:before {\n          content: '▼';\n          padding-right: .2em;\n      }\n  `],\n})\nexport class FlexLayoutSectionComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  expanded = true\n  containerType = 'div'\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this)\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n    this.options = this.layoutNode.options || {}\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable\n    switch (this.layoutNode.type) {\n      case 'section':\n      case 'array':\n      case 'fieldset':\n      case 'advancedfieldset':\n      case 'authfieldset':\n      case 'optionfieldset':\n      case 'selectfieldset':\n        this.containerType = 'fieldset'\n        break\n      case 'card':\n        this.containerType = 'card'\n        break\n      case 'expansion-panel':\n        this.containerType = 'expansion-panel'\n        break\n      default: // 'div', 'flex', 'tab', 'conditional', 'actions'\n        this.containerType = 'div'\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) {\n      this.expanded = !this.expanded\n    }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in flex-layout-root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex'\n    // if (attribute !== 'flex' && !flexActive) { return null; }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive\n      case 'display':\n        return flexActive ? 'flex' : 'initial'\n      case 'flex-direction':\n      case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute)\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index]\n      case 'justify-content':\n      case 'align-items':\n      case 'align-content':\n        return this.options[attribute]\n      case 'layout':\n        return (this.options.fxLayout || 'row') +\n        this.options.fxLayoutWrap ? ' ' + this.options.fxLayoutWrap : ''\n    }\n  }\n}\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-add-reference-widget',\n  template: `\n      <section [class]=\"options?.htmlClass || ''\" align=\"end\">\n          <button mat-raised-button *ngIf=\"showAddButton\"\n                  [color]=\"options?.color || 'accent'\"\n                  [disabled]=\"options?.readonly\"\n                  (click)=\"addItem($event)\">\n              <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n              <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n          </button>\n      </section>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class MaterialAddReferenceComponent implements OnInit {\n  options: any\n  itemCount: number\n  previousLayoutIndex: number[]\n  previousDataIndex: number[]\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this),\n    }\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount)\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n\n  addItem(event) {\n    event.preventDefault()\n    this.jsf.addItem(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {hasOwn} from '@ngsf/common'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-button-widget',\n  template: `\n      <div class=\"button-row\" [class]=\"options?.htmlClass || ''\">\n          <!-- [color]=\"options?.color || 'primary'\" -->\n          <button mat-raised-button\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [disabled]=\"controlDisabled || options?.readonly\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [name]=\"controlName\"\n                  [type]=\"layoutNode?.type\"\n                  [value]=\"controlValue\"\n                  (click)=\"updateValue($event)\">\n              <mat-icon *ngIf=\"options?.icon\" class=\"mat-24\">{{options?.icon}}</mat-icon>\n              <span *ngIf=\"options?.title\" [innerHTML]=\"options?.title\"></span>\n          </button>\n      </div>`,\n  styles: [` button {\n      margin-top: 10px;\n  } `],\n})\nexport class MaterialButtonComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid\n      this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid)\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap, JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-button-group-widget',\n  template: `\n      <div>\n          <div *ngIf=\"options?.title\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id\"\n                      [class]=\"options?.labelHtmlClass || ''\"\n                      [style.display]=\"options?.notitle ? 'none' : ''\"\n                      [innerHTML]=\"options?.title\"></label>\n              [disabled]=\"controlDisabled || options?.readonly\"\n          </div>\n          <mat-button-toggle-group\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.required]=\"options?.required\"\n                  [name]=\"controlName\"\n                  [value]=\"controlValue\"\n                  [vertical]=\"!!options.vertical\">\n              <mat-button-toggle *ngFor=\"let radioItem of radiosList\"\n                                 [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                 [value]=\"radioItem?.value\"\n                                 (click)=\"updateValue(radioItem?.value)\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-button-toggle>\n          </mat-button-toggle-group>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>`,\n  styles: [` mat-error {\n      font-size: 75%;\n  } `],\n})\nexport class MaterialButtonGroupComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  radiosList: any[] = []\n  vertical = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-checkbox-widget',\n  template: `\n      <mat-checkbox *ngIf=\"boundControl && !showSlideToggle\"\n                    [formControl]=\"formControl\"\n                    align=\"left\"\n                    [color]=\"options?.color || 'primary'\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    labelPosition=\"after\"\n                    [name]=\"controlName\"\n                    (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-checkbox>\n      <mat-checkbox *ngIf=\"!boundControl && !showSlideToggle\"\n                    align=\"left\"\n                    [color]=\"options?.color || 'primary'\"\n                    [disabled]=\"controlDisabled || options?.readonly\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    labelPosition=\"after\"\n                    [name]=\"controlName\"\n                    [checked]=\"isChecked\"\n                    (blur)=\"options.showErrors = true\"\n                    (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-checkbox>\n      <mat-slide-toggle *ngIf=\"boundControl && showSlideToggle\"\n                        [formControl]=\"formControl\"\n                        align=\"left\"\n                        [color]=\"options?.color || 'primary'\"\n                        [id]=\"'control' + layoutNode?._id\"\n                        labelPosition=\"after\"\n                        [name]=\"controlName\"\n                        (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-slide-toggle>\n      <mat-slide-toggle *ngIf=\"!boundControl && showSlideToggle\"\n                        align=\"left\"\n                        [color]=\"options?.color || 'primary'\"\n                        [disabled]=\"controlDisabled || options?.readonly\"\n                        [id]=\"'control' + layoutNode?._id\"\n                        labelPosition=\"after\"\n                        [name]=\"controlName\"\n                        [checked]=\"isChecked\"\n                        (blur)=\"options.showErrors = true\"\n                        (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-slide-toggle>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  `],\n})\nexport class MaterialCheckboxComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  trueValue: any = true\n  falseValue: any = false\n  showSlideToggle = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this, !this.options.readonly)\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = false\n      this.jsf.updateValue(this, this.falseValue)\n    }\n    if (this.layoutNode.type === 'slide-toggle' ||\n      this.layoutNode.format === 'slide-toggle'\n    ) {\n      this.showSlideToggle = true\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, event.checked ? this.trueValue : this.falseValue)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap, JsonSchemaFormService, TitleMapItem} from '@ngsf/widget-library'\n\n// TODO: Change this to use a Selection List instead?\n// https://material.angular.io/components/list/overview\n\n@Component({\n  selector: 'material-checkboxes-widget',\n  template: `\n      <div>\n          <mat-checkbox type=\"checkbox\"\n                        [checked]=\"allChecked\"\n                        [color]=\"options?.color || 'primary'\"\n                        [disabled]=\"controlDisabled || options?.readonly\"\n                        [indeterminate]=\"someChecked\"\n                        [name]=\"options?.name\"\n                        (blur)=\"options.showErrors = true\"\n                        (change)=\"updateAllValues($event)\">\n              <span class=\"checkbox-name\" [innerHTML]=\"options?.name\"></span>\n          </mat-checkbox>\n          <label *ngIf=\"options?.title\"\n                 class=\"title\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [style.display]=\"options?.notitle ? 'none' : ''\"\n                 [innerHTML]=\"options?.title\"></label>\n          <ul class=\"checkbox-list\" [class.horizontal-list]=\"horizontalList\">\n              <li *ngFor=\"let checkboxItem of checkboxList\"\n                  [class]=\"options?.htmlClass || ''\">\n                  <mat-checkbox type=\"checkbox\"\n                                [(ngModel)]=\"checkboxItem.checked\"\n                                [color]=\"options?.color || 'primary'\"\n                                [disabled]=\"controlDisabled || options?.readonly\"\n                                [name]=\"checkboxItem?.name\"\n                                (blur)=\"options.showErrors = true\"\n                                (change)=\"updateValue()\">\n                      <span class=\"checkbox-name\" [innerHTML]=\"checkboxItem?.name\"></span>\n                  </mat-checkbox>\n              </li>\n          </ul>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>`,\n  styles: [`\n      .title {\n          font-weight: bold;\n      }\n\n      .checkbox-list {\n          list-style-type: none;\n      }\n\n      .horizontal-list > li {\n          display: inline-block;\n          margin-right: 10px;\n          zoom: 1;\n      }\n\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  `],\n})\nexport class MaterialCheckboxesComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  horizontalList = false\n  formArray: AbstractControl\n  checkboxList: TitleMapItem[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get allChecked(): boolean {\n    return this.checkboxList.filter(t => t.checked).length === this.checkboxList.length\n  }\n\n  get someChecked(): boolean {\n    const checkedItems = this.checkboxList.filter(t => t.checked).length\n    return checkedItems > 0 && checkedItems < this.checkboxList.length\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.horizontalList = this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons'\n    this.jsf.initializeControl(this)\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    )\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this)\n      for (const checkboxItem of this.checkboxList) {\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value)\n      }\n    }\n  }\n\n  updateValue() {\n    this.options.showErrors = true\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList)\n    }\n  }\n\n  updateAllValues(event: any) {\n    this.options.showErrors = true\n    this.checkboxList.forEach(t => t.checked = event.checked)\n    this.updateValue()\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-chip-list-widget',\n  template: ``,\n})\nexport class MaterialChipListComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnChanges, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {dateToString, stringToDate} from '@ngsf/common'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-datepicker-widget',\n  template: `\n      <mat-form-field [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [max]=\"options?.maximum\"\n                 [matDatepicker]=\"picker\"\n                 [min]=\"options?.minimum\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [disabled]=\"controlDisabled || options?.readonly\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [max]=\"options?.maximum\"\n                 [matDatepicker]=\"picker\"\n                 [min]=\"options?.minimum\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [value]=\"dateValue\"\n                 (blur)=\"options.showErrors = true\"\n                 (change)=\"updateValue($event)\"\n                 (input)=\"updateValue($event)\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      </mat-form-field>\n      <mat-datepicker #picker></mat-datepicker>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialDatepickerComponent implements OnInit, OnChanges {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  dateValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  autoCompleteList: string[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this, !this.options.readonly)\n    this.setControlDate(this.controlValue)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  ngOnChanges() {\n    this.setControlDate(this.controlValue)\n  }\n\n  setControlDate(dateString: string) {\n    this.dateValue = stringToDate(dateString)\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, dateToString(event, this.options))\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-file-widget',\n  template: ``,\n})\nexport class MaterialFileComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-input-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.maxlength]=\"options?.maxLength\"\n                 [attr.minlength]=\"options?.minLength\"\n                 [attr.pattern]=\"options?.pattern\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"layoutNode?.type\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.maxlength]=\"options?.maxLength\"\n                 [attr.minlength]=\"options?.minLength\"\n                 [attr.pattern]=\"options?.pattern\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"layoutNode?.type\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\"\n                 (blur)=\"options.showErrors = true\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n          <mat-autocomplete *ngIf=\"options?.typeahead?.source\">\n              <mat-option *ngFor=\"let word of options?.typeahead?.source\"\n                          [value]=\"word\">{{word}}</mat-option>\n          </mat-autocomplete>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialInputComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: string\n  controlDisabled = false\n  boundControl = false\n  options: any\n  autoCompleteList: string[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-number-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"'number'\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"'number'\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\"\n                 (blur)=\"options.showErrors = true\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"layoutNode?.type === 'range'\" align=\"start\"\n                    [innerHTML]=\"controlValue\"></mat-hint>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialNumberComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  allowNegative = true\n  allowDecimal = true\n  allowExponents = false\n  lastValidNumber = ''\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.layoutNode.dataType === 'integer') {\n      this.allowDecimal = false\n    }\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-one-of-widget',\n  template: ``,\n})\nexport class MaterialOneOfComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap, JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-radios-widget',\n  template: `\n      <div>\n          <div *ngIf=\"options?.title\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id\"\n                      [class]=\"options?.labelHtmlClass || ''\"\n                      [style.display]=\"options?.notitle ? 'none' : ''\"\n                      [innerHTML]=\"options?.title\"></label>\n          </div>\n          <mat-radio-group *ngIf=\"boundControl\"\n                           [formControl]=\"formControl\"\n                           [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                           [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                           [attr.required]=\"options?.required\"\n                           [style.flex-direction]=\"flexDirection\"\n                           [name]=\"controlName\"\n                           (blur)=\"options.showErrors = true\">\n              <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n                                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                [value]=\"radioItem?.value\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-radio-group *ngIf=\"!boundControl\"\n                           [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                           [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                           [attr.required]=\"options?.required\"\n                           [style.flex-direction]=\"flexDirection\"\n                           [disabled]=\"controlDisabled || options?.readonly\"\n                           [name]=\"controlName\"\n                           [value]=\"controlValue\">\n              <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n                                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                [value]=\"radioItem?.value\"\n                                (click)=\"updateValue(radioItem?.value)\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>`,\n  styles: [`\n      mat-radio-group {\n          display: inline-flex;\n      }\n\n      mat-radio-button {\n          margin: 2px;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  `]\n})\nexport class MaterialRadiosComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  flexDirection = 'column'\n  radiosList: any[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    if (this.layoutNode.type === 'radios-inline') {\n      this.flexDirection = 'row'\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    )\n    this.jsf.initializeControl(this, !this.options.readonly)\n  }\n\n  updateValue(value) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {isArray} from '@ngsf/common'\nimport {buildTitleMap, JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-select-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <mat-select *ngIf=\"boundControl\"\n                      [formControl]=\"formControl\"\n                      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                      [attr.name]=\"controlName\"\n                      [id]=\"'control' + layoutNode?._id\"\n                      [multiple]=\"options?.multiple\"\n                      [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                      [required]=\"options?.required\"\n                      [style.width]=\"'100%'\"\n                      (blur)=\"options.showErrors = true\">\n              <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n                  <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n                              [value]=\"selectItem?.value\">\n                      <span [innerHTML]=\"selectItem?.name\"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n                                [label]=\"selectItem?.group\">\n                      <mat-option *ngFor=\"let subItem of selectItem.items\"\n                                  [value]=\"subItem?.value\">\n                          <span [innerHTML]=\"subItem?.name\"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <mat-select *ngIf=\"!boundControl\"\n                      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                      [attr.name]=\"controlName\"\n                      [disabled]=\"controlDisabled || options?.readonly\"\n                      [id]=\"'control' + layoutNode?._id\"\n                      [multiple]=\"options?.multiple\"\n                      [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                      [required]=\"options?.required\"\n                      [style.width]=\"'100%'\"\n                      [value]=\"controlValue\"\n                      (blur)=\"options.showErrors = true\"\n                      (selectionChange)=\"updateValue($event)\">\n              <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n                  <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n                              [attr.selected]=\"selectItem?.value === controlValue\"\n                              [value]=\"selectItem?.value\">\n                      <span [innerHTML]=\"selectItem?.name\"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n                                [label]=\"selectItem?.group\">\n                      <mat-option *ngFor=\"let subItem of selectItem.items\"\n                                  [attr.selected]=\"subItem?.value === controlValue\"\n                                  [value]=\"subItem?.value\">\n                          <span [innerHTML]=\"subItem?.name\"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialSelectComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  selectList: any[] = []\n  isArray = isArray\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    )\n    this.jsf.initializeControl(this, !this.options.readonly)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, event.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-slider-widget',\n  template: `\n      <mat-slider thumbLabel *ngIf=\"boundControl\"\n                  [formControl]=\"formControl\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [max]=\"options?.maximum\"\n                  [min]=\"options?.minimum\"\n                  [step]=\"options?.multipleOf || options?.step || 'any'\"\n                  [style.width]=\"'100%'\"\n                  (blur)=\"options.showErrors = true\"></mat-slider>\n      <mat-slider thumbLabel *ngIf=\"!boundControl\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [disabled]=\"controlDisabled || options?.readonly\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [max]=\"options?.maximum\"\n                  [min]=\"options?.minimum\"\n                  [step]=\"options?.multipleOf || options?.step || 'any'\"\n                  [style.width]=\"'100%'\"\n                  [value]=\"controlValue\"\n                  (blur)=\"options.showErrors = true\"\n                  (change)=\"updateValue($event)\"></mat-slider>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [` mat-error {\n      font-size: 75%;\n  } `],\n})\nexport class MaterialSliderComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  allowNegative = true\n  allowDecimal = true\n  allowExponents = false\n  lastValidNumber = ''\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this, !this.options.readonly)\n  }\n\n  updateValue(event) {\n    this.options.showErrors = true\n    this.jsf.updateValue(this, event.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'material-stepper-widget',\n  template: ``,\n})\nexport class MaterialStepperComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-tabs-widget',\n  template: `\n      <nav mat-tab-nav-bar\n           [attr.aria-label]=\"options?.label || options?.title || ''\"\n           [style.width]=\"'100%'\">\n          <a mat-tab-link *ngFor=\"let item of layoutNode?.items; let i = index\"\n             [active]=\"selectedItem === i\"\n             (click)=\"select(i)\">\n          <span *ngIf=\"showAddTab || item.type !== '$ref'\"\n                [innerHTML]=\"setTabTitle(item, i)\"></span>\n          </a>\n      </nav>\n      <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n           [class]=\"options?.htmlClass || ''\">\n          <select-framework-widget *ngIf=\"selectedItem === i\"\n                                   [class]=\"(options?.fieldHtmlClass || '') + ' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')\"\n                                   [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n                                   [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n                                   [layoutNode]=\"layoutItem\"></select-framework-widget>\n      </div>`,\n  styles: [` a {\n      cursor: pointer;\n  } `],\n})\nexport class MaterialTabsComponent implements OnInit {\n  options: any\n  itemCount: number\n  selectedItem = 0\n  showAddTab = true\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.itemCount = this.layoutNode.items.length - 1\n    this.updateControl()\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      })\n      this.updateControl()\n    }\n    this.selectedItem = index\n  }\n\n  updateControl() {\n    this.itemCount = this.layoutNode.items.length - 1\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1]\n    this.showAddTab = lastItem.type === '$ref' &&\n      this.itemCount < (lastItem.options.maxItems || 1000)\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-textarea-widget',\n  template: `\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <textarea matInput *ngIf=\"boundControl\"\n                    [formControl]=\"formControl\"\n                    [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                    [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                    [attr.maxlength]=\"options?.maxLength\"\n                    [attr.minlength]=\"options?.minLength\"\n                    [attr.pattern]=\"options?.pattern\"\n                    [required]=\"options?.required\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    [name]=\"controlName\"\n                    [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                    [readonly]=\"options?.readonly ? 'readonly' : null\"\n                    [style.width]=\"'100%'\"\n                    (blur)=\"options.showErrors = true\"></textarea>\n          <textarea matInput *ngIf=\"!boundControl\"\n                    [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                    [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                    [attr.maxlength]=\"options?.maxLength\"\n                    [attr.minlength]=\"options?.minLength\"\n                    [attr.pattern]=\"options?.pattern\"\n                    [required]=\"options?.required\"\n                    [disabled]=\"controlDisabled\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    [name]=\"controlName\"\n                    [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                    [readonly]=\"options?.readonly ? 'readonly' : null\"\n                    [style.width]=\"'100%'\"\n                    [value]=\"controlValue\"\n                    (input)=\"updateValue($event)\"\n                    (blur)=\"options.showErrors = true\"></textarea>\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>`,\n  styles: [`\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  `],\n})\nexport class MaterialTextareaComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (!this.options.notitle && !this.options.description && this.options.placeholder) {\n      this.options.description = this.options.placeholder\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {ChangeDetectorRef, Component, Input, OnChanges, OnInit} from '@angular/core'\nimport * as _ from 'lodash'\nimport {isDefined} from '@ngsf/common'\nimport {JsonSchemaFormService} from '@ngsf/widget-library'\n\n@Component({\n  selector: 'material-design-framework',\n  template: `\n      <div\n              [class.array-item]=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"\n              [orderable]=\"isOrderable\"\n              [dataIndex]=\"dataIndex\"\n              [layoutIndex]=\"layoutIndex\"\n              [layoutNode]=\"widgetLayoutNode\">\n          <svg *ngIf=\"showRemoveButton\"\n               xmlns=\"http://www.w3.org/2000/svg\"\n               height=\"18\" width=\"18\" viewBox=\"0 0 24 24\"\n               class=\"close-button\"\n               (click)=\"removeItem()\">\n              <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"/>\n          </svg>\n          <select-widget-widget\n                  [dataIndex]=\"dataIndex\"\n                  [layoutIndex]=\"layoutIndex\"\n                  [layoutNode]=\"widgetLayoutNode\"></select-widget-widget>\n      </div>\n      <div class=\"spacer\" *ngIf=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"></div>`,\n  styles: [`\n      .array-item {\n          border-radius: 2px;\n          box-shadow: 0 3px 1px -2px rgba(0, 0, 0, .2),\n          0 2px 2px 0 rgba(0, 0, 0, .14),\n          0 1px 5px 0 rgba(0, 0, 0, .12);\n          padding: 6px;\n          position: relative;\n          transition: all 280ms cubic-bezier(.4, 0, .2, 1);\n      }\n\n      .close-button {\n          cursor: pointer;\n          position: absolute;\n          top: 6px;\n          right: 6px;\n          fill: rgba(0, 0, 0, .4);\n          visibility: hidden;\n          z-index: 500;\n      }\n\n      .close-button:hover {\n          fill: rgba(0, 0, 0, .8);\n      }\n\n      .array-item:hover > .close-button {\n          visibility: visible;\n      }\n\n      .spacer {\n          margin: 6px 0;\n      }\n\n      [draggable=true]:hover {\n          box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2),\n          0 8px 10px 1px rgba(0, 0, 0, .14),\n          0 3px 14px 2px rgba(0, 0, 0, .12);\n          cursor: move;\n          z-index: 10;\n      }\n\n      [draggable=true].drag-target-top {\n          box-shadow: 0 -2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n\n      [draggable=true].drag-target-bottom {\n          box-shadow: 0 2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n  `],\n})\nexport class MaterialDesignFrameworkComponent implements OnInit, OnChanges {\n  frameworkInitialized = false\n  inputType: string\n  options: any // Options used in this framework\n  widgetLayoutNode: any // layoutNode passed to child widget\n  widgetOptions: any // Options passed to child widget\n  formControl: any = null\n  parentArray: any = null\n  isOrderable = false\n  dynamicTitle: string = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showRemoveButton(): boolean {\n    if (!this.layoutNode || !this.widgetOptions.removable ||\n      this.widgetOptions.readonly || this.layoutNode.type === '$ref'\n    ) {\n      return false\n    }\n    if (this.layoutNode.recursiveReference) {\n      return true\n    }\n    if (!this.layoutNode.arrayItem || !this.parentArray) {\n      return false\n    }\n    // If array length <= minItems, don't allow removing any items\n    return this.parentArray.items.length - 1 <= this.parentArray.options.minItems ? false :\n      // For removable list items, allow removing any item\n      this.layoutNode.arrayItemType === 'list' ? true :\n        // For removable tuple items, only allow removing last item in list\n        this.layoutIndex[this.layoutIndex.length - 1] === this.parentArray.items.length - 2\n  }\n\n  ngOnInit() {\n    this.initializeFramework()\n  }\n\n  ngOnChanges() {\n    if (!this.frameworkInitialized) {\n      this.initializeFramework()\n    }\n    if (this.dynamicTitle) {\n      this.updateTitle()\n    }\n  }\n\n  initializeFramework() {\n    if (this.layoutNode) {\n      this.options = _.cloneDeep(this.layoutNode.options || {})\n      this.widgetLayoutNode = {\n        ...this.layoutNode,\n        options: _.cloneDeep(this.layoutNode.options || {})\n      }\n      this.widgetOptions = this.widgetLayoutNode.options\n      this.formControl = this.jsf.getFormControl(this)\n\n      if (\n        isDefined(this.widgetOptions.minimum) &&\n        isDefined(this.widgetOptions.maximum) &&\n        this.widgetOptions.multipleOf >= 1\n      ) {\n        this.layoutNode.type = 'range'\n      }\n\n      if (\n        !['$ref', 'advancedfieldset', 'authfieldset', 'button', 'card',\n          'checkbox', 'expansion-panel', 'help', 'message', 'msg', 'section',\n          'submit', 'tabarray', 'tabs'].includes(this.layoutNode.type) &&\n        /{{.+?}}/.test(this.widgetOptions.title || '')\n      ) {\n        this.dynamicTitle = this.widgetOptions.title\n        this.updateTitle()\n      }\n\n      if (this.layoutNode.arrayItem && this.layoutNode.type !== '$ref') {\n        this.parentArray = this.jsf.getParentNode(this)\n        if (this.parentArray) {\n          this.isOrderable =\n            this.parentArray.type.slice(0, 3) !== 'tab' &&\n            this.layoutNode.arrayItemType === 'list' &&\n            !this.widgetOptions.readonly &&\n            this.parentArray.options.orderable\n        }\n      }\n\n      this.frameworkInitialized = true\n    } else {\n      this.options = {}\n    }\n  }\n\n  updateTitle() {\n    this.widgetLayoutNode.options.title = this.jsf.parseText(\n      this.dynamicTitle,\n      this.jsf.getFormControlValue(this),\n      this.jsf.getFormControlGroup(this).value,\n      this.dataIndex[this.dataIndex.length - 1]\n    )\n  }\n\n  removeItem() {\n    this.jsf.removeItem(this)\n  }\n}\n","import {Injectable} from '@angular/core'\nimport {Framework} from '@ngsf/common'\n\nimport {FlexLayoutRootComponent} from './components/flex-layout-root.component'\nimport {FlexLayoutSectionComponent} from './components/flex-layout-section.component'\nimport {MaterialAddReferenceComponent} from './components/material-add-reference.component'\nimport {MaterialButtonComponent} from './components/material-button.component'\nimport {MaterialButtonGroupComponent} from './components/material-button-group.component'\nimport {MaterialCheckboxComponent} from './components/material-checkbox.component'\nimport {MaterialCheckboxesComponent} from './components/material-checkboxes.component'\nimport {MaterialChipListComponent} from './components/material-chip-list.component'\nimport {MaterialDatepickerComponent} from './components/material-datepicker.component'\nimport {MaterialFileComponent} from './components/material-file.component'\nimport {MaterialInputComponent} from './components/material-input.component'\nimport {MaterialNumberComponent} from './components/material-number.component'\nimport {MaterialOneOfComponent} from './components/material-one-of.component'\nimport {MaterialRadiosComponent} from './components/material-radios.component'\nimport {MaterialSelectComponent} from './components/material-select.component'\nimport {MaterialSliderComponent} from './components/material-slider.component'\nimport {MaterialStepperComponent} from './components/material-stepper.component'\nimport {MaterialTabsComponent} from './components/material-tabs.component'\nimport {MaterialTextareaComponent} from './components/material-textarea.component'\nimport {MaterialDesignFrameworkComponent} from './components/material-design-framework.component'\n\n@Injectable()\nexport class MaterialDesignFramework extends Framework {\n  name = 'material-design'\n\n  framework = MaterialDesignFrameworkComponent\n\n  stylesheets = [\n    '//fonts.googleapis.com/icon?family=Material+Icons',\n    '//fonts.googleapis.com/css?family=Roboto:300,400,500,700',\n  ]\n\n  widgets = {\n    root: FlexLayoutRootComponent,\n    section: FlexLayoutSectionComponent,\n    $ref: MaterialAddReferenceComponent,\n    button: MaterialButtonComponent,\n    'button-group': MaterialButtonGroupComponent,\n    checkbox: MaterialCheckboxComponent,\n    checkboxes: MaterialCheckboxesComponent,\n    'chip-list': MaterialChipListComponent,\n    date: MaterialDatepickerComponent,\n    file: MaterialFileComponent,\n    number: MaterialNumberComponent,\n    'one-of': MaterialOneOfComponent,\n    radios: MaterialRadiosComponent,\n    select: MaterialSelectComponent,\n    slider: MaterialSliderComponent,\n    stepper: MaterialStepperComponent,\n    tabs: MaterialTabsComponent,\n    text: MaterialInputComponent,\n    textarea: MaterialTextareaComponent,\n    'alt-date': 'date',\n    'any-of': 'one-of',\n    card: 'section',\n    color: 'text',\n    'expansion-panel': 'section',\n    hidden: 'none',\n    image: 'none',\n    integer: 'number',\n    radiobuttons: 'button-group',\n    range: 'slider',\n    submit: 'button',\n    tagsinput: 'chip-list',\n    wizard: 'stepper',\n  }\n}\n","// import { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport {NgModule, ModuleWithProviders} from '@angular/core'\nimport {CommonModule} from '@angular/common'\nimport {WidgetLibraryModule} from '@ngsf/widget-library'\nimport {Framework} from '@ngsf/common'\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\nimport {FlexLayoutModule} from '@angular/flex-layout'\nimport {FlexLayoutRootComponent} from './components/flex-layout-root.component'\nimport {FlexLayoutSectionComponent} from './components/flex-layout-section.component'\nimport {MaterialAddReferenceComponent} from './components/material-add-reference.component'\nimport {MaterialButtonComponent} from './components/material-button.component'\nimport {MaterialButtonGroupComponent} from './components/material-button-group.component'\nimport {MaterialCheckboxComponent} from './components/material-checkbox.component'\nimport {MaterialCheckboxesComponent} from './components/material-checkboxes.component'\nimport {MaterialChipListComponent} from './components/material-chip-list.component'\nimport {MaterialDatepickerComponent} from './components/material-datepicker.component'\nimport {MaterialFileComponent} from './components/material-file.component'\nimport {MaterialInputComponent} from './components/material-input.component'\nimport {MaterialNumberComponent} from './components/material-number.component'\nimport {MaterialOneOfComponent} from './components/material-one-of.component'\nimport {MaterialRadiosComponent} from './components/material-radios.component'\nimport {MaterialSelectComponent} from './components/material-select.component'\nimport {MaterialSliderComponent} from './components/material-slider.component'\nimport {MaterialStepperComponent} from './components/material-stepper.component'\nimport {MaterialTabsComponent} from './components/material-tabs.component'\nimport {MaterialTextareaComponent} from './components/material-textarea.component'\nimport {MaterialDesignFrameworkComponent} from './components/material-design-framework.component'\n\nimport {MaterialDesignFramework} from './material-design.framework'\n\nimport {MatAutocompleteModule} from '@angular/material/autocomplete'\nimport {MatButtonModule} from '@angular/material/button'\nimport {MatButtonToggleModule} from '@angular/material/button-toggle'\nimport {MatCardModule} from '@angular/material/card'\nimport {MatCheckboxModule} from '@angular/material/checkbox'\nimport {MatChipsModule} from '@angular/material/chips'\nimport {MatDatepickerModule} from '@angular/material/datepicker'\nimport {MatExpansionModule} from '@angular/material/expansion'\nimport {MatFormFieldModule} from '@angular/material/form-field'\nimport {MatIconModule} from '@angular/material/icon'\nimport {MatInputModule} from '@angular/material/input'\nimport {MatNativeDateModule} from '@angular/material/core'\nimport {MatRadioModule} from '@angular/material/radio'\nimport {MatSelectModule} from '@angular/material/select'\nimport {MatSliderModule} from '@angular/material/slider'\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle'\nimport {MatStepperModule} from '@angular/material/stepper'\nimport {MatTabsModule} from '@angular/material/tabs'\nimport {MatTooltipModule} from '@angular/material/tooltip'\n\n/**\n * unused @angular/material modules:\n * MatDialogModule, MatGridListModule, MatListModule, MatMenuModule,\n * MatPaginatorModule, MatProgressBarModule, MatProgressSpinnerModule,\n * MatSidenavModule, MatSnackBarModule, MatSortModule, MatTableModule,\n * MatToolbarModule,\n */\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n\n    // ANGULAR_MATERIAL_MODULES\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatExpansionModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatNativeDateModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatTooltipModule,\n\n    WidgetLibraryModule,\n  ],\n  declarations: [\n    // MATERIAL_FRAMEWORK_COMPONENTS\n    FlexLayoutRootComponent,\n    FlexLayoutSectionComponent,\n    MaterialAddReferenceComponent,\n    MaterialOneOfComponent,\n    MaterialButtonComponent,\n    MaterialButtonGroupComponent,\n    MaterialCheckboxComponent,\n    MaterialCheckboxesComponent,\n    MaterialChipListComponent,\n    MaterialDatepickerComponent,\n    MaterialFileComponent,\n    MaterialInputComponent,\n    MaterialNumberComponent,\n    MaterialRadiosComponent,\n    MaterialSelectComponent,\n    MaterialSliderComponent,\n    MaterialStepperComponent,\n    MaterialTabsComponent,\n    MaterialTextareaComponent,\n    MaterialDesignFrameworkComponent,\n  ],\n  exports: [\n    // MATERIAL_FRAMEWORK_COMPONENTS\n    FlexLayoutRootComponent,\n    FlexLayoutSectionComponent,\n    MaterialAddReferenceComponent,\n    MaterialOneOfComponent,\n    MaterialButtonComponent,\n    MaterialButtonGroupComponent,\n    MaterialCheckboxComponent,\n    MaterialCheckboxesComponent,\n    MaterialChipListComponent,\n    MaterialDatepickerComponent,\n    MaterialFileComponent,\n    MaterialInputComponent,\n    MaterialNumberComponent,\n    MaterialRadiosComponent,\n    MaterialSelectComponent,\n    MaterialSliderComponent,\n    MaterialStepperComponent,\n    MaterialTabsComponent,\n    MaterialTextareaComponent,\n    MaterialDesignFrameworkComponent,\n  ],\n  entryComponents: [\n    // MATERIAL_FRAMEWORK_COMPONENTS\n    FlexLayoutRootComponent,\n    FlexLayoutSectionComponent,\n    MaterialAddReferenceComponent,\n    MaterialOneOfComponent,\n    MaterialButtonComponent,\n    MaterialButtonGroupComponent,\n    MaterialCheckboxComponent,\n    MaterialCheckboxesComponent,\n    MaterialChipListComponent,\n    MaterialDatepickerComponent,\n    MaterialFileComponent,\n    MaterialInputComponent,\n    MaterialNumberComponent,\n    MaterialRadiosComponent,\n    MaterialSelectComponent,\n    MaterialSliderComponent,\n    MaterialStepperComponent,\n    MaterialTabsComponent,\n    MaterialTextareaComponent,\n    MaterialDesignFrameworkComponent,\n  ],\n})\nexport class MaterialDesignFrameworkModule {\n  static forRoot(): ModuleWithProviders<MaterialDesignFrameworkModule> {\n    return {\n      ngModule: MaterialDesignFrameworkModule,\n      providers: [\n        {\n          provide: Framework,\n          useClass: MaterialDesignFramework,\n          multi: true,\n        },\n      ],\n    }\n  }\n}\n"]}