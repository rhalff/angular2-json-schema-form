{"version":3,"sources":["ng://@ngsf/widget-library/lib/services/json-schema-form.service.ts","ng://@ngsf/widget-library/lib/directives/orderable.directive.ts","ng://@ngsf/widget-library/lib/functions/buildTitleMap.ts","ng://@ngsf/widget-library/lib/components/add-reference.component.ts","ng://@ngsf/widget-library/lib/components/one-of.component.ts","ng://@ngsf/widget-library/lib/components/button.component.ts","ng://@ngsf/widget-library/lib/components/checkbox.component.ts","ng://@ngsf/widget-library/lib/components/checkboxes.component.ts","ng://@ngsf/widget-library/lib/components/file.component.ts","ng://@ngsf/widget-library/lib/components/input.component.ts","ng://@ngsf/widget-library/lib/components/message.component.ts","ng://@ngsf/widget-library/lib/components/none.component.ts","ng://@ngsf/widget-library/lib/components/number.component.ts","ng://@ngsf/widget-library/lib/components/radios.component.ts","ng://@ngsf/widget-library/lib/components/root.component.ts","ng://@ngsf/widget-library/lib/components/section.component.ts","ng://@ngsf/widget-library/lib/components/select.component.ts","ng://@ngsf/widget-library/lib/components/select-framework.component.ts","ng://@ngsf/widget-library/lib/components/select-widget.component.ts","ng://@ngsf/widget-library/lib/components/submit.component.ts","ng://@ngsf/widget-library/lib/components/tabs.component.ts","ng://@ngsf/widget-library/lib/components/template.component.ts","ng://@ngsf/widget-library/lib/components/textarea.component.ts","ng://@ngsf/widget-library/lib/services/widget-library.service.ts","ng://@ngsf/widget-library/lib/services/framework-library.service.ts","ng://@ngsf/widget-library/lib/components/hidden.component.ts","ng://@ngsf/widget-library/lib/components/tab.component.ts","ng://@ngsf/widget-library/lib/widget-library.module.ts"],"names":["JsonSchemaFormService","this","JsonFormCompatibility","ReactJsonSchemaFormCompatibility","AngularSchemaFormCompatibility","tpldata","ajvOptions","allErrors","jsonPointers","unknownFormats","ajv","Ajv","validateFormData","formValues","data","schema","layout","formGroupTemplate","formGroup","framework","validData","isValid","ajvErrors","validationErrors","dataErrors","Map","formValueSubscription","dataChanges","Subject","isValidChanges","validationErrorChanges","arrayMap","dataMap","dataRecursiveRefMap","schemaRecursiveRefMap","schemaRefLibrary","layoutRefLibrary","","templateRefLibrary","hasRootReference","language","defaultFormOptions","addSubmit","debug","disableInvalidSubmit","formDisabled","formReadonly","fieldsRequired","loadExternalAssets","pristine","errors","success","supressPropertyTitles","setSchemaDefaults","setLayoutDefaults","validateOnRender","widgets","defautWidgetOptions","listItems","addable","orderable","removable","enableErrorState","enableSuccessState","feedback","feedbackOnRender","notitle","disabled","readonly","returnEmptyFields","validationMessages","setLanguage","addMetaSchema","draft6","prototype","slice","frValidationMessages","enValidationMessages","_.cloneDeep","getData","getSchema","getLayout","resetAllValues","formOptions","buildRemoteError","_this","forEach","value","key","controls","value_1","__values","value_1_1","next","done","error","err","code","message","get","setErrors","emitEvent","console","validateData","newValue","updateSubscriptions","formatFormData","compiledErrors","dataPath","push","buildFormGroupTemplate","setValues","buildFormGroup","compileAjvSchema","unsubscribe","valueChanges","subscribe","formValue","buildLayout","widgetLibrary","setOptions","newOptions","isObject","addOptions","defaultOptions","Object","assign","globalDefaults_1","filter","suffix","hasOwn","Array","isArray","properties","removeSchema","compile","buildSchemaFromData","requireAllFields","buildSchemaFromLayout","setTpldata","newTpldata","parseText","text","values","test","replace","a","_i","arguments","length","parseExpression","expression","index","trim","indexOf","every","delimiter","pointer","JsonPointer","parseObjectPath","has","split","reduce","all","term","map","join","setArrayItemTitle","parentCtx","childNode","parentNode","layoutNode","parentValues","getFormControlValue","isArrayItem","type","getFirst","childValue","setItemTitle","ctx","options","title","name","toTitleCase","getFormControlGroup","dataIndex","evaluateCondition","arrayIndex","result","hasValue","condition","model","functionBody","Function","dynFn","e","initializeControl","bind","isEmpty","formControl","getFormControl","boundControl","controlName","getFormControlName","controlValue","controlDisabled","errorMessage","status","formatErrors","showErrors","statusChanges","_.isEqual","dataPointer","getDataPointer","addSpaces","toUpperCase","formatError","keys","toString","errorKey","errorProperty","RegExp","updateValue","setValue","markAsDirty","copyValueTo","_b","_c","item","targetControl","getControl","updateArrayCheckboxList","checkboxList","formArray","removeAt","refPointer","removeRecursiveReferences","checkboxList_1","checkboxList_1_1","checkboxItem","checked","newFormControl","isDefined","control","toKey","getLayoutArray","getLayoutPointer","getParentNode","toIndexedPointer","layoutIndex","isControlBound","controlGroup","addItem","$ref","newFormGroup","arrayItem","addControl","newLayoutNode","getLayoutNode","arrayItemType","escape","fixTitle","insert","moveArrayItem","oldIndex","newIndex","at","updateValueAndValidity","layoutArray","splice","removeItem","removeControl","remove","Injectable","OrderableDirective","elementRef","jsf","ngZone","overParentElement","overChildElement","ngOnInit","element","nativeElement","draggable","arrayLayoutIndex","runOutsideAngular","addEventListener","event","dataTransfer","effectAllowed","sourceArrayIndex","sessionStorage","setItem","preventDefault","dropEffect","getItem","classList","add","destArrayIndex","Directive","args","selector","ElementRef","NgZone","Input","buildTitleMap","titleMap","enumList","fieldRequired","flatList","newTitleMap","hasEmptyValue","_e","_f","i","includes","name_1","isString","name_2","undefined","_g","_h","name_3","_j","_k","name_4","_l","_m","name_5","some","groupTitleMap","items","__spread","__assign","group","unshift","AddReferenceComponent","defineProperty","maxItems","parent","itemCount","Component","template","changeDetection","ChangeDetectionStrategy","Default","OneOfComponent","target","ButtonComponent","onClick","CheckboxComponent","trueValue","falseValue","CheckboxesComponent","layoutOrientation","enumNames","enum","formArray_1","FileComponent","InputComponent","autoCompleteList","MessageComponent","help","helpvalue","msg","NoneComponent","NumberComponent","allowNegative","allowDecimal","allowExponents","lastValidNumber","dataType","RadiosComponent","radiosList","RootComponent","isFlexItem","isDraggable","node","isOrderable","getFlexAttribute","attribute","flex","showWidget","SectionComponent","expanded","expandable","containerType","toggleExpanded","flexActive","displayFlex","display","SelectComponent","selectList","required","SelectFrameworkComponent","componentFactory","newComponent","updateComponent","ngOnChanges","widgetContainer","createComponent","resolveComponentFactory","input","instance","ComponentFactoryResolver","ViewChild","read","ViewContainerRef","static","SelectWidgetComponent","widget","SubmitComponent","TabsComponent","selectedItem","showAddTab","updateControl","select","concat","lastItem","setTabTitle","TemplateComponent","TextareaComponent","WidgetLibraryService","defaultWidget","none","root","select-framework","select-widget","email","integer","number","password","search","tel","ur","color","date","datetime","datetime-local","month","range","time","week","checkbox","file","hidden","image","radio","reset","submit","button","textarea","checkboxes","checkboxes-inline","checkboxbuttons","radios","radios-inline","radiobuttons","section","div","fieldset","one-of","array","tabarray","tab","tabs","html","advancedfieldset","authfieldset","optionfieldset","selectfieldset","conditional","actions","tagsinput","updown","date-time","alt-datetime","alt-date","wizard","textline","registeredWidgets","frameworkWidgets","activeWidgets","setActiveWidgets","widgetName","usedAliases","setDefaultWidget","hasWidget","widgetSet","hasDefaultWidget","registerWidget","unRegisterWidget","unRegisterAllWidgets","unRegisterFrameworkWidgets","registerFrameworkWidgets","getWidget","getAllWidgets","FrameworkLibraryService","frameworks","activeFramework","frameworkLibrary","defaultFramework","setFramework","setLoadExternalAssets","hasFramework","getFramework","getFrameworkWidgets","getFrameworkStylesheets","load","stylesheets","getFrameworkScripts","scripts","Inject","Framework","decorators","HiddenComponent","TabComponent","WidgetLibraryModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","entryComponents","exports"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core'\nimport {AbstractControl, FormArray, FormGroup} from '@angular/forms'\nimport {Subject} from 'rxjs-compat/Subject'\nimport * as draft6 from 'ajv/lib/refs/json-schema-draft-06.json'\nimport Ajv from 'ajv'\nimport * as _ from 'lodash'\n\nimport {\n  fixTitle, forEach, hasOwn, toTitleCase,\n  hasValue, isArray, isDefined, isEmpty, isObject,\n  JsonPointer,\n  buildSchemaFromData, buildSchemaFromLayout, removeRecursiveReferences,\n  buildFormGroup, buildFormGroupTemplate, formatFormData, getControl,\n  buildLayout, getLayoutNode,\n  enValidationMessages,\n  frValidationMessages,\n  Framework\n} from '@ngsf/common'\nimport {ErrorMessages} from '../interfaces/error-messages'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n@Injectable()\nexport class JsonSchemaFormService {\n  JsonFormCompatibility = false\n  ReactJsonSchemaFormCompatibility = false\n  AngularSchemaFormCompatibility = false\n  tpldata: any = {}\n\n  ajvOptions: any = {allErrors: true, jsonPointers: true, unknownFormats: 'ignore'}\n  ajv: any = new Ajv(this.ajvOptions) // AJV: Another JSON Schema Validator\n\n  validateFormData: any = null // Compiled AJV function to validate active form's schema\n\n  formValues: any = {} // Internal form data (may not have correct types)\n  data: any = {} // Output form data (formValues, formatted with correct data types)\n  schema: any = {} // Internal JSON Schema\n  layout: any[] = [] // Internal form layout\n  formGroupTemplate: any = {} // Template used to create formGroup\n  formGroup: FormGroup = null // Angular formGroup, which powers the reactive form\n  framework: Framework = null // Active framework component\n  formOptions: any // Active options, used to configure the form\n\n  validData: any = null // Valid form data (or null) (=== isValid ? data : null)\n  isValid: boolean = null // Is current form data valid?\n  ajvErrors: any = null // Ajv errors for current data\n  validationErrors: any = null // Any validation errors for current data\n  dataErrors: any = new Map() //\n  formValueSubscription: any = null // Subscription to formGroup.valueChanges observable (for un- and re-subscribing)\n  dataChanges: Subject<any> = new Subject() // Form data observable\n  isValidChanges: Subject<any> = new Subject() // isValid observable\n  validationErrorChanges: Subject<any> = new Subject() // validationErrors observable\n\n  arrayMap: Map<string, number> = new Map() // Maps arrays in data object and number of tuple values\n  dataMap: Map<string, any> = new Map() // Maps paths in form data to schema and formGroup paths\n  dataRecursiveRefMap: Map<string, string> = new Map() // Maps recursive reference points in form data\n  schemaRecursiveRefMap: Map<string, string> = new Map() // Maps recursive reference points in schema\n  schemaRefLibrary: any = {} // Library of schemas for resolving schema $refs\n  layoutRefLibrary: any = {'': null} // Library of layout nodes for adding to form\n  templateRefLibrary: any = {} // Library of formGroup templates for adding to form\n  hasRootReference = false // Does the form include a recursive reference to itself?\n\n  language = 'en-US'\n\n  // Default global form options\n  defaultFormOptions: any = {\n    addSubmit: 'auto', // Add a submit button if layout does not have one?\n    // for addSubmit: true = always, false = never,\n    // 'auto' = only if layout is undefined (form is built from schema alone)\n    debug: false, // Show debugging output?\n    disableInvalidSubmit: true, // Disable submit if form invalid?\n    formDisabled: false, // Set entire form as disabled? (not editable, and disables outputs)\n    formReadonly: false, // Set entire form as read only? (not editable, but outputs still enabled)\n    fieldsRequired: false, // (set automatically) Are there any required fields in the form?\n    framework: 'no-framework', // The framework to load\n    loadExternalAssets: false, // Load external css and JavaScript for framework?\n    pristine: {errors: true, success: true},\n    supressPropertyTitles: false,\n    setSchemaDefaults: 'auto', // Set fefault values from schema?\n    // true = always set (unless overridden by layout default or formValues)\n    // false = never set\n    // 'auto' = set in addable components, and everywhere if formValues not set\n    setLayoutDefaults: 'auto', // Set fefault values from layout?\n    // true = always set (unless overridden by formValues)\n    // false = never set\n    // 'auto' = set in addable components, and everywhere if formValues not set\n    validateOnRender: 'auto', // Validate fields immediately, before they are touched?\n    // true = validate all fields immediately\n    // false = only validate fields after they are touched by user\n    // 'auto' = validate fields with values immediately, empty fields after they are touched\n    widgets: {}, // Any custom widgets to load\n    defautWidgetOptions: { // Default options for form control widgets\n      listItems: 1, // Number of list items to initially add to arrays with no default value\n      addable: true, // Allow adding items to an array or $ref point?\n      orderable: true, // Allow reordering items within an array?\n      removable: true, // Allow removing items from an array or $ref point?\n      enableErrorState: true, // Apply 'has-error' class when field fails validation?\n      // disableErrorState: false, // Don't apply 'has-error' class when field fails validation?\n      enableSuccessState: true, // Apply 'has-success' class when field validates?\n      // disableSuccessState: false, // Don't apply 'has-success' class when field validates?\n      feedback: false, // Show inline feedback icons?\n      feedbackOnRender: false, // Show errorMessage on Render?\n      notitle: false, // Hide title?\n      disabled: false, // Set control as disabled? (not editable, and excluded from output)\n      readonly: false, // Set control as read only? (not editable, but included in output)\n      returnEmptyFields: true, // return values for fields that contain no data?\n      validationMessages: {} // set by setLanguage()\n    },\n  }\n\n  constructor() {\n    this.setLanguage(this.language)\n\n    this.ajv.addMetaSchema(draft6)\n  }\n\n  setLanguage(language: string = 'en-US') {\n    this.language = language\n    const validationMessages = language.slice(0, 2) === 'fr' ?\n      frValidationMessages : enValidationMessages\n    this.defaultFormOptions.defautWidgetOptions.validationMessages =\n      _.cloneDeep(validationMessages)\n  }\n\n  getData() {\n    return this.data\n  }\n\n  getSchema() {\n    return this.schema\n  }\n\n  getLayout() {\n    return this.layout\n  }\n\n  public resetAllValues() {\n    this.JsonFormCompatibility = false\n    this.ReactJsonSchemaFormCompatibility = false\n    this.AngularSchemaFormCompatibility = false\n    this.tpldata = {}\n    this.validateFormData = null\n    this.formValues = {}\n    this.schema = {}\n    this.layout = []\n    this.formGroupTemplate = {}\n    this.formGroup = null\n    this.framework = null\n    this.data = {}\n    this.validData = null\n    this.isValid = null\n    this.validationErrors = null\n    this.arrayMap = new Map()\n    this.dataMap = new Map()\n    this.dataRecursiveRefMap = new Map()\n    this.schemaRecursiveRefMap = new Map()\n    this.layoutRefLibrary = {}\n    this.schemaRefLibrary = {}\n    this.templateRefLibrary = {}\n    this.formOptions = _.cloneDeep(this.defaultFormOptions)\n  }\n\n  /**\n   * 'buildRemoteError' function\n   *\n   * Example errors:\n   * {\n   *   last_name: [ {\n   *     message: 'Last name must start with capital letter.',\n   *     code: 'capital_letter'\n   *   } ],\n   *   email: [ {\n   *     message: 'Email must be from example.com domain.',\n   *     code: 'special_domain'\n   *   }, {\n   *     message: 'Email must contain an @ symbol.',\n   *     code: 'at_symbol'\n   *   } ]\n   * }\n   */\n  buildRemoteError(errors: ErrorMessages) {\n    forEach(errors, (value, key) => {\n      if (key in this.formGroup.controls) {\n        for (const error of value) {\n          const err = {}\n          err[error.code] = error.message\n          if (typeof key === 'string') {\n            this.formGroup.get(key).setErrors(err, {emitEvent: true})\n          } else {\n            console.error('Unhandled for error', key)\n          }\n        }\n      }\n    })\n  }\n\n  validateData(newValue: any, updateSubscriptions = true): void {\n\n    // Format raw form data to correct data types\n    this.data = formatFormData(\n      newValue, this.dataMap, this.dataRecursiveRefMap,\n      this.arrayMap, this.formOptions.returnEmptyFields\n    )\n    this.isValid = this.validateFormData(this.data)\n    this.validData = this.isValid ? this.data : null\n    const compileErrors = errors => {\n      const compiledErrors = {} as any\n      (errors || []).forEach(error => {\n        if (!compiledErrors[error.dataPath]) {\n          compiledErrors[error.dataPath] = []\n        }\n        compiledErrors[error.dataPath].push(error.message)\n      })\n      return compiledErrors\n    }\n    this.ajvErrors = this.validateFormData.errors\n    this.validationErrors = compileErrors(this.validateFormData.errors)\n    if (updateSubscriptions) {\n      this.dataChanges.next(this.data)\n      this.isValidChanges.next(this.isValid)\n      this.validationErrorChanges.next(this.ajvErrors)\n    }\n  }\n\n  buildFormGroupTemplate(formValues: any = null, setValues = true) {\n    this.formGroupTemplate = buildFormGroupTemplate(this, formValues, setValues)\n  }\n\n  buildFormGroup() {\n    this.formGroup = buildFormGroup(this.formGroupTemplate) as FormGroup\n    if (this.formGroup) {\n      this.compileAjvSchema()\n      this.validateData(this.formGroup.value)\n\n      // Set up observables to emit data and validation info when form data changes\n      if (this.formValueSubscription) {\n        this.formValueSubscription.unsubscribe()\n      }\n      this.formValueSubscription = this.formGroup.valueChanges\n        .subscribe(formValue => this.validateData(formValue))\n    }\n  }\n\n  buildLayout(widgetLibrary: any) {\n    this.layout = buildLayout(this, widgetLibrary)\n  }\n\n  setOptions(newOptions: any) {\n    if (isObject(newOptions)) {\n      const addOptions = _.cloneDeep(newOptions)\n      // Backward compatibility for 'defaultOptions' (renamed 'defautWidgetOptions')\n      if (isObject(addOptions.defaultOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defaultOptions)\n        delete addOptions.defaultOptions\n      }\n      if (isObject(addOptions.defautWidgetOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defautWidgetOptions)\n        delete addOptions.defautWidgetOptions\n      }\n      Object.assign(this.formOptions, addOptions)\n\n      // convert disableErrorState / disableSuccessState to enable...\n      const globalDefaults = this.formOptions.defautWidgetOptions\n      ;['ErrorState', 'SuccessState']\n        .filter(suffix => hasOwn(globalDefaults, 'disable' + suffix))\n        .forEach(suffix => {\n          globalDefaults['enable' + suffix] = !globalDefaults['disable' + suffix]\n          delete globalDefaults['disable' + suffix]\n        })\n    }\n  }\n\n  compileAjvSchema() {\n    if (!this.validateFormData) {\n\n      // if 'ui:order' exists in properties, move it to root before compiling with ajv\n      if (Array.isArray(this.schema.properties['ui:order'])) {\n        this.schema['ui:order'] = this.schema.properties['ui:order']\n        delete this.schema.properties['ui:order']\n      }\n      this.ajv.removeSchema(this.schema)\n      this.validateFormData = this.ajv.compile(this.schema)\n    }\n  }\n\n  buildSchemaFromData(data?: any, requireAllFields = false): any {\n    if (data) {\n      return buildSchemaFromData(data, requireAllFields)\n    }\n    this.schema = buildSchemaFromData(this.formValues, requireAllFields)\n  }\n\n  buildSchemaFromLayout(layout?: any): any {\n    if (layout) {\n      return buildSchemaFromLayout(layout)\n    }\n    this.schema = buildSchemaFromLayout(this.layout)\n  }\n\n\n  setTpldata(newTpldata: any = {}): void {\n    this.tpldata = newTpldata\n  }\n\n  parseText(\n    text = '', value: any = {}, values: any = {}, key: number | string = null\n  ): string {\n    if (!text || !/{{.+?}}/.test(text)) {\n      return text\n    }\n    return text.replace(/{{(.+?)}}/g, (...a) =>\n      this.parseExpression(a[1], value, values, key, this.tpldata)\n    )\n  }\n\n  parseExpression(\n    expression = '', value: any = {}, values: any = {},\n    key: number | string = null, tpldata: any = null\n  ) {\n    if (typeof expression !== 'string') {\n      return ''\n    }\n    const index = typeof key === 'number' ? (key + 1) + '' : (key || '')\n    expression = expression.trim()\n    if ((expression[0] === '\\'' || expression[0] === '\"') &&\n      expression[0] === expression[expression.length - 1] &&\n      expression.slice(1, expression.length - 1).indexOf(expression[0]) === -1\n    ) {\n      return expression.slice(1, expression.length - 1)\n    }\n    if (expression === 'idx' || expression === '$index') {\n      return index\n    }\n    if (expression === 'value' && !hasOwn(values, 'value')) {\n      return value\n    }\n    if (['\"', '\\'', ' ', '||', '&&', '+'].every(delimiter => expression.indexOf(delimiter) === -1)) {\n      const pointer = JsonPointer.parseObjectPath(expression)\n      return pointer[0] === 'value' && JsonPointer.has(value, pointer.slice(1)) ?\n        JsonPointer.get(value, pointer.slice(1)) :\n        pointer[0] === 'values' && JsonPointer.has(values, pointer.slice(1)) ?\n          JsonPointer.get(values, pointer.slice(1)) :\n          pointer[0] === 'tpldata' && JsonPointer.has(tpldata, pointer.slice(1)) ?\n            JsonPointer.get(tpldata, pointer.slice(1)) :\n            JsonPointer.has(values, pointer) ? JsonPointer.get(values, pointer) : ''\n    }\n    if (expression.indexOf('[idx]') > -1) {\n      expression = expression.replace(/\\[idx\\]/g, index)\n    }\n    if (expression.indexOf('[$index]') > -1) {\n      expression = expression.replace(/\\[$index\\]/g, index)\n    }\n    // TODO: Improve expression evaluation by parsing quoted strings first\n    // let expressionArray = expression.match(/([^\"']+|\"[^\"]+\"|'[^']+')/g)\n    if (expression.indexOf('||') > -1) {\n      return expression.split('||').reduce((all, term) =>\n        all || this.parseExpression(term, value, values, key, tpldata), ''\n      )\n    }\n    if (expression.indexOf('&&') > -1) {\n      return expression.split('&&').reduce((all, term) =>\n        all && this.parseExpression(term, value, values, key, tpldata), ' '\n      ).trim()\n    }\n    if (expression.indexOf('+') > -1) {\n      return expression.split('+')\n        .map(term => this.parseExpression(term, value, values, key, tpldata))\n        .join('')\n    }\n    return ''\n  }\n\n  setArrayItemTitle(\n    parentCtx: any = {}, childNode: any = null, index: number = null\n  ): string {\n    const parentNode = parentCtx.layoutNode\n    const parentValues: any = this.getFormControlValue(parentCtx)\n    const isArrayItem =\n      (parentNode.type || '').slice(-5) === 'array' && isArray(parentValues)\n    const text = JsonPointer.getFirst(\n      isArrayItem && childNode.type !== '$ref' ? [\n        [childNode, '/options/legend'],\n        [childNode, '/options/title'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend'],\n      ] : [\n        [childNode, '/options/title'],\n        [childNode, '/options/legend'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend']\n      ]\n    )\n    if (!text) {\n      return text\n    }\n    const childValue = isArray(parentValues) && index < parentValues.length ?\n      parentValues[index] : parentValues\n    return this.parseText(text, childValue, parentValues, index)\n  }\n\n  setItemTitle(ctx: any) {\n    return !ctx.options.title && /^(\\d+|-)$/.test(ctx.layoutNode.name) ?\n      null :\n      this.parseText(\n        ctx.options.title || toTitleCase(ctx.layoutNode.name),\n        this.getFormControlValue(this),\n        (this.getFormControlGroup(this) || {} as any).value,\n        ctx.dataIndex[ctx.dataIndex.length - 1]\n      )\n  }\n\n  evaluateCondition(layoutNode: any, dataIndex: number[]): boolean {\n    const arrayIndex = dataIndex && dataIndex[dataIndex.length - 1]\n    let result = true\n    if (hasValue((layoutNode.options || {}).condition)) {\n      if (typeof layoutNode.options.condition === 'string') {\n        let pointer = layoutNode.options.condition\n        if (hasValue(arrayIndex)) {\n          pointer = pointer.replace('[arrayIndex]', `[${arrayIndex}]`)\n        }\n        pointer = JsonPointer.parseObjectPath(pointer)\n        result = !!JsonPointer.get(this.data, pointer)\n        if (!result && pointer[0] === 'model') {\n          result = !!JsonPointer.get({model: this.data}, pointer)\n        }\n      } else if (typeof layoutNode.options.condition === 'function') {\n        result = layoutNode.options.condition(this.data)\n      } else if (typeof layoutNode.options.condition.functionBody === 'string') {\n        try {\n          const dynFn = new Function(\n            'model', 'arrayIndices', layoutNode.options.condition.functionBody\n          )\n          result = dynFn(this.data, dataIndex)\n        } catch (e) {\n          result = true\n          console.error('condition functionBody errored out on evaluation: ' + layoutNode.options.condition.functionBody)\n        }\n      }\n    }\n    return result\n  }\n\n  initializeControl(ctx: any, bind = true): boolean {\n    if (!isObject(ctx)) {\n      return false\n    }\n    if (isEmpty(ctx.options)) {\n      ctx.options = !isEmpty((ctx.layoutNode || {}).options) ?\n        ctx.layoutNode.options : _.cloneDeep(this.formOptions)\n    }\n    ctx.formControl = this.getFormControl(ctx)\n    ctx.boundControl = bind && !!ctx.formControl\n    if (ctx.formControl) {\n      ctx.controlName = this.getFormControlName(ctx)\n      ctx.controlValue = ctx.formControl.value\n      ctx.controlDisabled = ctx.formControl.disabled\n      ctx.options.errorMessage = ctx.formControl.status === 'VALID' ? null :\n        this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages)\n      ctx.options.showErrors = this.formOptions.validateOnRender === true ||\n        (this.formOptions.validateOnRender === 'auto' && hasValue(ctx.controlValue))\n      ctx.formControl.statusChanges.subscribe(status =>\n        ctx.options.errorMessage = status === 'VALID' ? null :\n          this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages)\n      )\n      ctx.formControl.valueChanges.subscribe(value => {\n        if (!_.isEqual(ctx.controlValue, value)) {\n          ctx.controlValue = value\n        }\n      })\n    } else {\n      ctx.controlName = ctx.layoutNode.name\n      ctx.controlValue = ctx.layoutNode.value || null\n      const dataPointer = this.getDataPointer(ctx)\n      if (bind && dataPointer) {\n        console.error(`warning: control \"${dataPointer}\" is not bound to the Angular FormGroup.`)\n      }\n    }\n    return ctx.boundControl\n  }\n\n  formatErrors(errors: any, validationMessages: any = {}): string {\n    if (isEmpty(errors)) {\n      return null\n    }\n    if (!isObject(validationMessages)) {\n      validationMessages = {}\n    }\n    const addSpaces = (value: string) => value[0].toUpperCase() + (value.slice(1) || '')\n      .replace(/([a-z])([A-Z])/g, '$1 $2').replace(/_/g, ' ')\n    const formatError = (error) => typeof error === 'object' ?\n      Object.keys(error).map(key =>\n        error[key] === true ? addSpaces(key) :\n          error[key] === false ? 'Not ' + addSpaces(key) :\n            addSpaces(key) + ': ' + formatError(error[key])\n      ).join(', ') :\n      addSpaces(error.toString())\n    const messages = []\n    return Object.keys(errors)\n    // Hide 'required' error, unless it is the only one\n      .filter(errorKey => errorKey !== 'required' || Object.keys(errors).length === 1)\n      .map(errorKey =>\n        // If validationMessages is a string, return it\n        typeof validationMessages === 'string' ? validationMessages :\n          // If custom error message is a function, return function result\n          typeof validationMessages[errorKey] === 'function' ?\n            validationMessages[errorKey](errors[errorKey]) :\n            // If custom error message is a string, replace placeholders and return\n            typeof validationMessages[errorKey] === 'string' ?\n              // Does error message have any {{property}} placeholders?\n              !/{{.+?}}/.test(validationMessages[errorKey]) ?\n                validationMessages[errorKey] :\n                // Replace {{property}} placeholders with values\n                Object.keys(errors[errorKey])\n                  .reduce((errorMessage, errorProperty) => errorMessage.replace(\n                    new RegExp('{{' + errorProperty + '}}', 'g'),\n                    errors[errorKey][errorProperty]\n                  ), validationMessages[errorKey]) :\n              // If no custom error message, return formatted error data instead\n              addSpaces(errorKey) + ' Error: ' + formatError(errors[errorKey])\n      ).join('<br>')\n  }\n\n  updateValue(ctx: any, value: any): void {\n\n    // Set value of current control\n    ctx.controlValue = value\n    if (ctx.boundControl) {\n      ctx.formControl.setValue(value)\n      ctx.formControl.markAsDirty()\n    }\n    ctx.layoutNode.value = value\n\n    // Set values of any related controls in copyValueTo array\n    if (isArray(ctx.options.copyValueTo)) {\n      for (const item of ctx.options.copyValueTo) {\n        const targetControl = getControl(this.formGroup, item)\n        if (isObject(targetControl) && typeof targetControl.setValue === 'function') {\n          targetControl.setValue(value)\n          targetControl.markAsDirty()\n        }\n      }\n    }\n  }\n\n  updateArrayCheckboxList(ctx: any, checkboxList: TitleMapItem[]): void {\n    const formArray = this.getFormControl(ctx) as FormArray\n\n    // Remove all existing items\n    while (formArray.value.length) {\n      formArray.removeAt(0)\n    }\n\n    // Re-add an item for each checked box\n    const refPointer = removeRecursiveReferences(\n      ctx.layoutNode.dataPointer + '/-', this.dataRecursiveRefMap, this.arrayMap\n    )\n    for (const checkboxItem of checkboxList) {\n      if (checkboxItem.checked) {\n        const newFormControl = buildFormGroup(this.templateRefLibrary[refPointer])\n        newFormControl.setValue(checkboxItem.value)\n        formArray.push(newFormControl)\n      }\n    }\n    formArray.markAsDirty()\n  }\n\n  getFormControl(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) {\n      return null\n    }\n    return getControl(this.formGroup, this.getDataPointer(ctx))\n  }\n\n  getFormControlValue(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) {\n      return null\n    }\n    const control = getControl(this.formGroup, this.getDataPointer(ctx))\n    return control ? control.value : null\n  }\n\n  getFormControlGroup(ctx: any): FormArray | FormGroup {\n    if (!ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer)) {\n      return null\n    }\n    return getControl(this.formGroup, this.getDataPointer(ctx), true)\n  }\n\n  getFormControlName(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return null\n    }\n    return JsonPointer.toKey(this.getDataPointer(ctx))\n  }\n\n  getLayoutArray(ctx: any): any[] {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -1)\n  }\n\n  getParentNode(ctx: any): any {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -2)\n  }\n\n  getDataPointer(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return null\n    }\n    return JsonPointer.toIndexedPointer(\n      ctx.layoutNode.dataPointer, ctx.dataIndex, this.arrayMap\n    )\n  }\n\n  getLayoutPointer(ctx: any): string {\n    if (!hasValue(ctx.layoutIndex)) {\n      return null\n    }\n    return '/' + ctx.layoutIndex.join('/items/')\n  }\n\n  isControlBound(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return false\n    }\n    const controlGroup = this.getFormControlGroup(ctx)\n    const name = this.getFormControlName(ctx)\n    return controlGroup ? hasOwn(controlGroup.controls, name) : false\n  }\n\n  addItem(ctx: any, name?: string): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.$ref) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) {\n      return false\n    }\n\n    // Create a new Angular form control from a template in templateRefLibrary\n    const newFormGroup = buildFormGroup(this.templateRefLibrary[ctx.layoutNode.$ref])\n\n    // Add the new form control to the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Add new array item to formArray\n      (this.getFormControlGroup(ctx) as any).push(newFormGroup)\n    } else { // Add new $ref item to formGroup\n      (this.getFormControlGroup(ctx) as any)\n        .addControl(name || this.getFormControlName(ctx), newFormGroup)\n    }\n\n    // Copy a new layoutNode from layoutRefLibrary\n    const newLayoutNode = getLayoutNode(ctx.layoutNode, this)\n    newLayoutNode.arrayItem = ctx.layoutNode.arrayItem\n    if (ctx.layoutNode.arrayItemType) {\n      newLayoutNode.arrayItemType = ctx.layoutNode.arrayItemType\n    } else {\n      delete newLayoutNode.arrayItemType\n    }\n    if (name) {\n      newLayoutNode.name = name\n      newLayoutNode.dataPointer += '/' + JsonPointer.escape(name)\n      newLayoutNode.options.title = fixTitle(name)\n    }\n\n    // Add the new layoutNode to the form layout\n    JsonPointer.insert(this.layout, this.getLayoutPointer(ctx), newLayoutNode)\n\n    return true\n  }\n\n  moveArrayItem(ctx: any, oldIndex: number, newIndex: number): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex) ||\n      !isDefined(oldIndex) || !isDefined(newIndex) || oldIndex === newIndex\n    ) {\n      return false\n    }\n\n    // Move item in the formArray\n    const formArray = this.getFormControlGroup(ctx) as FormArray\n    const arrayItem = formArray.at(oldIndex)\n    formArray.removeAt(oldIndex)\n    formArray.insert(newIndex, arrayItem)\n    formArray.updateValueAndValidity()\n\n    // Move layout item\n    const layoutArray = this.getLayoutArray(ctx)\n    layoutArray.splice(newIndex, 0, layoutArray.splice(oldIndex, 1)[0])\n    return true\n  }\n\n  removeItem(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) {\n      return false\n    }\n\n    // Remove the Angular form control from the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Remove array item from formArray\n      (this.getFormControlGroup(ctx) as FormArray)\n        .removeAt(ctx.dataIndex[ctx.dataIndex.length - 1])\n    } else { // Remove $ref item from formGroup\n      (this.getFormControlGroup(ctx) as FormGroup)\n        .removeControl(this.getFormControlName(ctx))\n    }\n\n    // Remove layoutNode from layout\n    JsonPointer.remove(this.layout, this.getLayoutPointer(ctx))\n    return true\n  }\n}\n","import {Directive, ElementRef, Input, NgZone, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n/**\n * OrderableDirective\n *\n * Enables array elements to be reordered by dragging and dropping.\n *\n * Only works for arrays that have at least two elements.\n *\n * Also detects arrays-within-arrays, and correctly moves either\n * the child array element or the parent array element,\n * depending on the drop targert.\n *\n * Listeners for movable element being dragged:\n * - dragstart: add 'dragging' class to element, set effectAllowed = 'move'\n * - dragover: set dropEffect = 'move'\n * - dragend: remove 'dragging' class from element\n *\n * Listeners for stationary items being dragged over:\n * - dragenter: add 'drag-target-...' classes to element\n * - dragleave: remove 'drag-target-...' classes from element\n * - drop: remove 'drag-target-...' classes from element, move dropped array item\n */\n@Directive({\n  selector: '[orderable]',\n})\nexport class OrderableDirective implements OnInit {\n  arrayLayoutIndex: string\n  element: any\n  overParentElement = false\n  overChildElement = false\n  @Input() orderable: boolean\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private elementRef: ElementRef,\n    private jsf: JsonSchemaFormService,\n    private ngZone: NgZone\n  ) {\n  }\n\n  ngOnInit() {\n    if (this.orderable && this.layoutNode && this.layoutIndex && this.dataIndex) {\n      this.element = this.elementRef.nativeElement\n      this.element.draggable = true\n      this.arrayLayoutIndex = 'move:' + this.layoutIndex.slice(0, -1).toString()\n\n      this.ngZone.runOutsideAngular(() => {\n\n        // Listeners for movable element being dragged:\n\n        this.element.addEventListener('dragstart', (event) => {\n          event.dataTransfer.effectAllowed = 'move'\n          // Hack to bypass stupid HTML drag-and-drop dataTransfer protection\n          // so drag source info will be available on dragenter\n          const sourceArrayIndex = this.dataIndex[this.dataIndex.length - 1]\n          sessionStorage.setItem(this.arrayLayoutIndex, sourceArrayIndex + '')\n        })\n\n        this.element.addEventListener('dragover', (event) => {\n          if (event.preventDefault) {\n            event.preventDefault()\n          }\n          event.dataTransfer.dropEffect = 'move'\n          return false\n        })\n\n        // Listeners for stationary items being dragged over:\n\n        this.element.addEventListener('dragenter', (event) => {\n          // Part 1 of a hack, inspired by Dragster, to simulate mouseover and mouseout\n          // behavior while dragging items - http://bensmithett.github.io/dragster/\n          if (this.overParentElement) {\n            return this.overChildElement = true\n          } else {\n            this.overParentElement = true\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          if (sourceArrayIndex !== null) {\n            if (this.dataIndex[this.dataIndex.length - 1] < +sourceArrayIndex) {\n              this.element.classList.add('drag-target-top')\n            } else if (this.dataIndex[this.dataIndex.length - 1] > +sourceArrayIndex) {\n              this.element.classList.add('drag-target-bottom')\n            }\n          }\n        })\n\n        this.element.addEventListener('dragleave', (event) => {\n          // Part 2 of the Dragster hack\n          if (this.overChildElement) {\n            this.overChildElement = false\n          } else if (this.overParentElement) {\n            this.overParentElement = false\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          if (!this.overParentElement && !this.overChildElement && sourceArrayIndex !== null) {\n            this.element.classList.remove('drag-target-top')\n            this.element.classList.remove('drag-target-bottom')\n          }\n        })\n\n        this.element.addEventListener('drop', (event) => {\n          this.element.classList.remove('drag-target-top')\n          this.element.classList.remove('drag-target-bottom')\n          // Confirm that drop target is another item in the same array as source item\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          const destArrayIndex = this.dataIndex[this.dataIndex.length - 1]\n          if (sourceArrayIndex !== null && +sourceArrayIndex !== destArrayIndex) {\n            // Move array item\n            this.jsf.moveArrayItem(this, +sourceArrayIndex, destArrayIndex)\n          }\n          sessionStorage.removeItem(this.arrayLayoutIndex)\n          return false\n        })\n      })\n    }\n  }\n}\n","import {isArray, isObject, isString, hasOwn} from '@ngsf/common'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n/**\n * 'buildTitleMap' function\n */\nexport function buildTitleMap(\n  titleMap: any,\n  enumList: any,\n  fieldRequired: boolean = true,\n  flatList: boolean = true\n): TitleMapItem[] {\n  let newTitleMap: TitleMapItem[] = []\n  let hasEmptyValue = false\n  if (titleMap) {\n    if (isArray(titleMap)) {\n      if (enumList) {\n        for (const i of Object.keys(titleMap)) {\n          if (isObject(titleMap[i])) { // JSON Form style\n            const value = titleMap[i].value\n            if (enumList.includes(value)) {\n              const name = titleMap[i].name\n              newTitleMap.push({name, value})\n              if (value === undefined || value === null) {\n                hasEmptyValue = true\n              }\n            }\n          } else if (isString(titleMap[i])) { // React Jsonschema Form style\n            if (i < enumList.length) {\n              const name = titleMap[i]\n              const value = enumList[i]\n              newTitleMap.push({name, value})\n              if (value === undefined || value === null) {\n                hasEmptyValue = true\n              }\n            }\n          }\n        }\n      } else { // If array titleMap and no enum list, just return the titleMap - Angular Schema Form style\n        newTitleMap = titleMap\n        if (!fieldRequired) {\n          hasEmptyValue = !!newTitleMap\n            .filter(i => i.value === undefined || i.value === null)\n            .length\n        }\n      }\n    } else if (enumList) { // Alternate JSON Form style, with enum list\n      for (const i of Object.keys(enumList)) {\n        const value = enumList[i]\n        if (hasOwn(titleMap, value)) {\n          const name = titleMap[value]\n          newTitleMap.push({name, value})\n          if (value === undefined || value === null) {\n            hasEmptyValue = true\n          }\n        }\n      }\n    } else { // Alternate JSON Form style, without enum list\n      for (const value of Object.keys(titleMap)) {\n        const name = titleMap[value]\n        newTitleMap.push({name, value})\n        if (value === undefined || value === null) {\n          hasEmptyValue = true\n        }\n      }\n    }\n  } else if (enumList) { // Build map from enum list alone\n    for (const i of Object.keys(enumList)) {\n      const name = enumList[i]\n      const value = enumList[i]\n      newTitleMap.push({name, value})\n      if (value === undefined || value === null) {\n        hasEmptyValue = true\n      }\n    }\n  } else { // If no titleMap and no enum list, return default map of boolean values\n    newTitleMap = [{name: 'True', value: true}, {name: 'False', value: false}]\n  }\n\n  // Does titleMap have groups?\n  if (newTitleMap.some(title => hasOwn(title, 'group'))) {\n    hasEmptyValue = false\n\n    // If flatList = true, flatten items & update name to group: name\n    if (flatList) {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (isArray(title.items)) {\n            groupTitleMap = [\n              ...groupTitleMap,\n              ...title.items.map(item =>\n                ({...item, ...{name: `${title.group}: ${item.name}`}})\n              )\n            ]\n            if (title.items.some(item => item.value === undefined || item.value === null)) {\n              hasEmptyValue = true\n            }\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            title.name = `${title.group}: ${title.name}`\n            delete title.group\n            groupTitleMap.push(title)\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true\n            }\n          }\n        } else {\n          groupTitleMap.push(title)\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true\n          }\n        }\n        return groupTitleMap\n      }, [])\n\n      // If flatList = false, combine items from matching groups\n    } else {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (title.group !== (groupTitleMap[groupTitleMap.length - 1] || {}).group) {\n            groupTitleMap.push({group: title.group, items: title.items || []})\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            groupTitleMap[groupTitleMap.length - 1].items\n              .push({name: title.name, value: title.value})\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true\n            }\n          }\n        } else {\n          groupTitleMap.push(title)\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true\n          }\n        }\n        return groupTitleMap\n      }, [])\n    }\n  }\n  if (!fieldRequired && !hasEmptyValue) {\n    newTitleMap.unshift({name: '<em>None</em>', value: null})\n  }\n  return newTitleMap\n}\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'add-reference-widget',\n  template: `\n      <button *ngIf=\"showAddButton\"\n              [class]=\"options?.fieldHtmlClass || ''\"\n              [disabled]=\"options?.readonly\"\n              (click)=\"addItem($event)\">\n          <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n          <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n      </button>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class AddReferenceComponent implements OnInit {\n  options: any\n  itemCount: number\n  previousLayoutIndex: number[]\n  previousDataIndex: number[]\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this)\n    }\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount)\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n\n  addItem(event) {\n    event.preventDefault()\n    this.jsf.addItem(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'one-of-widget',\n  template: ``,\n})\nexport class OneOfComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'button-widget',\n  template: `\n      <div\n              [class]=\"options?.htmlClass || ''\">\n          <button\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [class]=\"options?.fieldHtmlClass || ''\"\n                  [disabled]=\"controlDisabled\"\n                  [name]=\"controlName\"\n                  [type]=\"layoutNode?.type\"\n                  [value]=\"controlValue\"\n                  (click)=\"updateValue($event)\">\n        <span *ngIf=\"options?.icon || options?.title\"\n              [class]=\"options?.icon\"\n              [innerHTML]=\"options?.title\"></span>\n          </button>\n      </div>`,\n})\nexport class ButtonComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'checkbox-widget',\n  template: `\n      <label\n              [attr.for]=\"'control' + layoutNode?._id\"\n              [class]=\"options?.itemLabelHtmlClass || ''\">\n          <input *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 type=\"checkbox\">\n          <input *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [checked]=\"isChecked ? 'checked' : null\"\n                 [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [value]=\"controlValue\"\n                 type=\"checkbox\"\n                 (change)=\"updateValue($event)\">\n          <span *ngIf=\"options?.title\"\n                [style.display]=\"options?.notitle ? 'none' : ''\"\n                [innerHTML]=\"options?.title\"></span>\n      </label>`,\n})\nexport class CheckboxComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  trueValue: any = true\n  falseValue: any = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title\n    }\n  }\n\n  updateValue(event) {\n    event.preventDefault()\n    this.jsf.updateValue(this, event.target.checked ? this.trueValue : this.falseValue)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap} from '../functions/buildTitleMap'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n@Component({\n  selector: 'checkboxes-widget',\n  template: `\n      <label *ngIf=\"options?.title\"\n             [class]=\"options?.labelHtmlClass || ''\"\n             [style.display]=\"options?.notitle ? 'none' : ''\"\n             [innerHTML]=\"options?.title\"></label>\n\n      <!-- 'horizontal' = checkboxes-inline or checkboxbuttons -->\n      <div *ngIf=\"layoutOrientation === 'horizontal'\" [class]=\"options?.htmlClass || ''\">\n          <label *ngFor=\"let checkboxItem of checkboxList\"\n                 [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                 [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n              <input type=\"checkbox\"\n                     [attr.required]=\"options?.required\"\n                     [checked]=\"checkboxItem.checked\"\n                     [class]=\"options?.fieldHtmlClass || ''\"\n                     [disabled]=\"controlDisabled\"\n                     [id]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                     [name]=\"checkboxItem?.name\"\n                     [readonly]=\"options?.readonly ? 'readonly' : null\"\n                     [value]=\"checkboxItem.value\"\n                     (change)=\"updateValue($event)\">\n              <span [innerHTML]=\"checkboxItem.name\"></span>\n          </label>\n      </div>\n\n      <!-- 'vertical' = regular checkboxes -->\n      <div *ngIf=\"layoutOrientation === 'vertical'\">\n          <div *ngFor=\"let checkboxItem of checkboxList\" [class]=\"options?.htmlClass || ''\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                      [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n                  <input type=\"checkbox\"\n                         [attr.required]=\"options?.required\"\n                         [checked]=\"checkboxItem.checked\"\n                         [class]=\"options?.fieldHtmlClass || ''\"\n                         [disabled]=\"controlDisabled\"\n                         [id]=\"options?.name + '/' + checkboxItem.value\"\n                         [name]=\"checkboxItem?.name\"\n                         [readonly]=\"options?.readonly ? 'readonly' : null\"\n                         [value]=\"checkboxItem.value\"\n                         (change)=\"updateValue($event)\">\n                  <span [innerHTML]=\"checkboxItem?.name\"></span>\n              </label>\n          </div>\n      </div>`,\n})\nexport class CheckboxesComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  layoutOrientation: string\n  formArray: AbstractControl\n  checkboxList: TitleMapItem[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.layoutOrientation = (this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons') ? 'horizontal' : 'vertical'\n    this.jsf.initializeControl(this)\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    )\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this)\n      this.checkboxList.forEach(checkboxItem =>\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value)\n      )\n    }\n  }\n\n  updateValue(event) {\n    for (const checkboxItem of this.checkboxList) {\n      if (event.target.value === checkboxItem.value) {\n        checkboxItem.checked = event.target.checked\n      }\n    }\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'file-widget',\n  template: ``,\n})\nexport class FileComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'input-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <input *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\">\n      <input *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">\n        <datalist *ngIf=\"options?.typeahead?.source\"\n          [id]=\"'control' + layoutNode?._id + 'Autocomplete'\">\n          <option *ngFor=\"let word of options?.typeahead?.source\" [value]=\"word\">\n        </datalist>\n    </div>`,\n})\nexport class InputComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: string\n  controlDisabled = false\n  boundControl = false\n  options: any\n  autoCompleteList: string[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'message-widget',\n  template: `\n    <span *ngIf=\"message\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [innerHTML]=\"message\"></span>`,\n})\nexport class MessageComponent implements OnInit {\n  options: any\n  message: string = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.message = this.options.help || this.options.helpvalue ||\n      this.options.msg || this.options.message\n  }\n}\n","import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'none-widget',\n  template: ``,\n})\nexport class NoneComponent {\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'number-widget',\n  template: `\n      <div [class]=\"options?.htmlClass || ''\">\n          <label *ngIf=\"options?.title\"\n                 [attr.for]=\"'control' + layoutNode?._id\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [style.display]=\"options?.notitle ? 'none' : ''\"\n                 [innerHTML]=\"options?.title\"></label>\n          <input *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.placeholder]=\"options?.placeholder\"\n                 [attr.required]=\"options?.required\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [class]=\"options?.fieldHtmlClass || ''\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [title]=\"lastValidNumber\"\n                 [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\">\n          <input *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.placeholder]=\"options?.placeholder\"\n                 [attr.required]=\"options?.required\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [class]=\"options?.fieldHtmlClass || ''\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [title]=\"lastValidNumber\"\n                 [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\">\n          <span *ngIf=\"layoutNode?.type === 'range'\" [innerHTML]=\"controlValue\"></span>\n      </div>`,\n})\nexport class NumberComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  allowNegative = true\n  allowDecimal = true\n  allowExponents = false\n  lastValidNumber = ''\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.layoutNode.dataType === 'integer') {\n      this.allowDecimal = false\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap} from '../functions/buildTitleMap'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'radios-widget',\n  template: `\n    <label *ngIf=\"options?.title\"\n      [attr.for]=\"'control' + layoutNode?._id\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [style.display]=\"options?.notitle ? 'none' : ''\"\n      [innerHTML]=\"options?.title\"></label>\n\n    <!-- 'horizontal' = radios-inline or radiobuttons -->\n    <div *ngIf=\"layoutOrientation === 'horizontal'\"\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngFor=\"let radioItem of radiosList\"\n        [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n        [class]=\"(options?.itemLabelHtmlClass || '') +\n          ((controlValue + '' === radioItem?.value + '') ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n        <input type=\"radio\"\n          [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n          [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n          [attr.required]=\"options?.required\"\n          [checked]=\"radioItem?.value === controlValue\"\n          [class]=\"options?.fieldHtmlClass || ''\"\n          [disabled]=\"controlDisabled\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [name]=\"controlName\"\n          [value]=\"radioItem?.value\"\n          (change)=\"updateValue($event)\">\n        <span [innerHTML]=\"radioItem?.name\"></span>\n      </label>\n    </div>\n\n    <!-- 'vertical' = regular radios -->\n    <div *ngIf=\"layoutOrientation !== 'horizontal'\">\n      <div *ngFor=\"let radioItem of radiosList\"\n        [class]=\"options?.htmlClass || ''\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [class]=\"(options?.itemLabelHtmlClass || '') +\n            ((controlValue + '' === radioItem?.value + '') ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n          <input type=\"radio\"\n            [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n            [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n            [attr.required]=\"options?.required\"\n            [checked]=\"radioItem?.value === controlValue\"\n            [class]=\"options?.fieldHtmlClass || ''\"\n            [disabled]=\"controlDisabled\"\n            [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n            [name]=\"controlName\"\n            [value]=\"radioItem?.value\"\n            (change)=\"updateValue($event)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </label>\n      </div>\n    </div>`,\n})\nexport class RadiosComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  layoutOrientation = 'vertical'\n  radiosList: any[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    if (this.layoutNode.type === 'radios-inline' ||\n      this.layoutNode.type === 'radiobuttons'\n    ) {\n      this.layoutOrientation = 'horizontal'\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'root-widget',\n  template: `\n    <div *ngFor=\"let layoutItem of layout; let i = index\"\n      [class.form-flex-item]=\"isFlexItem\"\n      [style.align-self]=\"(layoutItem.options || {})['align-self']\"\n      [style.flex-basis]=\"getFlexAttribute(layoutItem, 'flex-basis')\"\n      [style.flex-grow]=\"getFlexAttribute(layoutItem, 'flex-grow')\"\n      [style.flex-shrink]=\"getFlexAttribute(layoutItem, 'flex-shrink')\"\n      [style.order]=\"(layoutItem.options || {}).order\">\n      <div\n        [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"\n        [orderable]=\"isDraggable(layoutItem)\">\n        <select-framework-widget *ngIf=\"showWidget(layoutItem)\"\n          [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n          [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n          [layoutNode]=\"layoutItem\"></select-framework-widget>\n      </div>\n    </div>`,\n  styles: [`\n    [draggable=true] {\n      transition: all 150ms cubic-bezier(.4, 0, .2, 1);\n    }\n    [draggable=true]:hover {\n      cursor: move;\n      box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n      position: relative; z-index: 10;\n      margin-top: -1px;\n      margin-left: -1px;\n      margin-right: 1px;\n      margin-bottom: 1px;\n    }\n    [draggable=true].drag-target-top {\n      box-shadow: 0 -2px 0 #000;\n      position: relative; z-index: 20;\n    }\n    [draggable=true].drag-target-bottom {\n      box-shadow: 0 2px 0 #000;\n      position: relative; z-index: 20;\n    }\n  `],\n})\nexport class RootComponent {\n  options: any\n  @Input() dataIndex: number[]\n  @Input() layoutIndex: number[]\n  @Input() layout: any[]\n  @Input() isOrderable: boolean\n  @Input() isFlexItem = false\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  isDraggable(node: any): boolean {\n    return node.arrayItem && node.type !== '$ref' &&\n      node.arrayItemType === 'list' && this.isOrderable !== false\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute)\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index]\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'section-widget',\n  template: `\n      <div *ngIf=\"containerType === 'div'\"\n           [class]=\"options?.htmlClass || ''\"\n           [class.expandable]=\"options?.expandable && !expanded\"\n           [class.expanded]=\"options?.expandable && expanded\">\n          <label *ngIf=\"sectionTitle\"\n                 class=\"legend\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [innerHTML]=\"sectionTitle\"\n                 (click)=\"toggleExpanded()\"></label>\n          <root-widget *ngIf=\"expanded\"\n                       [dataIndex]=\"dataIndex\"\n                       [layout]=\"layoutNode.items\"\n                       [layoutIndex]=\"layoutIndex\"\n                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                       [isOrderable]=\"options?.orderable\"\n                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                       [style.display]=\"getFlexAttribute('display')\"\n                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                       [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n      </div>\n      <fieldset *ngIf=\"containerType === 'fieldset'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\"\n                [disabled]=\"options?.readonly\">\n          <legend *ngIf=\"sectionTitle\"\n                  class=\"legend\"\n                  [class]=\"options?.labelHtmlClass || ''\"\n                  [innerHTML]=\"sectionTitle\"\n                  (click)=\"toggleExpanded()\"></legend>\n          <div *ngIf=\"options?.messageLocation !== 'bottom'\">\n              <p *ngIf=\"options?.description\"\n                 class=\"help-block\"\n                 [class]=\"options?.labelHelpBlockClass || ''\"\n                 [innerHTML]=\"options?.description\"></p>\n          </div>\n          <root-widget *ngIf=\"expanded\"\n                       [dataIndex]=\"dataIndex\"\n                       [layout]=\"layoutNode.items\"\n                       [layoutIndex]=\"layoutIndex\"\n                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                       [isOrderable]=\"options?.orderable\"\n                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                       [style.display]=\"getFlexAttribute('display')\"\n                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                       [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n          <div *ngIf=\"options?.messageLocation === 'bottom'\">\n              <p *ngIf=\"options?.description\"\n                 class=\"help-block\"\n                 [class]=\"options?.labelHelpBlockClass || ''\"\n                 [innerHTML]=\"options?.description\"></p>\n          </div>\n      </fieldset>`,\n  styles: [`\n    .legend { font-weight: bold; }\n    .expandable > legend:before, .expandable > label:before  { content: '▶'; padding-right: .3em; }\n    .expanded > legend:before, .expanded > label:before  { content: '▼'; padding-right: .2em; }\n  `],\n})\nexport class SectionComponent implements OnInit {\n  options: any\n  expanded = true\n  containerType: string\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this)\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n    this.options = this.layoutNode.options || {}\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable\n    switch (this.layoutNode.type) {\n      case 'fieldset':\n      case 'array':\n      case 'tab':\n      case 'advancedfieldset':\n      case 'authfieldset':\n      case 'optionfieldset':\n      case 'selectfieldset':\n        this.containerType = 'fieldset'\n        break\n      default: // 'div', 'flex', 'section', 'conditional', 'actions', 'tagsinput'\n        this.containerType = 'div'\n        break\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) {\n      this.expanded = !this.expanded\n    }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex'\n    if (attribute !== 'flex' && !flexActive) {\n      return null\n    }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive\n      case 'display':\n        return flexActive ? 'flex' : 'initial'\n      case 'flex-direction':\n      case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute)\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index]\n      case 'justify-content':\n      case 'align-items':\n      case 'align-content':\n        return this.options[attribute]\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {isArray} from '@ngsf/common'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\nimport {buildTitleMap} from '../functions/buildTitleMap'\n\n@Component({\n  selector: 'select-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <select *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n      <select *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        (change)=\"updateValue($event)\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [selected]=\"selectItem?.value === controlValue\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [attr.selected]=\"subItem?.value === controlValue\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n    </div>`,\n})\nexport class SelectComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  selectList: any[] = []\n  isArray = isArray\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Input,\n  OnChanges,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'select-framework-widget',\n  template: `\n    <div #widgetContainer></div>\n  `,\n})\nexport class SelectFrameworkComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {}\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.jsf.framework) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.jsf.framework as any)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, ComponentFactoryResolver, ComponentRef, Input, OnChanges, OnInit, ViewChild, ViewContainerRef} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'select-widget-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class SelectWidgetComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && (this.layoutNode || {}).widget) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.widget)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {hasOwn} from '@ngsf/common'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'submit-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <input\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (click)=\"updateValue($event)\">\n    </div>`,\n})\nexport class SubmitComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid\n      this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid)\n    }\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'tabs-widget',\n  template: `\n    <ul\n      [class]=\"options?.labelHtmlClass || ''\">\n      <li *ngFor=\"let item of layoutNode?.items; let i = index\"\n        [class]=\"(options?.itemLabelHtmlClass || '') + (selectedItem === i ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + options?.style?.unselected))\"\n        role=\"presentation\"\n        data-tabs>\n        <a *ngIf=\"showAddTab || item.type !== '$ref'\"\n           [class]=\"'nav-link' + (selectedItem === i ? (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n            (' ' + options?.style?.unselected))\"\n          [innerHTML]=\"setTabTitle(item, i)\"\n          (click)=\"select(i)\"></a>\n      </li>\n    </ul>\n\n    <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n      [class]=\"options?.htmlClass || ''\">\n\n      <select-framework-widget *ngIf=\"selectedItem === i\"\n        [class]=\"(options?.fieldHtmlClass || '') +\n          ' ' + (options?.activeClass || '') +\n          ' ' + (options?.style?.selected || '')\"\n        [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n\n    </div>`,\n  styles: [` a { cursor: pointer; } `],\n})\nexport class TabsComponent implements OnInit {\n  options: any\n  itemCount: number\n  selectedItem = 0\n  showAddTab = true\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.itemCount = this.layoutNode.items.length - 1\n    this.updateControl()\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.itemCount = this.layoutNode.items.length\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      })\n      this.updateControl()\n    }\n    this.selectedItem = index\n  }\n\n  updateControl() {\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1]\n    if (lastItem.type === '$ref' &&\n      this.itemCount >= (lastItem.options.maxItems || 1000)\n    ) {\n      this.showAddTab = false\n    }\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index)\n  }\n}\n","import {Component, ComponentFactoryResolver, ComponentRef, Input, OnChanges, OnInit, ViewChild, ViewContainerRef} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'template-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class TemplateComponent implements OnInit, OnChanges {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.layoutNode.options.template) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.options.template)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'textarea-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <textarea *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"></textarea>\n      <textarea *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">{{controlValue}}</textarea>\n    </div>`,\n})\nexport class TextareaComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Injectable} from '@angular/core'\nimport {hasOwn} from '@ngsf/common'\n\nimport {AddReferenceComponent} from '../components/add-reference.component'\nimport {OneOfComponent} from '../components/one-of.component'\nimport {ButtonComponent} from '../components/button.component'\nimport {CheckboxComponent} from '../components/checkbox.component'\nimport {CheckboxesComponent} from '../components/checkboxes.component'\nimport {FileComponent} from '../components/file.component'\nimport {InputComponent} from '../components/input.component'\nimport {MessageComponent} from '../components/message.component'\nimport {NoneComponent} from '../components/none.component'\nimport {NumberComponent} from '../components/number.component'\nimport {RadiosComponent} from '../components/radios.component'\nimport {RootComponent} from '../components/root.component'\nimport {SectionComponent} from '../components/section.component'\nimport {SelectComponent} from '../components/select.component'\nimport {SelectFrameworkComponent} from '../components/select-framework.component'\nimport {SelectWidgetComponent} from '../components/select-widget.component'\nimport {SubmitComponent} from '../components/submit.component'\nimport {TabsComponent} from '../components/tabs.component'\nimport {TemplateComponent} from '../components/template.component'\nimport {TextareaComponent} from '../components/textarea.component'\n\n@Injectable()\nexport class WidgetLibraryService {\n\n  defaultWidget = 'text'\n  widgetLibrary: any = {\n\n    // Angular JSON Schema Form administrative widgets\n    none: NoneComponent, // Placeholder, for development - displays nothing\n    root: RootComponent, // Form root, renders a complete layout\n    'select-framework': SelectFrameworkComponent, // Applies the selected framework to a specified widget\n    'select-widget': SelectWidgetComponent, // Displays a specified widget\n    $ref: AddReferenceComponent, // Button to add a new array item or $ref element\n\n    // Free-form text HTML 'input' form control widgets <input type=\"...\">\n    email: 'text',\n    integer: 'number', // Note: 'integer' is not a recognized HTML input type\n    number: NumberComponent,\n    password: 'text',\n    search: 'text',\n    tel: 'text',\n    text: InputComponent,\n    ur: 'text',\n\n    // Controlled text HTML 'input' form control widgets <input type=\"...\">\n    color: 'text',\n    date: 'text',\n    datetime: 'text',\n    'datetime-local': 'text',\n    month: 'text',\n    range: 'number',\n    time: 'text',\n    week: 'text',\n\n    // Non-text HTML 'input' form control widgets <input type=\"...\">\n    // 'button': <input type=\"button\"> not used, use <button> instead\n    checkbox: CheckboxComponent, // TODO: Set ternary = true for 3-state ??\n    file: FileComponent, // TODO: Finish 'file' widget\n    hidden: 'text',\n    image: 'text', // TODO: Figure out how to handle these\n    radio: 'radios',\n    reset: 'submit', // TODO: Figure out how to handle these\n    submit: SubmitComponent,\n\n    // Other (non-'input') HTML form control widgets\n    button: ButtonComponent,\n    select: SelectComponent,\n    // 'option': automatically generated by select widgets\n    // 'optgroup': automatically generated by select widgets\n    textarea: TextareaComponent,\n\n    // HTML form control widget sets\n    checkboxes: CheckboxesComponent, // Grouped list of checkboxes\n    'checkboxes-inline': 'checkboxes', // Checkboxes in one line\n    checkboxbuttons: 'checkboxes', // Checkboxes as html buttons\n    radios: RadiosComponent, // Grouped list of radio buttons\n    'radios-inline': 'radios', // Radio controls in one line\n    radiobuttons: 'radios', // Radio controls as html buttons\n\n    // HTML Layout widgets\n    // 'label': automatically added to data widgets\n    // 'legend': automatically added to fieldsets\n    section: SectionComponent, // Just a div <div>\n    div: 'section', // Still just a div <div>\n    fieldset: 'section', // A fieldset, with an optional legend <fieldset>\n    flex: 'section', // A flexbox container <div style=\"display: flex\">\n\n    // Non-HTML layout widgets\n    'one-of': OneOfComponent, // A select box that changes another input\n                              // TODO: Finish 'one-of' widget\n    array: 'section', // A list you can add, remove and reorder <fieldset>\n    tabarray: 'tabs', // A tabbed version of array\n    tab: 'section', // A tab group, similar to a fieldset or section <fieldset>\n    tabs: TabsComponent, // A tabbed set of panels with different controls\n    message: MessageComponent, // Insert arbitrary html\n    help: 'message', // Insert arbitrary html\n    msg: 'message', // Insert arbitrary html\n    html: 'message', // Insert arbitrary html\n    template: TemplateComponent, // Insert a custom Angular component\n\n    // Widgets included for compatibility with JSON Form API\n    advancedfieldset: 'section', // Adds 'Advanced settings' title <fieldset>\n    authfieldset: 'section', // Adds 'Authentication settings' title <fieldset>\n    optionfieldset: 'one-of', // Option control, displays selected sub-item <fieldset>\n    selectfieldset: 'one-of', // Select control, displays selected sub-item <fieldset>\n    conditional: 'section', // Identical to 'section' (depeciated) <div>\n    actions: 'section', // Horizontal button list, can only submit, uses buttons as items <div>\n    tagsinput: 'section', // For entering short text tags <div>\n    // See: http://ulion.github.io/jsonform/playground/?example=fields-checkboxbuttons\n\n    // Widgets included for compatibility with React JSON Schema Form API\n    updown: 'number',\n    'date-time': 'datetime-local',\n    'alt-datetime': 'datetime-local',\n    'alt-date': 'date',\n\n    // Widgets included for compatibility with Angular Schema Form API\n    wizard: 'section', // TODO: Sequential panels with \"Next\" and \"Previous\" buttons\n\n    // Widgets included for compatibility with other libraries\n    textline: 'text',\n\n    // Recommended 3rd-party add-on widgets (TODO: create wrappers for these...)\n    // 'ng2-select': Select control replacement - http://valor-software.com/ng2-select/\n    // 'flatpickr': Flatpickr date picker - https://github.com/chmln/flatpickr\n    // 'pikaday': Pikaday date picker - https://github.com/dbushell/Pikaday\n    // 'spectrum': Spectrum color picker - http://bgrins.github.io/spectrum\n    // 'bootstrap-slider': Bootstrap Slider range control - https://github.com/seiyria/bootstrap-slider\n    // 'ace': ACE code editor - https://ace.c9.io\n    // 'ckeditor': CKEditor HTML / rich text editor - http://ckeditor.com\n    // 'tinymce': TinyMCE HTML / rich text editor - https://www.tinymce.com\n    // 'imageselect': Bootstrap drop-down image selector - http://silviomoreto.github.io/bootstrap-select\n    // 'wysihtml5': HTML editor - http://jhollingworth.github.io/bootstrap-wysihtml5\n    // 'quill': Quill HTML / rich text editor (?) - https://quilljs.com\n  }\n  registeredWidgets: any = {}\n  frameworkWidgets: any = {}\n  activeWidgets: any = {}\n\n  constructor() {\n    this.setActiveWidgets()\n  }\n\n  setActiveWidgets(): boolean {\n    this.activeWidgets = Object.assign(\n      {}, this.widgetLibrary, this.frameworkWidgets, this.registeredWidgets\n    )\n    for (const widgetName of Object.keys(this.activeWidgets)) {\n      let widget: any = this.activeWidgets[widgetName]\n      // Resolve aliases\n      if (typeof widget === 'string') {\n        const usedAliases: string[] = []\n        while (typeof widget === 'string' && !usedAliases.includes(widget)) {\n          usedAliases.push(widget)\n          widget = this.activeWidgets[widget]\n        }\n        if (typeof widget !== 'string') {\n          this.activeWidgets[widgetName] = widget\n        }\n      }\n    }\n    return true\n  }\n\n  setDefaultWidget(type: string): boolean {\n    if (!this.hasWidget(type)) {\n      return false\n    }\n    this.defaultWidget = type\n    return true\n  }\n\n  hasWidget(type: string, widgetSet = 'activeWidgets'): boolean {\n    if (!type || typeof type !== 'string') {\n      return false\n    }\n    return hasOwn(this[widgetSet], type)\n  }\n\n  hasDefaultWidget(type: string): boolean {\n    return this.hasWidget(type, 'widgetLibrary')\n  }\n\n  registerWidget(type: string, widget: any): boolean {\n    if (!type || !widget || typeof type !== 'string') {\n      return false\n    }\n    this.registeredWidgets[type] = widget\n    return this.setActiveWidgets()\n  }\n\n  unRegisterWidget(type: string): boolean {\n    if (!hasOwn(this.registeredWidgets, type)) {\n      return false\n    }\n    delete this.registeredWidgets[type]\n    return this.setActiveWidgets()\n  }\n\n  unRegisterAllWidgets(unRegisterFrameworkWidgets = true): boolean {\n    this.registeredWidgets = {}\n    if (unRegisterFrameworkWidgets) {\n      this.frameworkWidgets = {}\n    }\n    return this.setActiveWidgets()\n  }\n\n  registerFrameworkWidgets(widgets: any): boolean {\n    if (widgets === null || typeof widgets !== 'object') {\n      widgets = {}\n    }\n    this.frameworkWidgets = widgets\n    return this.setActiveWidgets()\n  }\n\n  unRegisterFrameworkWidgets(): boolean {\n    if (Object.keys(this.frameworkWidgets).length) {\n      this.frameworkWidgets = {}\n      return this.setActiveWidgets()\n    }\n    return false\n  }\n\n  getWidget(type?: string, widgetSet = 'activeWidgets'): any {\n    if (this.hasWidget(type, widgetSet)) {\n      return this[widgetSet][type]\n    } else if (this.hasWidget(this.defaultWidget, widgetSet)) {\n      return this[widgetSet][this.defaultWidget]\n    } else {\n      return null\n    }\n  }\n\n  getAllWidgets(): any {\n    return {\n      widgetLibrary: this.widgetLibrary,\n      registeredWidgets: this.registeredWidgets,\n      frameworkWidgets: this.frameworkWidgets,\n      activeWidgets: this.activeWidgets,\n    }\n  }\n}\n","import {Inject, Injectable} from '@angular/core'\nimport {WidgetLibraryService} from './widget-library.service'\nimport {hasOwn, Framework} from '@ngsf/common'\n\n// Possible future frameworks:\n// - Foundation 6:\n//   http://justindavis.co/2017/06/15/using-foundation-6-in-angular-4/\n//   https://github.com/zurb/foundation-sites\n// - Semantic UI:\n//   https://github.com/edcarroll/ng2-semantic-ui\n//   https://github.com/vladotesanovic/ngSemantic\n\n@Injectable()\nexport class FrameworkLibraryService {\n  activeFramework: Framework = null\n  stylesheets: (HTMLStyleElement | HTMLLinkElement)[]\n  scripts: HTMLScriptElement[]\n  loadExternalAssets = false\n  defaultFramework: string\n  frameworkLibrary: { [name: string]: Framework } = {}\n\n  constructor(\n    @Inject(Framework) private frameworks: any[],\n    @Inject(WidgetLibraryService) private widgetLibrary: WidgetLibraryService\n  ) {\n    this.frameworks.forEach(framework =>\n      this.frameworkLibrary[framework.name] = framework\n    )\n    this.defaultFramework = this.frameworks[0].name\n    this.setFramework(this.defaultFramework)\n  }\n\n  public setLoadExternalAssets(loadExternalAssets = true): void {\n    this.loadExternalAssets = !!loadExternalAssets\n  }\n\n  public setFramework(\n    framework: string | Framework = this.defaultFramework,\n    loadExternalAssets = this.loadExternalAssets\n  ): boolean {\n    this.activeFramework =\n      typeof framework === 'string' && this.hasFramework(framework) ?\n        this.frameworkLibrary[framework] :\n        typeof framework === 'object' && hasOwn(framework, 'framework') ?\n          framework :\n          this.frameworkLibrary[this.defaultFramework]\n    return this.registerFrameworkWidgets(this.activeFramework)\n  }\n\n  registerFrameworkWidgets(framework: Framework): boolean {\n    return hasOwn(framework, 'widgets') ?\n      this.widgetLibrary.registerFrameworkWidgets(framework.widgets) :\n      this.widgetLibrary.unRegisterFrameworkWidgets()\n  }\n\n  public hasFramework(type: string): boolean {\n    return hasOwn(this.frameworkLibrary, type)\n  }\n\n  public getFramework(): any {\n    if (!this.activeFramework) {\n      this.setFramework('default', true)\n    }\n    return this.activeFramework.framework\n  }\n\n  public getFrameworkWidgets(): any {\n    return this.activeFramework.widgets || {}\n  }\n\n  public getFrameworkStylesheets(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.stylesheets) || []\n  }\n\n  public getFrameworkScripts(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.scripts) || []\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'hidden-widget',\n  template: `\n    <input *ngIf=\"boundControl\"\n      [formControl]=\"formControl\"\n      [id]=\"'control' + layoutNode?._id\"\n      [name]=\"controlName\"\n      type=\"hidden\">\n    <input *ngIf=\"!boundControl\"\n      [disabled]=\"controlDisabled\"\n      [name]=\"controlName\"\n      [id]=\"'control' + layoutNode?._id\"\n      type=\"hidden\"\n      [value]=\"controlValue\">`,\n})\nexport class HiddenComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'tab-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <root-widget\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [layout]=\"layoutNode.items\"></root-widget>\n    </div>`,\n})\nexport class TabComponent implements OnInit {\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core'\nimport {CommonModule} from '@angular/common'\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\nimport {JsonSchemaFormService} from './services/json-schema-form.service'\nimport {OrderableDirective} from './directives/orderable.directive'\n\nimport {AddReferenceComponent} from './components/add-reference.component'\nimport {ButtonComponent} from './components/button.component'\nimport {CheckboxComponent} from './components/checkbox.component'\nimport {CheckboxesComponent} from './components/checkboxes.component'\nimport {FileComponent} from './components/file.component'\nimport {HiddenComponent} from './components/hidden.component'\nimport {InputComponent} from './components/input.component'\nimport {MessageComponent} from './components/message.component'\nimport {NoneComponent} from './components/none.component'\nimport {NumberComponent} from './components/number.component'\nimport {OneOfComponent} from './components/one-of.component'\nimport {RadiosComponent} from './components/radios.component'\nimport {RootComponent} from './components/root.component'\nimport {SectionComponent} from './components/section.component'\nimport {SelectComponent} from './components/select.component'\nimport {SelectFrameworkComponent} from './components/select-framework.component'\nimport {SelectWidgetComponent} from './components/select-widget.component'\nimport {SubmitComponent} from './components/submit.component'\nimport {TabComponent} from './components/tab.component'\nimport {TabsComponent} from './components/tabs.component'\nimport {TemplateComponent} from './components/template.component'\nimport {TextareaComponent} from './components/textarea.component'\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n\n    OrderableDirective,\n  ],\n  entryComponents: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n  ],\n  exports: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n\n    OrderableDirective,\n  ],\n  providers: [JsonSchemaFormService],\n})\nexport class WidgetLibraryModule {\n  static forRoot(): ModuleWithProviders<WidgetLibraryModule> {\n    return {\n      ngModule: WidgetLibraryModule,\n      providers: [JsonSchemaFormService],\n    }\n  }\n}\n"]}