{"version":3,"file":"ngsf-widget-library.umd.js","sources":["ng://@ngsf/widget-library/lib/services/json-schema-form.service.ts","ng://@ngsf/widget-library/lib/directives/orderable.directive.ts","ng://@ngsf/widget-library/lib/functions/buildTitleMap.ts","ng://@ngsf/widget-library/lib/interfaces/title-map-item.ts","ng://@ngsf/widget-library/lib/interfaces/error-messages.ts","ng://@ngsf/widget-library/lib/components/add-reference.component.ts","ng://@ngsf/widget-library/lib/components/one-of.component.ts","ng://@ngsf/widget-library/lib/components/button.component.ts","ng://@ngsf/widget-library/lib/components/checkbox.component.ts","ng://@ngsf/widget-library/lib/components/checkboxes.component.ts","ng://@ngsf/widget-library/lib/components/file.component.ts","ng://@ngsf/widget-library/lib/components/input.component.ts","ng://@ngsf/widget-library/lib/components/message.component.ts","ng://@ngsf/widget-library/lib/components/none.component.ts","ng://@ngsf/widget-library/lib/components/number.component.ts","ng://@ngsf/widget-library/lib/components/radios.component.ts","ng://@ngsf/widget-library/lib/components/root.component.ts","ng://@ngsf/widget-library/lib/components/section.component.ts","ng://@ngsf/widget-library/lib/components/select.component.ts","ng://@ngsf/widget-library/lib/components/select-framework.component.ts","ng://@ngsf/widget-library/lib/components/select-widget.component.ts","ng://@ngsf/widget-library/lib/components/submit.component.ts","ng://@ngsf/widget-library/lib/components/tabs.component.ts","ng://@ngsf/widget-library/lib/components/template.component.ts","ng://@ngsf/widget-library/lib/components/textarea.component.ts","ng://@ngsf/widget-library/lib/services/widget-library.service.ts","ng://@ngsf/widget-library/lib/services/framework-library.service.ts","ng://@ngsf/widget-library/lib/components/hidden.component.ts","ng://@ngsf/widget-library/lib/components/tab.component.ts","ng://@ngsf/widget-library/lib/widget-library.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core'\nimport {AbstractControl, FormArray, FormGroup} from '@angular/forms'\nimport {Subject} from 'rxjs-compat/Subject'\nimport * as draft6 from 'ajv/lib/refs/json-schema-draft-06.json'\nimport Ajv from 'ajv'\nimport * as _ from 'lodash'\n\nimport {\n  fixTitle, forEach, hasOwn, toTitleCase,\n  hasValue, isArray, isDefined, isEmpty, isObject,\n  JsonPointer,\n  buildSchemaFromData, buildSchemaFromLayout, removeRecursiveReferences,\n  buildFormGroup, buildFormGroupTemplate, formatFormData, getControl,\n  buildLayout, getLayoutNode,\n  enValidationMessages,\n  frValidationMessages,\n  Framework\n} from '@ngsf/common'\nimport {ErrorMessages} from '../interfaces/error-messages'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n@Injectable()\nexport class JsonSchemaFormService {\n  JsonFormCompatibility = false\n  ReactJsonSchemaFormCompatibility = false\n  AngularSchemaFormCompatibility = false\n  tpldata: any = {}\n\n  ajvOptions: any = {allErrors: true, jsonPointers: true, unknownFormats: 'ignore'}\n  ajv: any = new Ajv(this.ajvOptions) // AJV: Another JSON Schema Validator\n\n  validateFormData: any = null // Compiled AJV function to validate active form's schema\n\n  formValues: any = {} // Internal form data (may not have correct types)\n  data: any = {} // Output form data (formValues, formatted with correct data types)\n  schema: any = {} // Internal JSON Schema\n  layout: any[] = [] // Internal form layout\n  formGroupTemplate: any = {} // Template used to create formGroup\n  formGroup: FormGroup = null // Angular formGroup, which powers the reactive form\n  framework: Framework = null // Active framework component\n  formOptions: any // Active options, used to configure the form\n\n  validData: any = null // Valid form data (or null) (=== isValid ? data : null)\n  isValid: boolean = null // Is current form data valid?\n  ajvErrors: any = null // Ajv errors for current data\n  validationErrors: any = null // Any validation errors for current data\n  dataErrors: any = new Map() //\n  formValueSubscription: any = null // Subscription to formGroup.valueChanges observable (for un- and re-subscribing)\n  dataChanges: Subject<any> = new Subject() // Form data observable\n  isValidChanges: Subject<any> = new Subject() // isValid observable\n  validationErrorChanges: Subject<any> = new Subject() // validationErrors observable\n\n  arrayMap: Map<string, number> = new Map() // Maps arrays in data object and number of tuple values\n  dataMap: Map<string, any> = new Map() // Maps paths in form data to schema and formGroup paths\n  dataRecursiveRefMap: Map<string, string> = new Map() // Maps recursive reference points in form data\n  schemaRecursiveRefMap: Map<string, string> = new Map() // Maps recursive reference points in schema\n  schemaRefLibrary: any = {} // Library of schemas for resolving schema $refs\n  layoutRefLibrary: any = {'': null} // Library of layout nodes for adding to form\n  templateRefLibrary: any = {} // Library of formGroup templates for adding to form\n  hasRootReference = false // Does the form include a recursive reference to itself?\n\n  language = 'en-US'\n\n  // Default global form options\n  defaultFormOptions: any = {\n    addSubmit: 'auto', // Add a submit button if layout does not have one?\n    // for addSubmit: true = always, false = never,\n    // 'auto' = only if layout is undefined (form is built from schema alone)\n    debug: false, // Show debugging output?\n    disableInvalidSubmit: true, // Disable submit if form invalid?\n    formDisabled: false, // Set entire form as disabled? (not editable, and disables outputs)\n    formReadonly: false, // Set entire form as read only? (not editable, but outputs still enabled)\n    fieldsRequired: false, // (set automatically) Are there any required fields in the form?\n    framework: 'no-framework', // The framework to load\n    loadExternalAssets: false, // Load external css and JavaScript for framework?\n    pristine: {errors: true, success: true},\n    supressPropertyTitles: false,\n    setSchemaDefaults: 'auto', // Set fefault values from schema?\n    // true = always set (unless overridden by layout default or formValues)\n    // false = never set\n    // 'auto' = set in addable components, and everywhere if formValues not set\n    setLayoutDefaults: 'auto', // Set fefault values from layout?\n    // true = always set (unless overridden by formValues)\n    // false = never set\n    // 'auto' = set in addable components, and everywhere if formValues not set\n    validateOnRender: 'auto', // Validate fields immediately, before they are touched?\n    // true = validate all fields immediately\n    // false = only validate fields after they are touched by user\n    // 'auto' = validate fields with values immediately, empty fields after they are touched\n    widgets: {}, // Any custom widgets to load\n    defautWidgetOptions: { // Default options for form control widgets\n      listItems: 1, // Number of list items to initially add to arrays with no default value\n      addable: true, // Allow adding items to an array or $ref point?\n      orderable: true, // Allow reordering items within an array?\n      removable: true, // Allow removing items from an array or $ref point?\n      enableErrorState: true, // Apply 'has-error' class when field fails validation?\n      // disableErrorState: false, // Don't apply 'has-error' class when field fails validation?\n      enableSuccessState: true, // Apply 'has-success' class when field validates?\n      // disableSuccessState: false, // Don't apply 'has-success' class when field validates?\n      feedback: false, // Show inline feedback icons?\n      feedbackOnRender: false, // Show errorMessage on Render?\n      notitle: false, // Hide title?\n      disabled: false, // Set control as disabled? (not editable, and excluded from output)\n      readonly: false, // Set control as read only? (not editable, but included in output)\n      returnEmptyFields: true, // return values for fields that contain no data?\n      validationMessages: {} // set by setLanguage()\n    },\n  }\n\n  constructor() {\n    this.setLanguage(this.language)\n\n    this.ajv.addMetaSchema(draft6)\n  }\n\n  setLanguage(language: string = 'en-US') {\n    this.language = language\n    const validationMessages = language.slice(0, 2) === 'fr' ?\n      frValidationMessages : enValidationMessages\n    this.defaultFormOptions.defautWidgetOptions.validationMessages =\n      _.cloneDeep(validationMessages)\n  }\n\n  getData() {\n    return this.data\n  }\n\n  getSchema() {\n    return this.schema\n  }\n\n  getLayout() {\n    return this.layout\n  }\n\n  public resetAllValues() {\n    this.JsonFormCompatibility = false\n    this.ReactJsonSchemaFormCompatibility = false\n    this.AngularSchemaFormCompatibility = false\n    this.tpldata = {}\n    this.validateFormData = null\n    this.formValues = {}\n    this.schema = {}\n    this.layout = []\n    this.formGroupTemplate = {}\n    this.formGroup = null\n    this.framework = null\n    this.data = {}\n    this.validData = null\n    this.isValid = null\n    this.validationErrors = null\n    this.arrayMap = new Map()\n    this.dataMap = new Map()\n    this.dataRecursiveRefMap = new Map()\n    this.schemaRecursiveRefMap = new Map()\n    this.layoutRefLibrary = {}\n    this.schemaRefLibrary = {}\n    this.templateRefLibrary = {}\n    this.formOptions = _.cloneDeep(this.defaultFormOptions)\n  }\n\n  /**\n   * 'buildRemoteError' function\n   *\n   * Example errors:\n   * {\n   *   last_name: [ {\n   *     message: 'Last name must start with capital letter.',\n   *     code: 'capital_letter'\n   *   } ],\n   *   email: [ {\n   *     message: 'Email must be from example.com domain.',\n   *     code: 'special_domain'\n   *   }, {\n   *     message: 'Email must contain an @ symbol.',\n   *     code: 'at_symbol'\n   *   } ]\n   * }\n   */\n  buildRemoteError(errors: ErrorMessages) {\n    forEach(errors, (value, key) => {\n      if (key in this.formGroup.controls) {\n        for (const error of value) {\n          const err = {}\n          err[error.code] = error.message\n          if (typeof key === 'string') {\n            this.formGroup.get(key).setErrors(err, {emitEvent: true})\n          } else {\n            console.error('Unhandled for error', key)\n          }\n        }\n      }\n    })\n  }\n\n  validateData(newValue: any, updateSubscriptions = true): void {\n\n    // Format raw form data to correct data types\n    this.data = formatFormData(\n      newValue, this.dataMap, this.dataRecursiveRefMap,\n      this.arrayMap, this.formOptions.returnEmptyFields\n    )\n    this.isValid = this.validateFormData(this.data)\n    this.validData = this.isValid ? this.data : null\n    const compileErrors = errors => {\n      const compiledErrors = {} as any\n      (errors || []).forEach(error => {\n        if (!compiledErrors[error.dataPath]) {\n          compiledErrors[error.dataPath] = []\n        }\n        compiledErrors[error.dataPath].push(error.message)\n      })\n      return compiledErrors\n    }\n    this.ajvErrors = this.validateFormData.errors\n    this.validationErrors = compileErrors(this.validateFormData.errors)\n    if (updateSubscriptions) {\n      this.dataChanges.next(this.data)\n      this.isValidChanges.next(this.isValid)\n      this.validationErrorChanges.next(this.ajvErrors)\n    }\n  }\n\n  buildFormGroupTemplate(formValues: any = null, setValues = true) {\n    this.formGroupTemplate = buildFormGroupTemplate(this, formValues, setValues)\n  }\n\n  buildFormGroup() {\n    this.formGroup = buildFormGroup(this.formGroupTemplate) as FormGroup\n    if (this.formGroup) {\n      this.compileAjvSchema()\n      this.validateData(this.formGroup.value)\n\n      // Set up observables to emit data and validation info when form data changes\n      if (this.formValueSubscription) {\n        this.formValueSubscription.unsubscribe()\n      }\n      this.formValueSubscription = this.formGroup.valueChanges\n        .subscribe(formValue => this.validateData(formValue))\n    }\n  }\n\n  buildLayout(widgetLibrary: any) {\n    this.layout = buildLayout(this, widgetLibrary)\n  }\n\n  setOptions(newOptions: any) {\n    if (isObject(newOptions)) {\n      const addOptions = _.cloneDeep(newOptions)\n      // Backward compatibility for 'defaultOptions' (renamed 'defautWidgetOptions')\n      if (isObject(addOptions.defaultOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defaultOptions)\n        delete addOptions.defaultOptions\n      }\n      if (isObject(addOptions.defautWidgetOptions)) {\n        Object.assign(this.formOptions.defautWidgetOptions, addOptions.defautWidgetOptions)\n        delete addOptions.defautWidgetOptions\n      }\n      Object.assign(this.formOptions, addOptions)\n\n      // convert disableErrorState / disableSuccessState to enable...\n      const globalDefaults = this.formOptions.defautWidgetOptions\n      ;['ErrorState', 'SuccessState']\n        .filter(suffix => hasOwn(globalDefaults, 'disable' + suffix))\n        .forEach(suffix => {\n          globalDefaults['enable' + suffix] = !globalDefaults['disable' + suffix]\n          delete globalDefaults['disable' + suffix]\n        })\n    }\n  }\n\n  compileAjvSchema() {\n    if (!this.validateFormData) {\n\n      // if 'ui:order' exists in properties, move it to root before compiling with ajv\n      if (Array.isArray(this.schema.properties['ui:order'])) {\n        this.schema['ui:order'] = this.schema.properties['ui:order']\n        delete this.schema.properties['ui:order']\n      }\n      this.ajv.removeSchema(this.schema)\n      this.validateFormData = this.ajv.compile(this.schema)\n    }\n  }\n\n  buildSchemaFromData(data?: any, requireAllFields = false): any {\n    if (data) {\n      return buildSchemaFromData(data, requireAllFields)\n    }\n    this.schema = buildSchemaFromData(this.formValues, requireAllFields)\n  }\n\n  buildSchemaFromLayout(layout?: any): any {\n    if (layout) {\n      return buildSchemaFromLayout(layout)\n    }\n    this.schema = buildSchemaFromLayout(this.layout)\n  }\n\n\n  setTpldata(newTpldata: any = {}): void {\n    this.tpldata = newTpldata\n  }\n\n  parseText(\n    text = '', value: any = {}, values: any = {}, key: number | string = null\n  ): string {\n    if (!text || !/{{.+?}}/.test(text)) {\n      return text\n    }\n    return text.replace(/{{(.+?)}}/g, (...a) =>\n      this.parseExpression(a[1], value, values, key, this.tpldata)\n    )\n  }\n\n  parseExpression(\n    expression = '', value: any = {}, values: any = {},\n    key: number | string = null, tpldata: any = null\n  ) {\n    if (typeof expression !== 'string') {\n      return ''\n    }\n    const index = typeof key === 'number' ? (key + 1) + '' : (key || '')\n    expression = expression.trim()\n    if ((expression[0] === '\\'' || expression[0] === '\"') &&\n      expression[0] === expression[expression.length - 1] &&\n      expression.slice(1, expression.length - 1).indexOf(expression[0]) === -1\n    ) {\n      return expression.slice(1, expression.length - 1)\n    }\n    if (expression === 'idx' || expression === '$index') {\n      return index\n    }\n    if (expression === 'value' && !hasOwn(values, 'value')) {\n      return value\n    }\n    if (['\"', '\\'', ' ', '||', '&&', '+'].every(delimiter => expression.indexOf(delimiter) === -1)) {\n      const pointer = JsonPointer.parseObjectPath(expression)\n      return pointer[0] === 'value' && JsonPointer.has(value, pointer.slice(1)) ?\n        JsonPointer.get(value, pointer.slice(1)) :\n        pointer[0] === 'values' && JsonPointer.has(values, pointer.slice(1)) ?\n          JsonPointer.get(values, pointer.slice(1)) :\n          pointer[0] === 'tpldata' && JsonPointer.has(tpldata, pointer.slice(1)) ?\n            JsonPointer.get(tpldata, pointer.slice(1)) :\n            JsonPointer.has(values, pointer) ? JsonPointer.get(values, pointer) : ''\n    }\n    if (expression.indexOf('[idx]') > -1) {\n      expression = expression.replace(/\\[idx\\]/g, index)\n    }\n    if (expression.indexOf('[$index]') > -1) {\n      expression = expression.replace(/\\[$index\\]/g, index)\n    }\n    // TODO: Improve expression evaluation by parsing quoted strings first\n    // let expressionArray = expression.match(/([^\"']+|\"[^\"]+\"|'[^']+')/g)\n    if (expression.indexOf('||') > -1) {\n      return expression.split('||').reduce((all, term) =>\n        all || this.parseExpression(term, value, values, key, tpldata), ''\n      )\n    }\n    if (expression.indexOf('&&') > -1) {\n      return expression.split('&&').reduce((all, term) =>\n        all && this.parseExpression(term, value, values, key, tpldata), ' '\n      ).trim()\n    }\n    if (expression.indexOf('+') > -1) {\n      return expression.split('+')\n        .map(term => this.parseExpression(term, value, values, key, tpldata))\n        .join('')\n    }\n    return ''\n  }\n\n  setArrayItemTitle(\n    parentCtx: any = {}, childNode: any = null, index: number = null\n  ): string {\n    const parentNode = parentCtx.layoutNode\n    const parentValues: any = this.getFormControlValue(parentCtx)\n    const isArrayItem =\n      (parentNode.type || '').slice(-5) === 'array' && isArray(parentValues)\n    const text = JsonPointer.getFirst(\n      isArrayItem && childNode.type !== '$ref' ? [\n        [childNode, '/options/legend'],\n        [childNode, '/options/title'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend'],\n      ] : [\n        [childNode, '/options/title'],\n        [childNode, '/options/legend'],\n        [parentNode, '/options/title'],\n        [parentNode, '/options/legend']\n      ]\n    )\n    if (!text) {\n      return text\n    }\n    const childValue = isArray(parentValues) && index < parentValues.length ?\n      parentValues[index] : parentValues\n    return this.parseText(text, childValue, parentValues, index)\n  }\n\n  setItemTitle(ctx: any) {\n    return !ctx.options.title && /^(\\d+|-)$/.test(ctx.layoutNode.name) ?\n      null :\n      this.parseText(\n        ctx.options.title || toTitleCase(ctx.layoutNode.name),\n        this.getFormControlValue(this),\n        (this.getFormControlGroup(this) || {} as any).value,\n        ctx.dataIndex[ctx.dataIndex.length - 1]\n      )\n  }\n\n  evaluateCondition(layoutNode: any, dataIndex: number[]): boolean {\n    const arrayIndex = dataIndex && dataIndex[dataIndex.length - 1]\n    let result = true\n    if (hasValue((layoutNode.options || {}).condition)) {\n      if (typeof layoutNode.options.condition === 'string') {\n        let pointer = layoutNode.options.condition\n        if (hasValue(arrayIndex)) {\n          pointer = pointer.replace('[arrayIndex]', `[${arrayIndex}]`)\n        }\n        pointer = JsonPointer.parseObjectPath(pointer)\n        result = !!JsonPointer.get(this.data, pointer)\n        if (!result && pointer[0] === 'model') {\n          result = !!JsonPointer.get({model: this.data}, pointer)\n        }\n      } else if (typeof layoutNode.options.condition === 'function') {\n        result = layoutNode.options.condition(this.data)\n      } else if (typeof layoutNode.options.condition.functionBody === 'string') {\n        try {\n          const dynFn = new Function(\n            'model', 'arrayIndices', layoutNode.options.condition.functionBody\n          )\n          result = dynFn(this.data, dataIndex)\n        } catch (e) {\n          result = true\n          console.error('condition functionBody errored out on evaluation: ' + layoutNode.options.condition.functionBody)\n        }\n      }\n    }\n    return result\n  }\n\n  initializeControl(ctx: any, bind = true): boolean {\n    if (!isObject(ctx)) {\n      return false\n    }\n    if (isEmpty(ctx.options)) {\n      ctx.options = !isEmpty((ctx.layoutNode || {}).options) ?\n        ctx.layoutNode.options : _.cloneDeep(this.formOptions)\n    }\n    ctx.formControl = this.getFormControl(ctx)\n    ctx.boundControl = bind && !!ctx.formControl\n    if (ctx.formControl) {\n      ctx.controlName = this.getFormControlName(ctx)\n      ctx.controlValue = ctx.formControl.value\n      ctx.controlDisabled = ctx.formControl.disabled\n      ctx.options.errorMessage = ctx.formControl.status === 'VALID' ? null :\n        this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages)\n      ctx.options.showErrors = this.formOptions.validateOnRender === true ||\n        (this.formOptions.validateOnRender === 'auto' && hasValue(ctx.controlValue))\n      ctx.formControl.statusChanges.subscribe(status =>\n        ctx.options.errorMessage = status === 'VALID' ? null :\n          this.formatErrors(ctx.formControl.errors, ctx.options.validationMessages)\n      )\n      ctx.formControl.valueChanges.subscribe(value => {\n        if (!_.isEqual(ctx.controlValue, value)) {\n          ctx.controlValue = value\n        }\n      })\n    } else {\n      ctx.controlName = ctx.layoutNode.name\n      ctx.controlValue = ctx.layoutNode.value || null\n      const dataPointer = this.getDataPointer(ctx)\n      if (bind && dataPointer) {\n        console.error(`warning: control \"${dataPointer}\" is not bound to the Angular FormGroup.`)\n      }\n    }\n    return ctx.boundControl\n  }\n\n  formatErrors(errors: any, validationMessages: any = {}): string {\n    if (isEmpty(errors)) {\n      return null\n    }\n    if (!isObject(validationMessages)) {\n      validationMessages = {}\n    }\n    const addSpaces = (value: string) => value[0].toUpperCase() + (value.slice(1) || '')\n      .replace(/([a-z])([A-Z])/g, '$1 $2').replace(/_/g, ' ')\n    const formatError = (error) => typeof error === 'object' ?\n      Object.keys(error).map(key =>\n        error[key] === true ? addSpaces(key) :\n          error[key] === false ? 'Not ' + addSpaces(key) :\n            addSpaces(key) + ': ' + formatError(error[key])\n      ).join(', ') :\n      addSpaces(error.toString())\n    const messages = []\n    return Object.keys(errors)\n    // Hide 'required' error, unless it is the only one\n      .filter(errorKey => errorKey !== 'required' || Object.keys(errors).length === 1)\n      .map(errorKey =>\n        // If validationMessages is a string, return it\n        typeof validationMessages === 'string' ? validationMessages :\n          // If custom error message is a function, return function result\n          typeof validationMessages[errorKey] === 'function' ?\n            validationMessages[errorKey](errors[errorKey]) :\n            // If custom error message is a string, replace placeholders and return\n            typeof validationMessages[errorKey] === 'string' ?\n              // Does error message have any {{property}} placeholders?\n              !/{{.+?}}/.test(validationMessages[errorKey]) ?\n                validationMessages[errorKey] :\n                // Replace {{property}} placeholders with values\n                Object.keys(errors[errorKey])\n                  .reduce((errorMessage, errorProperty) => errorMessage.replace(\n                    new RegExp('{{' + errorProperty + '}}', 'g'),\n                    errors[errorKey][errorProperty]\n                  ), validationMessages[errorKey]) :\n              // If no custom error message, return formatted error data instead\n              addSpaces(errorKey) + ' Error: ' + formatError(errors[errorKey])\n      ).join('<br>')\n  }\n\n  updateValue(ctx: any, value: any): void {\n\n    // Set value of current control\n    ctx.controlValue = value\n    if (ctx.boundControl) {\n      ctx.formControl.setValue(value)\n      ctx.formControl.markAsDirty()\n    }\n    ctx.layoutNode.value = value\n\n    // Set values of any related controls in copyValueTo array\n    if (isArray(ctx.options.copyValueTo)) {\n      for (const item of ctx.options.copyValueTo) {\n        const targetControl = getControl(this.formGroup, item)\n        if (isObject(targetControl) && typeof targetControl.setValue === 'function') {\n          targetControl.setValue(value)\n          targetControl.markAsDirty()\n        }\n      }\n    }\n  }\n\n  updateArrayCheckboxList(ctx: any, checkboxList: TitleMapItem[]): void {\n    const formArray = this.getFormControl(ctx) as FormArray\n\n    // Remove all existing items\n    while (formArray.value.length) {\n      formArray.removeAt(0)\n    }\n\n    // Re-add an item for each checked box\n    const refPointer = removeRecursiveReferences(\n      ctx.layoutNode.dataPointer + '/-', this.dataRecursiveRefMap, this.arrayMap\n    )\n    for (const checkboxItem of checkboxList) {\n      if (checkboxItem.checked) {\n        const newFormControl = buildFormGroup(this.templateRefLibrary[refPointer])\n        newFormControl.setValue(checkboxItem.value)\n        formArray.push(newFormControl)\n      }\n    }\n    formArray.markAsDirty()\n  }\n\n  getFormControl(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) {\n      return null\n    }\n    return getControl(this.formGroup, this.getDataPointer(ctx))\n  }\n\n  getFormControlValue(ctx: any): AbstractControl {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      ctx.layoutNode.type === '$ref'\n    ) {\n      return null\n    }\n    const control = getControl(this.formGroup, this.getDataPointer(ctx))\n    return control ? control.value : null\n  }\n\n  getFormControlGroup(ctx: any): FormArray | FormGroup {\n    if (!ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer)) {\n      return null\n    }\n    return getControl(this.formGroup, this.getDataPointer(ctx), true)\n  }\n\n  getFormControlName(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return null\n    }\n    return JsonPointer.toKey(this.getDataPointer(ctx))\n  }\n\n  getLayoutArray(ctx: any): any[] {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -1)\n  }\n\n  getParentNode(ctx: any): any {\n    return JsonPointer.get(this.layout, this.getLayoutPointer(ctx), 0, -2)\n  }\n\n  getDataPointer(ctx: any): string {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return null\n    }\n    return JsonPointer.toIndexedPointer(\n      ctx.layoutNode.dataPointer, ctx.dataIndex, this.arrayMap\n    )\n  }\n\n  getLayoutPointer(ctx: any): string {\n    if (!hasValue(ctx.layoutIndex)) {\n      return null\n    }\n    return '/' + ctx.layoutIndex.join('/items/')\n  }\n\n  isControlBound(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) || !hasValue(ctx.dataIndex)\n    ) {\n      return false\n    }\n    const controlGroup = this.getFormControlGroup(ctx)\n    const name = this.getFormControlName(ctx)\n    return controlGroup ? hasOwn(controlGroup.controls, name) : false\n  }\n\n  addItem(ctx: any, name?: string): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.$ref) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) {\n      return false\n    }\n\n    // Create a new Angular form control from a template in templateRefLibrary\n    const newFormGroup = buildFormGroup(this.templateRefLibrary[ctx.layoutNode.$ref])\n\n    // Add the new form control to the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Add new array item to formArray\n      (this.getFormControlGroup(ctx) as any).push(newFormGroup)\n    } else { // Add new $ref item to formGroup\n      (this.getFormControlGroup(ctx) as any)\n        .addControl(name || this.getFormControlName(ctx), newFormGroup)\n    }\n\n    // Copy a new layoutNode from layoutRefLibrary\n    const newLayoutNode = getLayoutNode(ctx.layoutNode, this)\n    newLayoutNode.arrayItem = ctx.layoutNode.arrayItem\n    if (ctx.layoutNode.arrayItemType) {\n      newLayoutNode.arrayItemType = ctx.layoutNode.arrayItemType\n    } else {\n      delete newLayoutNode.arrayItemType\n    }\n    if (name) {\n      newLayoutNode.name = name\n      newLayoutNode.dataPointer += '/' + JsonPointer.escape(name)\n      newLayoutNode.options.title = fixTitle(name)\n    }\n\n    // Add the new layoutNode to the form layout\n    JsonPointer.insert(this.layout, this.getLayoutPointer(ctx), newLayoutNode)\n\n    return true\n  }\n\n  moveArrayItem(ctx: any, oldIndex: number, newIndex: number): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex) ||\n      !isDefined(oldIndex) || !isDefined(newIndex) || oldIndex === newIndex\n    ) {\n      return false\n    }\n\n    // Move item in the formArray\n    const formArray = this.getFormControlGroup(ctx) as FormArray\n    const arrayItem = formArray.at(oldIndex)\n    formArray.removeAt(oldIndex)\n    formArray.insert(newIndex, arrayItem)\n    formArray.updateValueAndValidity()\n\n    // Move layout item\n    const layoutArray = this.getLayoutArray(ctx)\n    layoutArray.splice(newIndex, 0, layoutArray.splice(oldIndex, 1)[0])\n    return true\n  }\n\n  removeItem(ctx: any): boolean {\n    if (\n      !ctx.layoutNode || !isDefined(ctx.layoutNode.dataPointer) ||\n      !hasValue(ctx.dataIndex) || !hasValue(ctx.layoutIndex)\n    ) {\n      return false\n    }\n\n    // Remove the Angular form control from the parent formArray or formGroup\n    if (ctx.layoutNode.arrayItem) { // Remove array item from formArray\n      (this.getFormControlGroup(ctx) as FormArray)\n        .removeAt(ctx.dataIndex[ctx.dataIndex.length - 1])\n    } else { // Remove $ref item from formGroup\n      (this.getFormControlGroup(ctx) as FormGroup)\n        .removeControl(this.getFormControlName(ctx))\n    }\n\n    // Remove layoutNode from layout\n    JsonPointer.remove(this.layout, this.getLayoutPointer(ctx))\n    return true\n  }\n}\n","import {Directive, ElementRef, Input, NgZone, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n/**\n * OrderableDirective\n *\n * Enables array elements to be reordered by dragging and dropping.\n *\n * Only works for arrays that have at least two elements.\n *\n * Also detects arrays-within-arrays, and correctly moves either\n * the child array element or the parent array element,\n * depending on the drop targert.\n *\n * Listeners for movable element being dragged:\n * - dragstart: add 'dragging' class to element, set effectAllowed = 'move'\n * - dragover: set dropEffect = 'move'\n * - dragend: remove 'dragging' class from element\n *\n * Listeners for stationary items being dragged over:\n * - dragenter: add 'drag-target-...' classes to element\n * - dragleave: remove 'drag-target-...' classes from element\n * - drop: remove 'drag-target-...' classes from element, move dropped array item\n */\n@Directive({\n  selector: '[orderable]',\n})\nexport class OrderableDirective implements OnInit {\n  arrayLayoutIndex: string\n  element: any\n  overParentElement = false\n  overChildElement = false\n  @Input() orderable: boolean\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private elementRef: ElementRef,\n    private jsf: JsonSchemaFormService,\n    private ngZone: NgZone\n  ) {\n  }\n\n  ngOnInit() {\n    if (this.orderable && this.layoutNode && this.layoutIndex && this.dataIndex) {\n      this.element = this.elementRef.nativeElement\n      this.element.draggable = true\n      this.arrayLayoutIndex = 'move:' + this.layoutIndex.slice(0, -1).toString()\n\n      this.ngZone.runOutsideAngular(() => {\n\n        // Listeners for movable element being dragged:\n\n        this.element.addEventListener('dragstart', (event) => {\n          event.dataTransfer.effectAllowed = 'move'\n          // Hack to bypass stupid HTML drag-and-drop dataTransfer protection\n          // so drag source info will be available on dragenter\n          const sourceArrayIndex = this.dataIndex[this.dataIndex.length - 1]\n          sessionStorage.setItem(this.arrayLayoutIndex, sourceArrayIndex + '')\n        })\n\n        this.element.addEventListener('dragover', (event) => {\n          if (event.preventDefault) {\n            event.preventDefault()\n          }\n          event.dataTransfer.dropEffect = 'move'\n          return false\n        })\n\n        // Listeners for stationary items being dragged over:\n\n        this.element.addEventListener('dragenter', (event) => {\n          // Part 1 of a hack, inspired by Dragster, to simulate mouseover and mouseout\n          // behavior while dragging items - http://bensmithett.github.io/dragster/\n          if (this.overParentElement) {\n            return this.overChildElement = true\n          } else {\n            this.overParentElement = true\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          if (sourceArrayIndex !== null) {\n            if (this.dataIndex[this.dataIndex.length - 1] < +sourceArrayIndex) {\n              this.element.classList.add('drag-target-top')\n            } else if (this.dataIndex[this.dataIndex.length - 1] > +sourceArrayIndex) {\n              this.element.classList.add('drag-target-bottom')\n            }\n          }\n        })\n\n        this.element.addEventListener('dragleave', (event) => {\n          // Part 2 of the Dragster hack\n          if (this.overChildElement) {\n            this.overChildElement = false\n          } else if (this.overParentElement) {\n            this.overParentElement = false\n          }\n\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          if (!this.overParentElement && !this.overChildElement && sourceArrayIndex !== null) {\n            this.element.classList.remove('drag-target-top')\n            this.element.classList.remove('drag-target-bottom')\n          }\n        })\n\n        this.element.addEventListener('drop', (event) => {\n          this.element.classList.remove('drag-target-top')\n          this.element.classList.remove('drag-target-bottom')\n          // Confirm that drop target is another item in the same array as source item\n          const sourceArrayIndex = sessionStorage.getItem(this.arrayLayoutIndex)\n          const destArrayIndex = this.dataIndex[this.dataIndex.length - 1]\n          if (sourceArrayIndex !== null && +sourceArrayIndex !== destArrayIndex) {\n            // Move array item\n            this.jsf.moveArrayItem(this, +sourceArrayIndex, destArrayIndex)\n          }\n          sessionStorage.removeItem(this.arrayLayoutIndex)\n          return false\n        })\n      })\n    }\n  }\n}\n","import {isArray, isObject, isString, hasOwn} from '@ngsf/common'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n/**\n * 'buildTitleMap' function\n */\nexport function buildTitleMap(\n  titleMap: any,\n  enumList: any,\n  fieldRequired: boolean = true,\n  flatList: boolean = true\n): TitleMapItem[] {\n  let newTitleMap: TitleMapItem[] = []\n  let hasEmptyValue = false\n  if (titleMap) {\n    if (isArray(titleMap)) {\n      if (enumList) {\n        for (const i of Object.keys(titleMap)) {\n          if (isObject(titleMap[i])) { // JSON Form style\n            const value = titleMap[i].value\n            if (enumList.includes(value)) {\n              const name = titleMap[i].name\n              newTitleMap.push({name, value})\n              if (value === undefined || value === null) {\n                hasEmptyValue = true\n              }\n            }\n          } else if (isString(titleMap[i])) { // React Jsonschema Form style\n            if (i < enumList.length) {\n              const name = titleMap[i]\n              const value = enumList[i]\n              newTitleMap.push({name, value})\n              if (value === undefined || value === null) {\n                hasEmptyValue = true\n              }\n            }\n          }\n        }\n      } else { // If array titleMap and no enum list, just return the titleMap - Angular Schema Form style\n        newTitleMap = titleMap\n        if (!fieldRequired) {\n          hasEmptyValue = !!newTitleMap\n            .filter(i => i.value === undefined || i.value === null)\n            .length\n        }\n      }\n    } else if (enumList) { // Alternate JSON Form style, with enum list\n      for (const i of Object.keys(enumList)) {\n        const value = enumList[i]\n        if (hasOwn(titleMap, value)) {\n          const name = titleMap[value]\n          newTitleMap.push({name, value})\n          if (value === undefined || value === null) {\n            hasEmptyValue = true\n          }\n        }\n      }\n    } else { // Alternate JSON Form style, without enum list\n      for (const value of Object.keys(titleMap)) {\n        const name = titleMap[value]\n        newTitleMap.push({name, value})\n        if (value === undefined || value === null) {\n          hasEmptyValue = true\n        }\n      }\n    }\n  } else if (enumList) { // Build map from enum list alone\n    for (const i of Object.keys(enumList)) {\n      const name = enumList[i]\n      const value = enumList[i]\n      newTitleMap.push({name, value})\n      if (value === undefined || value === null) {\n        hasEmptyValue = true\n      }\n    }\n  } else { // If no titleMap and no enum list, return default map of boolean values\n    newTitleMap = [{name: 'True', value: true}, {name: 'False', value: false}]\n  }\n\n  // Does titleMap have groups?\n  if (newTitleMap.some(title => hasOwn(title, 'group'))) {\n    hasEmptyValue = false\n\n    // If flatList = true, flatten items & update name to group: name\n    if (flatList) {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (isArray(title.items)) {\n            groupTitleMap = [\n              ...groupTitleMap,\n              ...title.items.map(item =>\n                ({...item, ...{name: `${title.group}: ${item.name}`}})\n              )\n            ]\n            if (title.items.some(item => item.value === undefined || item.value === null)) {\n              hasEmptyValue = true\n            }\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            title.name = `${title.group}: ${title.name}`\n            delete title.group\n            groupTitleMap.push(title)\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true\n            }\n          }\n        } else {\n          groupTitleMap.push(title)\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true\n          }\n        }\n        return groupTitleMap\n      }, [])\n\n      // If flatList = false, combine items from matching groups\n    } else {\n      newTitleMap = newTitleMap.reduce((groupTitleMap, title) => {\n        if (hasOwn(title, 'group')) {\n          if (title.group !== (groupTitleMap[groupTitleMap.length - 1] || {}).group) {\n            groupTitleMap.push({group: title.group, items: title.items || []})\n          }\n          if (hasOwn(title, 'name') && hasOwn(title, 'value')) {\n            groupTitleMap[groupTitleMap.length - 1].items\n              .push({name: title.name, value: title.value})\n            if (title.value === undefined || title.value === null) {\n              hasEmptyValue = true\n            }\n          }\n        } else {\n          groupTitleMap.push(title)\n          if (title.value === undefined || title.value === null) {\n            hasEmptyValue = true\n          }\n        }\n        return groupTitleMap\n      }, [])\n    }\n  }\n  if (!fieldRequired && !hasEmptyValue) {\n    newTitleMap.unshift({name: '<em>None</em>', value: null})\n  }\n  return newTitleMap\n}\n","export interface TitleMapItem {\n  name?: string\n  value?: any\n  checked?: boolean\n  group?: string\n  items?: TitleMapItem[]\n}\n","export interface ErrorMessages {\n  // [controlName: string]: { message: string | Function | Object, code: string }[]\n  [controlName: string]: { message: any, code: string }[]\n}\n\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'add-reference-widget',\n  template: `\n      <button *ngIf=\"showAddButton\"\n              [class]=\"options?.fieldHtmlClass || ''\"\n              [disabled]=\"options?.readonly\"\n              (click)=\"addItem($event)\">\n          <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n          <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n      </button>`,\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class AddReferenceComponent implements OnInit {\n  options: any\n  itemCount: number\n  previousLayoutIndex: number[]\n  previousDataIndex: number[]\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get showAddButton(): boolean {\n    return !this.layoutNode.arrayItem ||\n      this.layoutIndex[this.layoutIndex.length - 1] < this.options.maxItems\n  }\n\n  get buttonText(): string {\n    const parent: any = {\n      dataIndex: this.dataIndex.slice(0, -1),\n      layoutIndex: this.layoutIndex.slice(0, -1),\n      layoutNode: this.jsf.getParentNode(this)\n    }\n    return parent.layoutNode.add ||\n      this.jsf.setArrayItemTitle(parent, this.layoutNode, this.itemCount)\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n\n  addItem(event) {\n    event.preventDefault()\n    this.jsf.addItem(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'one-of-widget',\n  template: ``,\n})\nexport class OneOfComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'button-widget',\n  template: `\n      <div\n              [class]=\"options?.htmlClass || ''\">\n          <button\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [class]=\"options?.fieldHtmlClass || ''\"\n                  [disabled]=\"controlDisabled\"\n                  [name]=\"controlName\"\n                  [type]=\"layoutNode?.type\"\n                  [value]=\"controlValue\"\n                  (click)=\"updateValue($event)\">\n        <span *ngIf=\"options?.icon || options?.title\"\n              [class]=\"options?.icon\"\n              [innerHTML]=\"options?.title\"></span>\n          </button>\n      </div>`,\n})\nexport class ButtonComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'checkbox-widget',\n  template: `\n      <label\n              [attr.for]=\"'control' + layoutNode?._id\"\n              [class]=\"options?.itemLabelHtmlClass || ''\">\n          <input *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 type=\"checkbox\">\n          <input *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [checked]=\"isChecked ? 'checked' : null\"\n                 [class]=\"(options?.fieldHtmlClass || '') + (isChecked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [value]=\"controlValue\"\n                 type=\"checkbox\"\n                 (change)=\"updateValue($event)\">\n          <span *ngIf=\"options?.title\"\n                [style.display]=\"options?.notitle ? 'none' : ''\"\n                [innerHTML]=\"options?.title\"></span>\n      </label>`,\n})\nexport class CheckboxComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  trueValue: any = true\n  falseValue: any = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get isChecked() {\n    return this.jsf.getFormControlValue(this) === this.trueValue\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title\n    }\n  }\n\n  updateValue(event) {\n    event.preventDefault()\n    this.jsf.updateValue(this, event.target.checked ? this.trueValue : this.falseValue)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap} from '../functions/buildTitleMap'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\nimport {TitleMapItem} from '../interfaces/title-map-item'\n\n@Component({\n  selector: 'checkboxes-widget',\n  template: `\n      <label *ngIf=\"options?.title\"\n             [class]=\"options?.labelHtmlClass || ''\"\n             [style.display]=\"options?.notitle ? 'none' : ''\"\n             [innerHTML]=\"options?.title\"></label>\n\n      <!-- 'horizontal' = checkboxes-inline or checkboxbuttons -->\n      <div *ngIf=\"layoutOrientation === 'horizontal'\" [class]=\"options?.htmlClass || ''\">\n          <label *ngFor=\"let checkboxItem of checkboxList\"\n                 [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                 [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n              <input type=\"checkbox\"\n                     [attr.required]=\"options?.required\"\n                     [checked]=\"checkboxItem.checked\"\n                     [class]=\"options?.fieldHtmlClass || ''\"\n                     [disabled]=\"controlDisabled\"\n                     [id]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                     [name]=\"checkboxItem?.name\"\n                     [readonly]=\"options?.readonly ? 'readonly' : null\"\n                     [value]=\"checkboxItem.value\"\n                     (change)=\"updateValue($event)\">\n              <span [innerHTML]=\"checkboxItem.name\"></span>\n          </label>\n      </div>\n\n      <!-- 'vertical' = regular checkboxes -->\n      <div *ngIf=\"layoutOrientation === 'vertical'\">\n          <div *ngFor=\"let checkboxItem of checkboxList\" [class]=\"options?.htmlClass || ''\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id + '/' + checkboxItem.value\"\n                      [class]=\"(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n                  <input type=\"checkbox\"\n                         [attr.required]=\"options?.required\"\n                         [checked]=\"checkboxItem.checked\"\n                         [class]=\"options?.fieldHtmlClass || ''\"\n                         [disabled]=\"controlDisabled\"\n                         [id]=\"options?.name + '/' + checkboxItem.value\"\n                         [name]=\"checkboxItem?.name\"\n                         [readonly]=\"options?.readonly ? 'readonly' : null\"\n                         [value]=\"checkboxItem.value\"\n                         (change)=\"updateValue($event)\">\n                  <span [innerHTML]=\"checkboxItem?.name\"></span>\n              </label>\n          </div>\n      </div>`,\n})\nexport class CheckboxesComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  layoutOrientation: string\n  formArray: AbstractControl\n  checkboxList: TitleMapItem[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.layoutOrientation = (this.layoutNode.type === 'checkboxes-inline' ||\n      this.layoutNode.type === 'checkboxbuttons') ? 'horizontal' : 'vertical'\n    this.jsf.initializeControl(this)\n    this.checkboxList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames, this.options.enum, true\n    )\n    if (this.boundControl) {\n      const formArray = this.jsf.getFormControl(this)\n      this.checkboxList.forEach(checkboxItem =>\n        checkboxItem.checked = formArray.value.includes(checkboxItem.value)\n      )\n    }\n  }\n\n  updateValue(event) {\n    for (const checkboxItem of this.checkboxList) {\n      if (event.target.value === checkboxItem.value) {\n        checkboxItem.checked = event.target.checked\n      }\n    }\n    if (this.boundControl) {\n      this.jsf.updateArrayCheckboxList(this, this.checkboxList)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n// TODO: Add this control\n\n@Component({\n  selector: 'file-widget',\n  template: ``,\n})\nexport class FileComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'input-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <input *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\">\n      <input *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [readonly]=\"options?.readonly ? 'readonly' : null\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">\n        <datalist *ngIf=\"options?.typeahead?.source\"\n          [id]=\"'control' + layoutNode?._id + 'Autocomplete'\">\n          <option *ngFor=\"let word of options?.typeahead?.source\" [value]=\"word\">\n        </datalist>\n    </div>`,\n})\nexport class InputComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: string\n  controlDisabled = false\n  boundControl = false\n  options: any\n  autoCompleteList: string[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'message-widget',\n  template: `\n    <span *ngIf=\"message\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [innerHTML]=\"message\"></span>`,\n})\nexport class MessageComponent implements OnInit {\n  options: any\n  message: string = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.message = this.options.help || this.options.helpvalue ||\n      this.options.msg || this.options.message\n  }\n}\n","import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'none-widget',\n  template: ``,\n})\nexport class NoneComponent {\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'number-widget',\n  template: `\n      <div [class]=\"options?.htmlClass || ''\">\n          <label *ngIf=\"options?.title\"\n                 [attr.for]=\"'control' + layoutNode?._id\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [style.display]=\"options?.notitle ? 'none' : ''\"\n                 [innerHTML]=\"options?.title\"></label>\n          <input *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.placeholder]=\"options?.placeholder\"\n                 [attr.required]=\"options?.required\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [class]=\"options?.fieldHtmlClass || ''\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [title]=\"lastValidNumber\"\n                 [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\">\n          <input *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.placeholder]=\"options?.placeholder\"\n                 [attr.required]=\"options?.required\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [class]=\"options?.fieldHtmlClass || ''\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [title]=\"lastValidNumber\"\n                 [type]=\"layoutNode?.type === 'range' ? 'range' : 'number'\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\">\n          <span *ngIf=\"layoutNode?.type === 'range'\" [innerHTML]=\"controlValue\"></span>\n      </div>`,\n})\nexport class NumberComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  allowNegative = true\n  allowDecimal = true\n  allowExponents = false\n  lastValidNumber = ''\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (this.layoutNode.dataType === 'integer') {\n      this.allowDecimal = false\n    }\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {buildTitleMap} from '../functions/buildTitleMap'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'radios-widget',\n  template: `\n    <label *ngIf=\"options?.title\"\n      [attr.for]=\"'control' + layoutNode?._id\"\n      [class]=\"options?.labelHtmlClass || ''\"\n      [style.display]=\"options?.notitle ? 'none' : ''\"\n      [innerHTML]=\"options?.title\"></label>\n\n    <!-- 'horizontal' = radios-inline or radiobuttons -->\n    <div *ngIf=\"layoutOrientation === 'horizontal'\"\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngFor=\"let radioItem of radiosList\"\n        [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n        [class]=\"(options?.itemLabelHtmlClass || '') +\n          ((controlValue + '' === radioItem?.value + '') ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + (options?.style?.unselected || '')))\">\n        <input type=\"radio\"\n          [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n          [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n          [attr.required]=\"options?.required\"\n          [checked]=\"radioItem?.value === controlValue\"\n          [class]=\"options?.fieldHtmlClass || ''\"\n          [disabled]=\"controlDisabled\"\n          [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [name]=\"controlName\"\n          [value]=\"radioItem?.value\"\n          (change)=\"updateValue($event)\">\n        <span [innerHTML]=\"radioItem?.name\"></span>\n      </label>\n    </div>\n\n    <!-- 'vertical' = regular radios -->\n    <div *ngIf=\"layoutOrientation !== 'horizontal'\">\n      <div *ngFor=\"let radioItem of radiosList\"\n        [class]=\"options?.htmlClass || ''\">\n        <label\n          [attr.for]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n          [class]=\"(options?.itemLabelHtmlClass || '') +\n            ((controlValue + '' === radioItem?.value + '') ?\n            (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n            (' ' + (options?.style?.unselected || '')))\">\n          <input type=\"radio\"\n            [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n            [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n            [attr.required]=\"options?.required\"\n            [checked]=\"radioItem?.value === controlValue\"\n            [class]=\"options?.fieldHtmlClass || ''\"\n            [disabled]=\"controlDisabled\"\n            [id]=\"'control' + layoutNode?._id + '/' + radioItem?.value\"\n            [name]=\"controlName\"\n            [value]=\"radioItem?.value\"\n            (change)=\"updateValue($event)\">\n          <span [innerHTML]=\"radioItem?.name\"></span>\n        </label>\n      </div>\n    </div>`,\n})\nexport class RadiosComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  layoutOrientation = 'vertical'\n  radiosList: any[] = []\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    if (this.layoutNode.type === 'radios-inline' ||\n      this.layoutNode.type === 'radiobuttons'\n    ) {\n      this.layoutOrientation = 'horizontal'\n    }\n    this.radiosList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, true\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Component, Input} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'root-widget',\n  template: `\n    <div *ngFor=\"let layoutItem of layout; let i = index\"\n      [class.form-flex-item]=\"isFlexItem\"\n      [style.align-self]=\"(layoutItem.options || {})['align-self']\"\n      [style.flex-basis]=\"getFlexAttribute(layoutItem, 'flex-basis')\"\n      [style.flex-grow]=\"getFlexAttribute(layoutItem, 'flex-grow')\"\n      [style.flex-shrink]=\"getFlexAttribute(layoutItem, 'flex-shrink')\"\n      [style.order]=\"(layoutItem.options || {}).order\">\n      <div\n        [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"\n        [orderable]=\"isDraggable(layoutItem)\">\n        <select-framework-widget *ngIf=\"showWidget(layoutItem)\"\n          [dataIndex]=\"layoutItem?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n          [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n          [layoutNode]=\"layoutItem\"></select-framework-widget>\n      </div>\n    </div>`,\n  styles: [`\n    [draggable=true] {\n      transition: all 150ms cubic-bezier(.4, 0, .2, 1);\n    }\n    [draggable=true]:hover {\n      cursor: move;\n      box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n      position: relative; z-index: 10;\n      margin-top: -1px;\n      margin-left: -1px;\n      margin-right: 1px;\n      margin-bottom: 1px;\n    }\n    [draggable=true].drag-target-top {\n      box-shadow: 0 -2px 0 #000;\n      position: relative; z-index: 20;\n    }\n    [draggable=true].drag-target-bottom {\n      box-shadow: 0 2px 0 #000;\n      position: relative; z-index: 20;\n    }\n  `],\n})\nexport class RootComponent {\n  options: any\n  @Input() dataIndex: number[]\n  @Input() layoutIndex: number[]\n  @Input() layout: any[]\n  @Input() isOrderable: boolean\n  @Input() isFlexItem = false\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  isDraggable(node: any): boolean {\n    return node.arrayItem && node.type !== '$ref' &&\n      node.arrayItemType === 'list' && this.isOrderable !== false\n  }\n\n  // Set attributes for flexbox child\n  // (container attributes are set in section.component)\n  getFlexAttribute(node: any, attribute: string) {\n    const index = ['flex-grow', 'flex-shrink', 'flex-basis'].indexOf(attribute)\n    return ((node.options || {}).flex || '').split(/\\s+/)[index] ||\n      (node.options || {})[attribute] || ['1', '1', 'auto'][index]\n  }\n\n  showWidget(layoutNode: any): boolean {\n    return this.jsf.evaluateCondition(layoutNode, this.dataIndex)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'section-widget',\n  template: `\n      <div *ngIf=\"containerType === 'div'\"\n           [class]=\"options?.htmlClass || ''\"\n           [class.expandable]=\"options?.expandable && !expanded\"\n           [class.expanded]=\"options?.expandable && expanded\">\n          <label *ngIf=\"sectionTitle\"\n                 class=\"legend\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [innerHTML]=\"sectionTitle\"\n                 (click)=\"toggleExpanded()\"></label>\n          <root-widget *ngIf=\"expanded\"\n                       [dataIndex]=\"dataIndex\"\n                       [layout]=\"layoutNode.items\"\n                       [layoutIndex]=\"layoutIndex\"\n                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                       [isOrderable]=\"options?.orderable\"\n                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                       [style.display]=\"getFlexAttribute('display')\"\n                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                       [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n      </div>\n      <fieldset *ngIf=\"containerType === 'fieldset'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\"\n                [disabled]=\"options?.readonly\">\n          <legend *ngIf=\"sectionTitle\"\n                  class=\"legend\"\n                  [class]=\"options?.labelHtmlClass || ''\"\n                  [innerHTML]=\"sectionTitle\"\n                  (click)=\"toggleExpanded()\"></legend>\n          <div *ngIf=\"options?.messageLocation !== 'bottom'\">\n              <p *ngIf=\"options?.description\"\n                 class=\"help-block\"\n                 [class]=\"options?.labelHelpBlockClass || ''\"\n                 [innerHTML]=\"options?.description\"></p>\n          </div>\n          <root-widget *ngIf=\"expanded\"\n                       [dataIndex]=\"dataIndex\"\n                       [layout]=\"layoutNode.items\"\n                       [layoutIndex]=\"layoutIndex\"\n                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                       [isOrderable]=\"options?.orderable\"\n                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                       [style.display]=\"getFlexAttribute('display')\"\n                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                       [style.justify-content]=\"getFlexAttribute('justify-content')\"></root-widget>\n          <div *ngIf=\"options?.messageLocation === 'bottom'\">\n              <p *ngIf=\"options?.description\"\n                 class=\"help-block\"\n                 [class]=\"options?.labelHelpBlockClass || ''\"\n                 [innerHTML]=\"options?.description\"></p>\n          </div>\n      </fieldset>`,\n  styles: [`\n    .legend { font-weight: bold; }\n    .expandable > legend:before, .expandable > label:before  { content: '▶'; padding-right: .3em; }\n    .expanded > legend:before, .expanded > label:before  { content: '▼'; padding-right: .2em; }\n  `],\n})\nexport class SectionComponent implements OnInit {\n  options: any\n  expanded = true\n  containerType: string\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  get sectionTitle() {\n    return this.options.notitle ? null : this.jsf.setItemTitle(this)\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n    this.options = this.layoutNode.options || {}\n    this.expanded = typeof this.options.expanded === 'boolean' ?\n      this.options.expanded : !this.options.expandable\n    switch (this.layoutNode.type) {\n      case 'fieldset':\n      case 'array':\n      case 'tab':\n      case 'advancedfieldset':\n      case 'authfieldset':\n      case 'optionfieldset':\n      case 'selectfieldset':\n        this.containerType = 'fieldset'\n        break\n      default: // 'div', 'flex', 'section', 'conditional', 'actions', 'tagsinput'\n        this.containerType = 'div'\n        break\n    }\n  }\n\n  toggleExpanded() {\n    if (this.options.expandable) {\n      this.expanded = !this.expanded\n    }\n  }\n\n  // Set attributes for flexbox container\n  // (child attributes are set in root.component)\n  getFlexAttribute(attribute: string) {\n    const flexActive: boolean =\n      this.layoutNode.type === 'flex' ||\n      !!this.options.displayFlex ||\n      this.options.display === 'flex'\n    if (attribute !== 'flex' && !flexActive) {\n      return null\n    }\n    switch (attribute) {\n      case 'is-flex':\n        return flexActive\n      case 'display':\n        return flexActive ? 'flex' : 'initial'\n      case 'flex-direction':\n      case 'flex-wrap':\n        const index = ['flex-direction', 'flex-wrap'].indexOf(attribute)\n        return (this.options['flex-flow'] || '').split(/\\s+/)[index] ||\n          this.options[attribute] || ['column', 'nowrap'][index]\n      case 'justify-content':\n      case 'align-items':\n      case 'align-content':\n        return this.options[attribute]\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {isArray} from '@ngsf/common'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\nimport {buildTitleMap} from '../functions/buildTitleMap'\n\n@Component({\n  selector: 'select-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <select *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n      <select *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        (change)=\"updateValue($event)\">\n        <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n          <option *ngIf=\"!isArray(selectItem?.items)\"\n            [selected]=\"selectItem?.value === controlValue\"\n            [value]=\"selectItem?.value\">\n            <span [innerHTML]=\"selectItem?.name\"></span>\n          </option>\n          <optgroup *ngIf=\"isArray(selectItem?.items)\"\n            [label]=\"selectItem?.group\">\n            <option *ngFor=\"let subItem of selectItem.items\"\n              [attr.selected]=\"subItem?.value === controlValue\"\n              [value]=\"subItem?.value\">\n              <span [innerHTML]=\"subItem?.name\"></span>\n            </option>\n          </optgroup>\n        </ng-template>\n      </select>\n    </div>`,\n})\nexport class SelectComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  selectList: any[] = []\n  isArray = isArray\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.selectList = buildTitleMap(\n      this.options.titleMap || this.options.enumNames,\n      this.options.enum, !!this.options.required, !!this.options.flatList\n    )\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Input,\n  OnChanges,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'select-framework-widget',\n  template: `\n    <div #widgetContainer></div>\n  `,\n})\nexport class SelectFrameworkComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {}\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.jsf.framework) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.jsf.framework as any)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, ComponentFactoryResolver, ComponentRef, Input, OnChanges, OnInit, ViewChild, ViewContainerRef} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'select-widget-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class SelectWidgetComponent implements OnChanges, OnInit {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && (this.layoutNode || {}).widget) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.widget)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {hasOwn} from '@ngsf/common'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'submit-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <input\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [type]=\"layoutNode?.type\"\n        [value]=\"controlValue\"\n        (click)=\"updateValue($event)\">\n    </div>`,\n})\nexport class SubmitComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n    if (hasOwn(this.options, 'disabled')) {\n      this.controlDisabled = this.options.disabled\n    } else if (this.jsf.formOptions.disableInvalidSubmit) {\n      this.controlDisabled = !this.jsf.isValid\n      this.jsf.isValidChanges.subscribe(isValid => this.controlDisabled = !isValid)\n    }\n    if (this.controlValue === null || this.controlValue === undefined) {\n      this.controlValue = this.options.title\n    }\n  }\n\n  updateValue(event) {\n    if (typeof this.options.onClick === 'function') {\n      this.options.onClick(event)\n    } else {\n      this.jsf.updateValue(this, event.target.value)\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'tabs-widget',\n  template: `\n    <ul\n      [class]=\"options?.labelHtmlClass || ''\">\n      <li *ngFor=\"let item of layoutNode?.items; let i = index\"\n        [class]=\"(options?.itemLabelHtmlClass || '') + (selectedItem === i ?\n          (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :\n          (' ' + options?.style?.unselected))\"\n        role=\"presentation\"\n        data-tabs>\n        <a *ngIf=\"showAddTab || item.type !== '$ref'\"\n           [class]=\"'nav-link' + (selectedItem === i ? (' ' + options?.activeClass + ' ' + options?.style?.selected) :\n            (' ' + options?.style?.unselected))\"\n          [innerHTML]=\"setTabTitle(item, i)\"\n          (click)=\"select(i)\"></a>\n      </li>\n    </ul>\n\n    <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n      [class]=\"options?.htmlClass || ''\">\n\n      <select-framework-widget *ngIf=\"selectedItem === i\"\n        [class]=\"(options?.fieldHtmlClass || '') +\n          ' ' + (options?.activeClass || '') +\n          ' ' + (options?.style?.selected || '')\"\n        [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n        [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n        [layoutNode]=\"layoutItem\"></select-framework-widget>\n\n    </div>`,\n  styles: [` a { cursor: pointer; } `],\n})\nexport class TabsComponent implements OnInit {\n  options: any\n  itemCount: number\n  selectedItem = 0\n  showAddTab = true\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.itemCount = this.layoutNode.items.length - 1\n    this.updateControl()\n  }\n\n  select(index) {\n    if (this.layoutNode.items[index].type === '$ref') {\n      this.itemCount = this.layoutNode.items.length\n      this.jsf.addItem({\n        layoutNode: this.layoutNode.items[index],\n        layoutIndex: this.layoutIndex.concat(index),\n        dataIndex: this.dataIndex.concat(index)\n      })\n      this.updateControl()\n    }\n    this.selectedItem = index\n  }\n\n  updateControl() {\n    const lastItem = this.layoutNode.items[this.layoutNode.items.length - 1]\n    if (lastItem.type === '$ref' &&\n      this.itemCount >= (lastItem.options.maxItems || 1000)\n    ) {\n      this.showAddTab = false\n    }\n  }\n\n  setTabTitle(item: any, index: number): string {\n    return this.jsf.setArrayItemTitle(this, item, index)\n  }\n}\n","import {Component, ComponentFactoryResolver, ComponentRef, Input, OnChanges, OnInit, ViewChild, ViewContainerRef} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'template-widget',\n  template: `<div #widgetContainer></div>`,\n})\nexport class TemplateComponent implements OnInit, OnChanges {\n  newComponent: ComponentRef<any> = null\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n  @ViewChild('widgetContainer', {read: ViewContainerRef, static: true})\n  widgetContainer: ViewContainerRef\n\n  constructor(\n    private componentFactory: ComponentFactoryResolver,\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.updateComponent()\n  }\n\n  ngOnChanges() {\n    this.updateComponent()\n  }\n\n  updateComponent() {\n    if (!this.newComponent && this.layoutNode.options.template) {\n      this.newComponent = this.widgetContainer.createComponent(\n        this.componentFactory.resolveComponentFactory(this.layoutNode.options.template)\n      )\n    }\n    if (this.newComponent) {\n      for (const input of ['layoutNode', 'layoutIndex', 'dataIndex']) {\n        this.newComponent.instance[input] = this[input]\n      }\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'textarea-widget',\n  template: `\n    <div\n      [class]=\"options?.htmlClass || ''\">\n      <label *ngIf=\"options?.title\"\n        [attr.for]=\"'control' + layoutNode?._id\"\n        [class]=\"options?.labelHtmlClass || ''\"\n        [style.display]=\"options?.notitle ? 'none' : ''\"\n        [innerHTML]=\"options?.title\"></label>\n      <textarea *ngIf=\"boundControl\"\n        [formControl]=\"formControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"></textarea>\n      <textarea *ngIf=\"!boundControl\"\n        [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n        [attr.maxlength]=\"options?.maxLength\"\n        [attr.minlength]=\"options?.minLength\"\n        [attr.pattern]=\"options?.pattern\"\n        [attr.placeholder]=\"options?.placeholder\"\n        [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n        [attr.required]=\"options?.required\"\n        [class]=\"options?.fieldHtmlClass || ''\"\n        [disabled]=\"controlDisabled\"\n        [id]=\"'control' + layoutNode?._id\"\n        [name]=\"controlName\"\n        [value]=\"controlValue\"\n        (input)=\"updateValue($event)\">{{controlValue}}</textarea>\n    </div>`,\n})\nexport class TextareaComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n    this.jsf.initializeControl(this)\n  }\n\n  updateValue(event) {\n    this.jsf.updateValue(this, event.target.value)\n  }\n}\n","import {Injectable} from '@angular/core'\nimport {hasOwn} from '@ngsf/common'\n\nimport {AddReferenceComponent} from '../components/add-reference.component'\nimport {OneOfComponent} from '../components/one-of.component'\nimport {ButtonComponent} from '../components/button.component'\nimport {CheckboxComponent} from '../components/checkbox.component'\nimport {CheckboxesComponent} from '../components/checkboxes.component'\nimport {FileComponent} from '../components/file.component'\nimport {InputComponent} from '../components/input.component'\nimport {MessageComponent} from '../components/message.component'\nimport {NoneComponent} from '../components/none.component'\nimport {NumberComponent} from '../components/number.component'\nimport {RadiosComponent} from '../components/radios.component'\nimport {RootComponent} from '../components/root.component'\nimport {SectionComponent} from '../components/section.component'\nimport {SelectComponent} from '../components/select.component'\nimport {SelectFrameworkComponent} from '../components/select-framework.component'\nimport {SelectWidgetComponent} from '../components/select-widget.component'\nimport {SubmitComponent} from '../components/submit.component'\nimport {TabsComponent} from '../components/tabs.component'\nimport {TemplateComponent} from '../components/template.component'\nimport {TextareaComponent} from '../components/textarea.component'\n\n@Injectable()\nexport class WidgetLibraryService {\n\n  defaultWidget = 'text'\n  widgetLibrary: any = {\n\n    // Angular JSON Schema Form administrative widgets\n    none: NoneComponent, // Placeholder, for development - displays nothing\n    root: RootComponent, // Form root, renders a complete layout\n    'select-framework': SelectFrameworkComponent, // Applies the selected framework to a specified widget\n    'select-widget': SelectWidgetComponent, // Displays a specified widget\n    $ref: AddReferenceComponent, // Button to add a new array item or $ref element\n\n    // Free-form text HTML 'input' form control widgets <input type=\"...\">\n    email: 'text',\n    integer: 'number', // Note: 'integer' is not a recognized HTML input type\n    number: NumberComponent,\n    password: 'text',\n    search: 'text',\n    tel: 'text',\n    text: InputComponent,\n    ur: 'text',\n\n    // Controlled text HTML 'input' form control widgets <input type=\"...\">\n    color: 'text',\n    date: 'text',\n    datetime: 'text',\n    'datetime-local': 'text',\n    month: 'text',\n    range: 'number',\n    time: 'text',\n    week: 'text',\n\n    // Non-text HTML 'input' form control widgets <input type=\"...\">\n    // 'button': <input type=\"button\"> not used, use <button> instead\n    checkbox: CheckboxComponent, // TODO: Set ternary = true for 3-state ??\n    file: FileComponent, // TODO: Finish 'file' widget\n    hidden: 'text',\n    image: 'text', // TODO: Figure out how to handle these\n    radio: 'radios',\n    reset: 'submit', // TODO: Figure out how to handle these\n    submit: SubmitComponent,\n\n    // Other (non-'input') HTML form control widgets\n    button: ButtonComponent,\n    select: SelectComponent,\n    // 'option': automatically generated by select widgets\n    // 'optgroup': automatically generated by select widgets\n    textarea: TextareaComponent,\n\n    // HTML form control widget sets\n    checkboxes: CheckboxesComponent, // Grouped list of checkboxes\n    'checkboxes-inline': 'checkboxes', // Checkboxes in one line\n    checkboxbuttons: 'checkboxes', // Checkboxes as html buttons\n    radios: RadiosComponent, // Grouped list of radio buttons\n    'radios-inline': 'radios', // Radio controls in one line\n    radiobuttons: 'radios', // Radio controls as html buttons\n\n    // HTML Layout widgets\n    // 'label': automatically added to data widgets\n    // 'legend': automatically added to fieldsets\n    section: SectionComponent, // Just a div <div>\n    div: 'section', // Still just a div <div>\n    fieldset: 'section', // A fieldset, with an optional legend <fieldset>\n    flex: 'section', // A flexbox container <div style=\"display: flex\">\n\n    // Non-HTML layout widgets\n    'one-of': OneOfComponent, // A select box that changes another input\n                              // TODO: Finish 'one-of' widget\n    array: 'section', // A list you can add, remove and reorder <fieldset>\n    tabarray: 'tabs', // A tabbed version of array\n    tab: 'section', // A tab group, similar to a fieldset or section <fieldset>\n    tabs: TabsComponent, // A tabbed set of panels with different controls\n    message: MessageComponent, // Insert arbitrary html\n    help: 'message', // Insert arbitrary html\n    msg: 'message', // Insert arbitrary html\n    html: 'message', // Insert arbitrary html\n    template: TemplateComponent, // Insert a custom Angular component\n\n    // Widgets included for compatibility with JSON Form API\n    advancedfieldset: 'section', // Adds 'Advanced settings' title <fieldset>\n    authfieldset: 'section', // Adds 'Authentication settings' title <fieldset>\n    optionfieldset: 'one-of', // Option control, displays selected sub-item <fieldset>\n    selectfieldset: 'one-of', // Select control, displays selected sub-item <fieldset>\n    conditional: 'section', // Identical to 'section' (depeciated) <div>\n    actions: 'section', // Horizontal button list, can only submit, uses buttons as items <div>\n    tagsinput: 'section', // For entering short text tags <div>\n    // See: http://ulion.github.io/jsonform/playground/?example=fields-checkboxbuttons\n\n    // Widgets included for compatibility with React JSON Schema Form API\n    updown: 'number',\n    'date-time': 'datetime-local',\n    'alt-datetime': 'datetime-local',\n    'alt-date': 'date',\n\n    // Widgets included for compatibility with Angular Schema Form API\n    wizard: 'section', // TODO: Sequential panels with \"Next\" and \"Previous\" buttons\n\n    // Widgets included for compatibility with other libraries\n    textline: 'text',\n\n    // Recommended 3rd-party add-on widgets (TODO: create wrappers for these...)\n    // 'ng2-select': Select control replacement - http://valor-software.com/ng2-select/\n    // 'flatpickr': Flatpickr date picker - https://github.com/chmln/flatpickr\n    // 'pikaday': Pikaday date picker - https://github.com/dbushell/Pikaday\n    // 'spectrum': Spectrum color picker - http://bgrins.github.io/spectrum\n    // 'bootstrap-slider': Bootstrap Slider range control - https://github.com/seiyria/bootstrap-slider\n    // 'ace': ACE code editor - https://ace.c9.io\n    // 'ckeditor': CKEditor HTML / rich text editor - http://ckeditor.com\n    // 'tinymce': TinyMCE HTML / rich text editor - https://www.tinymce.com\n    // 'imageselect': Bootstrap drop-down image selector - http://silviomoreto.github.io/bootstrap-select\n    // 'wysihtml5': HTML editor - http://jhollingworth.github.io/bootstrap-wysihtml5\n    // 'quill': Quill HTML / rich text editor (?) - https://quilljs.com\n  }\n  registeredWidgets: any = {}\n  frameworkWidgets: any = {}\n  activeWidgets: any = {}\n\n  constructor() {\n    this.setActiveWidgets()\n  }\n\n  setActiveWidgets(): boolean {\n    this.activeWidgets = Object.assign(\n      {}, this.widgetLibrary, this.frameworkWidgets, this.registeredWidgets\n    )\n    for (const widgetName of Object.keys(this.activeWidgets)) {\n      let widget: any = this.activeWidgets[widgetName]\n      // Resolve aliases\n      if (typeof widget === 'string') {\n        const usedAliases: string[] = []\n        while (typeof widget === 'string' && !usedAliases.includes(widget)) {\n          usedAliases.push(widget)\n          widget = this.activeWidgets[widget]\n        }\n        if (typeof widget !== 'string') {\n          this.activeWidgets[widgetName] = widget\n        }\n      }\n    }\n    return true\n  }\n\n  setDefaultWidget(type: string): boolean {\n    if (!this.hasWidget(type)) {\n      return false\n    }\n    this.defaultWidget = type\n    return true\n  }\n\n  hasWidget(type: string, widgetSet = 'activeWidgets'): boolean {\n    if (!type || typeof type !== 'string') {\n      return false\n    }\n    return hasOwn(this[widgetSet], type)\n  }\n\n  hasDefaultWidget(type: string): boolean {\n    return this.hasWidget(type, 'widgetLibrary')\n  }\n\n  registerWidget(type: string, widget: any): boolean {\n    if (!type || !widget || typeof type !== 'string') {\n      return false\n    }\n    this.registeredWidgets[type] = widget\n    return this.setActiveWidgets()\n  }\n\n  unRegisterWidget(type: string): boolean {\n    if (!hasOwn(this.registeredWidgets, type)) {\n      return false\n    }\n    delete this.registeredWidgets[type]\n    return this.setActiveWidgets()\n  }\n\n  unRegisterAllWidgets(unRegisterFrameworkWidgets = true): boolean {\n    this.registeredWidgets = {}\n    if (unRegisterFrameworkWidgets) {\n      this.frameworkWidgets = {}\n    }\n    return this.setActiveWidgets()\n  }\n\n  registerFrameworkWidgets(widgets: any): boolean {\n    if (widgets === null || typeof widgets !== 'object') {\n      widgets = {}\n    }\n    this.frameworkWidgets = widgets\n    return this.setActiveWidgets()\n  }\n\n  unRegisterFrameworkWidgets(): boolean {\n    if (Object.keys(this.frameworkWidgets).length) {\n      this.frameworkWidgets = {}\n      return this.setActiveWidgets()\n    }\n    return false\n  }\n\n  getWidget(type?: string, widgetSet = 'activeWidgets'): any {\n    if (this.hasWidget(type, widgetSet)) {\n      return this[widgetSet][type]\n    } else if (this.hasWidget(this.defaultWidget, widgetSet)) {\n      return this[widgetSet][this.defaultWidget]\n    } else {\n      return null\n    }\n  }\n\n  getAllWidgets(): any {\n    return {\n      widgetLibrary: this.widgetLibrary,\n      registeredWidgets: this.registeredWidgets,\n      frameworkWidgets: this.frameworkWidgets,\n      activeWidgets: this.activeWidgets,\n    }\n  }\n}\n","import {Inject, Injectable} from '@angular/core'\nimport {WidgetLibraryService} from './widget-library.service'\nimport {hasOwn, Framework} from '@ngsf/common'\n\n// Possible future frameworks:\n// - Foundation 6:\n//   http://justindavis.co/2017/06/15/using-foundation-6-in-angular-4/\n//   https://github.com/zurb/foundation-sites\n// - Semantic UI:\n//   https://github.com/edcarroll/ng2-semantic-ui\n//   https://github.com/vladotesanovic/ngSemantic\n\n@Injectable()\nexport class FrameworkLibraryService {\n  activeFramework: Framework = null\n  stylesheets: (HTMLStyleElement | HTMLLinkElement)[]\n  scripts: HTMLScriptElement[]\n  loadExternalAssets = false\n  defaultFramework: string\n  frameworkLibrary: { [name: string]: Framework } = {}\n\n  constructor(\n    @Inject(Framework) private frameworks: any[],\n    @Inject(WidgetLibraryService) private widgetLibrary: WidgetLibraryService\n  ) {\n    this.frameworks.forEach(framework =>\n      this.frameworkLibrary[framework.name] = framework\n    )\n    this.defaultFramework = this.frameworks[0].name\n    this.setFramework(this.defaultFramework)\n  }\n\n  public setLoadExternalAssets(loadExternalAssets = true): void {\n    this.loadExternalAssets = !!loadExternalAssets\n  }\n\n  public setFramework(\n    framework: string | Framework = this.defaultFramework,\n    loadExternalAssets = this.loadExternalAssets\n  ): boolean {\n    this.activeFramework =\n      typeof framework === 'string' && this.hasFramework(framework) ?\n        this.frameworkLibrary[framework] :\n        typeof framework === 'object' && hasOwn(framework, 'framework') ?\n          framework :\n          this.frameworkLibrary[this.defaultFramework]\n    return this.registerFrameworkWidgets(this.activeFramework)\n  }\n\n  registerFrameworkWidgets(framework: Framework): boolean {\n    return hasOwn(framework, 'widgets') ?\n      this.widgetLibrary.registerFrameworkWidgets(framework.widgets) :\n      this.widgetLibrary.unRegisterFrameworkWidgets()\n  }\n\n  public hasFramework(type: string): boolean {\n    return hasOwn(this.frameworkLibrary, type)\n  }\n\n  public getFramework(): any {\n    if (!this.activeFramework) {\n      this.setFramework('default', true)\n    }\n    return this.activeFramework.framework\n  }\n\n  public getFrameworkWidgets(): any {\n    return this.activeFramework.widgets || {}\n  }\n\n  public getFrameworkStylesheets(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.stylesheets) || []\n  }\n\n  public getFrameworkScripts(load: boolean = this.loadExternalAssets): string[] {\n    return (load && this.activeFramework.scripts) || []\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {AbstractControl} from '@angular/forms'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'hidden-widget',\n  template: `\n    <input *ngIf=\"boundControl\"\n      [formControl]=\"formControl\"\n      [id]=\"'control' + layoutNode?._id\"\n      [name]=\"controlName\"\n      type=\"hidden\">\n    <input *ngIf=\"!boundControl\"\n      [disabled]=\"controlDisabled\"\n      [name]=\"controlName\"\n      [id]=\"'control' + layoutNode?._id\"\n      type=\"hidden\"\n      [value]=\"controlValue\">`,\n})\nexport class HiddenComponent implements OnInit {\n  formControl: AbstractControl\n  controlName: string\n  controlValue: any\n  controlDisabled = false\n  boundControl = false\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.jsf.initializeControl(this)\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core'\nimport {JsonSchemaFormService} from '../services/json-schema-form.service'\n\n@Component({\n  selector: 'tab-widget',\n  template: `\n    <div [class]=\"options?.htmlClass || ''\">\n      <root-widget\n        [dataIndex]=\"dataIndex\"\n        [layoutIndex]=\"layoutIndex\"\n        [layout]=\"layoutNode.items\"></root-widget>\n    </div>`,\n})\nexport class TabComponent implements OnInit {\n  options: any\n  @Input() layoutNode: any\n  @Input() layoutIndex: number[]\n  @Input() dataIndex: number[]\n\n  constructor(\n    private jsf: JsonSchemaFormService\n  ) {\n  }\n\n  ngOnInit() {\n    this.options = this.layoutNode.options || {}\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core'\nimport {CommonModule} from '@angular/common'\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\nimport {JsonSchemaFormService} from './services/json-schema-form.service'\nimport {OrderableDirective} from './directives/orderable.directive'\n\nimport {AddReferenceComponent} from './components/add-reference.component'\nimport {ButtonComponent} from './components/button.component'\nimport {CheckboxComponent} from './components/checkbox.component'\nimport {CheckboxesComponent} from './components/checkboxes.component'\nimport {FileComponent} from './components/file.component'\nimport {HiddenComponent} from './components/hidden.component'\nimport {InputComponent} from './components/input.component'\nimport {MessageComponent} from './components/message.component'\nimport {NoneComponent} from './components/none.component'\nimport {NumberComponent} from './components/number.component'\nimport {OneOfComponent} from './components/one-of.component'\nimport {RadiosComponent} from './components/radios.component'\nimport {RootComponent} from './components/root.component'\nimport {SectionComponent} from './components/section.component'\nimport {SelectComponent} from './components/select.component'\nimport {SelectFrameworkComponent} from './components/select-framework.component'\nimport {SelectWidgetComponent} from './components/select-widget.component'\nimport {SubmitComponent} from './components/submit.component'\nimport {TabComponent} from './components/tab.component'\nimport {TabsComponent} from './components/tabs.component'\nimport {TemplateComponent} from './components/template.component'\nimport {TextareaComponent} from './components/textarea.component'\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n\n    OrderableDirective,\n  ],\n  entryComponents: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n  ],\n  exports: [\n    AddReferenceComponent,\n    OneOfComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    CheckboxesComponent,\n    FileComponent,\n    HiddenComponent,\n    InputComponent,\n    MessageComponent,\n    NoneComponent,\n    NumberComponent,\n    RadiosComponent,\n    RootComponent,\n    SectionComponent,\n    SelectComponent,\n    SelectFrameworkComponent,\n    SelectWidgetComponent,\n    SubmitComponent,\n    TabComponent,\n    TabsComponent,\n    TemplateComponent,\n    TextareaComponent,\n\n    OrderableDirective,\n  ],\n  providers: [JsonSchemaFormService],\n})\nexport class WidgetLibraryModule {\n  static forRoot(): ModuleWithProviders<WidgetLibraryModule> {\n    return {\n      ngModule: WidgetLibraryModule,\n      providers: [JsonSchemaFormService],\n    }\n  }\n}\n"],"names":["Subject","frValidationMessages","enValidationMessages","_.cloneDeep","forEach","formatFormData","buildFormGroupTemplate","buildFormGroup","buildLayout","isObject","hasOwn","buildSchemaFromData","buildSchemaFromLayout","JsonPointer","isArray","toTitleCase","hasValue","isEmpty","_.isEqual","getControl","removeRecursiveReferences","isDefined","getLayoutNode","fixTitle","Injectable","Directive","ElementRef","NgZone","Input","__values","isString","Component","ChangeDetectionStrategy","ComponentFactoryResolver","ViewChild","ViewContainerRef","Inject","Framework","NgModule","CommonModule","FormsModule","ReactiveFormsModule"],"mappings":"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"}