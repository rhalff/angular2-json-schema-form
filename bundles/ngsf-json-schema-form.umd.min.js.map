{"version":3,"sources":["ng://@ngsf/json-schema-form/lib/json-schema-form.component.ts","ng://@ngsf/json-schema-form/lib/json-schema-form.module.ts"],"names":["JSON_SCHEMA_FORM_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","JsonSchemaFormComponent","multi","changeDetector","frameworkLibrary","widgetLibrary","jsf","sanitizer","this","formValueSubscription","formInitialized","objectWrap","previousInputs","schema","layout","data","options","framework","widgets","form","model","JSONSchema","UISchema","formData","loadExternalAssets","debug","onChanges","EventEmitter","onSubmit","isValid","validationErrors","formSchema","formLayout","dataChange","modelChange","formDataChange","ngModelChange","Object","defineProperty","prototype","value","setFormValues","stylesheets","getFrameworkStylesheets","load","bypassSecurityTrustResourceUrl","map","stylesheet","scripts","getFrameworkScripts","script","ngOnInit","updateForm","ngOnChanges","writeValue","formValuesInput","registerOnChange","fn","onChange","registerOnTouched","onTouched","setDisabledState","isDisabled","formOptions","formDisabled","initializeForm","_this","language","setLanguage","changedInput","keys","filter","input","resetFirst","length","startsWith","key","_.isEqual","indexOf","_a","__read","split","formValues","forEach","newFormValues","formGroup","reset","activateForm","patchValue","submitForm","validData","emit","ngModel","resetAllValues","initializeOptions","initializeSchema","initializeLayout","initializeData","debugOutput","v","JSON","stringify","join","setOptions","isObject","setLoadExternalAssets","setFramework","getFramework","_b","__values","_c","next","done","widget","registerWidget","tpldata","setTpldata","AngularSchemaFormCompatibility","_.cloneDeep","hasOwn","ReactJsonSchemaFormCompatibility","properties","isEmpty","inArray","type","1","patternProperties","additionalProperties","JsonFormCompatibility","convertSchemaToDraft6","compileAjvSchema","resolveSchemaReferences","schemaRefLibrary","schemaRecursiveRefMap","dataRecursiveRefMap","arrayMap","hasRootReference","hasValue","fixJsonFormOptions","isArray","titleMap","alternateLayout","uiSchema","customFormItems","JsonPointer","forEachDeep","pointer","schemaPointer","replace","toKey","groupPointer","parse","slice","itemPointer","toLowerCase","__spread","has","set","buildSchemaFromData","buildLayout","buildFormGroupTemplate","buildFormGroup","setSchemaDefaults","setLayoutDefaults","dataChanges","subscribe","statusChanges","markForCheck","isValidChanges","validationErrorChanges","err","validateOnRender_1","get","touchAll_1","control","markAsTouched","controls","ajvErrors","ChangeDetectorRef","FrameworkLibraryService","WidgetLibraryService","JsonSchemaFormService","DomSanitizer","__decorate","Input","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","JsonSchemaFormModule","forRoot","frameworks","_i","arguments","loadFrameworks","Framework","useClass","NoFramework","ngModule","JsonSchemaFormModule_1","__spread$1","__decorate$1","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","WidgetLibraryModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n} from '@angular/core'\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms'\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser'\nimport * as _ from 'lodash'\nimport {\n  FrameworkLibraryService,\n  JsonSchemaFormService,\n  WidgetLibraryService,\n} from '@ngsf/widget-library'\nimport {\n  hasValue,\n  inArray,\n  isArray,\n  isEmpty,\n  isObject,\n  forEach,\n  hasOwn,\n  JsonPointer,\n  resolveSchemaReferences,\n  convertSchemaToDraft6,\n} from '@ngsf/common'\n\nexport const JSON_SCHEMA_FORM_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line no-use-before-declare\n  useExisting: forwardRef(() => JsonSchemaFormComponent),\n  multi: true,\n}\n\n/**\n * Angular JSON Schema Form\n *\n * Root module of the Angular JSON Schema Form client-side library,\n * an Angular library which generates an HTML form from a JSON schema\n * structured data model and/or a JSON Schema Form layout description.\n *\n * This library also validates input data by the user, using both validators on\n * individual controls to provide real-time feedback while the user is filling\n * out the form, and then validating the entire input against the schema when\n * the form is submitted to make sure the returned JSON data object is valid.\n *\n * This library is similar to, and mostly API compatible with:\n *\n * - JSON Schema Form's Angular Schema Form library for AngularJs\n *   http://schemaform.io\n *   http://schemaform.io/examples/bootstrap-example.html (examples)\n *\n * - Mozilla's react-jsonschema-form library for React\n *   https://github.com/mozilla-services/react-jsonschema-form\n *   https://mozilla-services.github.io/react-jsonschema-form (examples)\n *\n * - Joshfire's JSON Form library for jQuery\n *   https://github.com/joshfire/jsonform\n *   http://ulion.github.io/jsonform/playground (examples)\n *\n * This library depends on:\n *  - Angular (obviously)                  https://angular.io\n *  - lodash, JavaScript utility library   https://github.com/lodash/lodash\n *  - ajv, Another JSON Schema validator   https://github.com/epoberezkin/ajv\n *\n * In addition, the Example Playground also depends on:\n *  - brace, Browserified Ace editor       http://thlorenz.github.io/brace\n */\n@Component({\n  selector: 'json-schema-form',\n  template: `\n    <div *ngFor=\"let stylesheet of stylesheets\">\n      <link rel=\"stylesheet\" [href]=\"stylesheet\" />\n    </div>\n    <div *ngFor=\"let script of scripts\">\n      <script type=\"text/javascript\" [src]=\"script\"></script>\n    </div>\n    <form class=\"json-schema-form\" (ngSubmit)=\"submitForm()\">\n      <root-widget [layout]=\"jsf?.layout\"></root-widget>\n    </form>\n    <div *ngIf=\"debug || jsf?.formOptions?.debug\">\n      Debug output:\n      <pre>{{ debugOutput }}</pre>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // Adding 'JsonSchemaFormService' here, instead of in the module,\n  // creates a separate instance of the service for each component\n  providers: [JsonSchemaFormService, JSON_SCHEMA_FORM_VALUE_ACCESSOR],\n})\nexport class JsonSchemaFormComponent\n  implements ControlValueAccessor, OnChanges, OnInit {\n  debugOutput: any // Debug information, if requested\n  formValueSubscription: any = null\n  formInitialized = false\n  objectWrap = false // Is non-object input schema wrapped in an object?\n\n  formValuesInput: string // Name of the input providing the form data\n  previousInputs: {\n    // Previous input values, to detect which input triggers onChanges\n    schema: any\n    layout: any[]\n    data: any\n    options: any\n    framework: any | string\n    widgets: any\n    form: any\n    model: any\n    JSONSchema: any\n    UISchema: any\n    formData: any\n    loadExternalAssets: boolean\n    debug: boolean\n  } = {\n    schema: null,\n    layout: null,\n    data: null,\n    options: null,\n    framework: null,\n    widgets: null,\n    form: null,\n    model: null,\n    JSONSchema: null,\n    UISchema: null,\n    formData: null,\n    loadExternalAssets: null,\n    debug: null,\n  }\n\n  // Recommended inputs\n  @Input() schema: any // The JSON Schema\n  @Input() layout: any[] // The form layout\n  @Input() data: any // The form data\n  @Input() options: any // The global form options\n  @Input() framework: any | string // The framework to load\n  @Input() widgets: any // Any custom widgets to load\n\n  // Alternate combined single input\n  @Input() form: any // For testing, and JSON Schema Form API compatibility\n\n  // Angular Schema Form API compatibility input\n  @Input() model: any // Alternate input for form data\n\n  // React JSON Schema Form API compatibility inputs\n  @Input() JSONSchema: any // Alternate input for JSON Schema\n  @Input() UISchema: any // UI schema - alternate form layout format\n  @Input() formData: any // Alternate input for form data\n\n  @Input() ngModel: any // Alternate input for Angular forms\n\n  @Input() language: string // Language\n\n  // Development inputs, for testing and debugging\n  @Input() loadExternalAssets: boolean // Load external framework assets?\n  @Input() debug: boolean // Show debug information?\n  // tslint:disable no-output-on-prefix\n  @Output() onChanges = new EventEmitter<any>() // Live unvalidated internal form data\n  @Output() onSubmit = new EventEmitter<any>() // Complete validated form data\n\n  // Outputs\n  // tslint:enable no-output-on-prefix\n  @Output() isValid = new EventEmitter<boolean>() // Is current data valid?\n  @Output() validationErrors = new EventEmitter<any>() // Validation errors (if any)\n  @Output() formSchema = new EventEmitter<any>() // Final schema used to create form\n  @Output() formLayout = new EventEmitter<any>() // Final layout used to create form\n  // There is no 2-way binding if inital data is combined inside the 'form' input.\n  @Output() dataChange = new EventEmitter<any>()\n  @Output() modelChange = new EventEmitter<any>()\n\n  // Outputs for possible 2-way data binding\n  // Only the one input providing the initial form data will be bound.\n  // If there is no inital data, input '{}' to activate 2-way data binding.\n  @Output() formDataChange = new EventEmitter<any>()\n  @Output() ngModelChange = new EventEmitter<any>()\n  onChange: (formValues: any) => void\n  onTouched: (formValues: any) => void\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private frameworkLibrary: FrameworkLibraryService,\n    private widgetLibrary: WidgetLibraryService,\n    public jsf: JsonSchemaFormService,\n    private sanitizer: DomSanitizer\n  ) {}\n\n  @Input()\n  get value(): any {\n    return this.objectWrap ? this.jsf.data['1'] : this.jsf.data\n  }\n\n  set value(value: any) {\n    this.setFormValues(value, false)\n  }\n\n  get stylesheets(): SafeResourceUrl[] {\n    const stylesheets = this.frameworkLibrary.getFrameworkStylesheets()\n    const load = this.sanitizer.bypassSecurityTrustResourceUrl\n    return stylesheets.map(stylesheet => load(stylesheet))\n  }\n\n  get scripts(): SafeResourceUrl[] {\n    const scripts = this.frameworkLibrary.getFrameworkScripts()\n    const load = this.sanitizer.bypassSecurityTrustResourceUrl\n    return scripts.map(script => load(script))\n  }\n\n  ngOnInit() {\n    this.updateForm()\n  }\n\n  ngOnChanges() {\n    this.updateForm()\n  }\n\n  writeValue(value: any) {\n    this.setFormValues(value, false)\n    if (!this.formValuesInput) {\n      this.formValuesInput = 'ngModel'\n    }\n  }\n\n  registerOnChange(fn: (formValues: any) => void) {\n    this.onChange = fn\n  }\n\n  registerOnTouched(fn: (formValues: any) => void) {\n    this.onTouched = fn\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    if (this.jsf.formOptions.formDisabled !== !!isDisabled) {\n      this.jsf.formOptions.formDisabled = !!isDisabled\n      this.initializeForm()\n    }\n  }\n\n  updateForm() {\n    if (\n      !this.formInitialized ||\n      !this.formValuesInput ||\n      (this.language && this.language !== this.jsf.language)\n    ) {\n      this.initializeForm()\n    } else {\n      if (this.language && this.language !== this.jsf.language) {\n        this.jsf.setLanguage(this.language)\n      }\n\n      // Get names of changed inputs\n      let changedInput = Object.keys(this.previousInputs).filter(\n        input => this.previousInputs[input] !== this[input]\n      )\n      let resetFirst = true\n      if (\n        changedInput.length === 1 &&\n        changedInput[0] === 'form' &&\n        this.formValuesInput.startsWith('form.')\n      ) {\n        // If only 'form' input changed, get names of changed keys\n        changedInput = Object.keys(this.previousInputs.form || {})\n          .filter(\n            key => !_.isEqual(this.previousInputs.form[key], this.form[key])\n          )\n          .map(key => `form.${key}`)\n        resetFirst = false\n      }\n\n      // If only input values have changed, update the form values\n      if (\n        changedInput.length === 1 &&\n        changedInput[0] === this.formValuesInput\n      ) {\n        if (this.formValuesInput.indexOf('.') === -1) {\n          this.setFormValues(this[this.formValuesInput], resetFirst)\n        } else {\n          const [input, key] = this.formValuesInput.split('.')\n          this.setFormValues(this[input][key], resetFirst)\n        }\n\n        // If anything else has changed, re-render the entire form\n      } else if (changedInput.length) {\n        this.initializeForm()\n        if (this.onChange) {\n          this.onChange(this.jsf.formValues)\n        }\n        if (this.onTouched) {\n          this.onTouched(this.jsf.formValues)\n        }\n      }\n\n      // Update previous inputs\n      Object.keys(this.previousInputs)\n        .filter(input => this.previousInputs[input] !== this[input])\n        .forEach(input => (this.previousInputs[input] = this[input]))\n    }\n  }\n\n  setFormValues(formValues: any, resetFirst = true) {\n    if (formValues) {\n      const newFormValues = this.objectWrap ? formValues['1'] : formValues\n      if (!this.jsf.formGroup) {\n        this.jsf.formValues = formValues\n        this.activateForm()\n      } else if (resetFirst) {\n        this.jsf.formGroup.reset()\n      }\n      if (this.jsf.formGroup) {\n        this.jsf.formGroup.patchValue(newFormValues)\n      }\n      if (this.onChange) {\n        this.onChange(newFormValues)\n      }\n      if (this.onTouched) {\n        this.onTouched(newFormValues)\n      }\n    } else {\n      this.jsf.formGroup.reset()\n    }\n  }\n\n  submitForm() {\n    const validData = this.jsf.validData\n    this.onSubmit.emit(this.objectWrap ? validData['1'] : validData)\n  }\n\n  /**\n   * 'initializeForm' function\n   *\n   * - Update 'schema', 'layout', and 'formValues', from inputs.\n   *\n   * - Create 'schemaRefLibrary' and 'schemaRecursiveRefMap'\n   *   to resolve schema $ref links, including recursive $ref links.\n   *\n   * - Create 'dataRecursiveRefMap' to resolve recursive links in data\n   *   and corectly set output formats for recursively nested values.\n   *\n   * - Create 'layoutRefLibrary' and 'templateRefLibrary' to store\n   *   new layout nodes and formGroup elements to use when dynamically\n   *   adding form components to arrays and recursive $ref points.\n   *\n   * - Create 'dataMap' to map the data to the schema and template.\n   *\n   * - Create the master 'formGroupTemplate' then from it 'formGroup'\n   *   the Angular formGroup used to control the reactive form.\n   */\n  initializeForm() {\n    if (\n      this.schema ||\n      this.layout ||\n      this.data ||\n      this.form ||\n      this.model ||\n      this.JSONSchema ||\n      this.UISchema ||\n      this.formData ||\n      this.ngModel ||\n      this.jsf.data\n    ) {\n      this.jsf.resetAllValues() // Reset all form values to defaults\n      this.initializeOptions() // Update options\n      this.initializeSchema() // Update schema, schemaRefLibrary,\n      // schemaRecursiveRefMap, & dataRecursiveRefMap\n      this.initializeLayout() // Update layout, layoutRefLibrary,\n      this.initializeData() // Update formValues\n      this.activateForm() // Update dataMap, templateRefLibrary,\n      // formGroupTemplate, formGroup\n\n      if (this.debug || this.jsf.formOptions.debug) {\n        const vars: any[] = []\n        this.debugOutput = vars.map(v => JSON.stringify(v, null, 2)).join('\\n')\n      }\n      this.formInitialized = true\n    }\n  }\n\n  /**\n   * 'initializeOptions' function\n   *\n   * Initialize 'options' (global form options) and set framework\n   * Combine available inputs:\n   * 1. options - recommended\n   * 2. form.options - Single input style\n   */\n  private initializeOptions() {\n    if (this.language && this.language !== this.jsf.language) {\n      this.jsf.setLanguage(this.language)\n    }\n    this.jsf.setOptions({debug: !!this.debug})\n    let loadExternalAssets: boolean = this.loadExternalAssets || false\n    let framework: any = this.framework || 'default'\n    if (isObject(this.options)) {\n      this.jsf.setOptions(this.options)\n      loadExternalAssets = this.options.loadExternalAssets || loadExternalAssets\n      framework = this.options.framework || framework\n    }\n    if (isObject(this.form) && isObject(this.form.options)) {\n      this.jsf.setOptions(this.form.options)\n      loadExternalAssets =\n        this.form.options.loadExternalAssets || loadExternalAssets\n      framework = this.form.options.framework || framework\n    }\n    if (isObject(this.widgets)) {\n      this.jsf.setOptions({widgets: this.widgets})\n    }\n    this.frameworkLibrary.setLoadExternalAssets(loadExternalAssets)\n    this.frameworkLibrary.setFramework(framework)\n    this.jsf.framework = this.frameworkLibrary.getFramework()\n    if (isObject(this.jsf.formOptions.widgets)) {\n      for (const widget of Object.keys(this.jsf.formOptions.widgets)) {\n        this.widgetLibrary.registerWidget(\n          widget,\n          this.jsf.formOptions.widgets[widget]\n        )\n      }\n    }\n    if (isObject(this.form) && isObject(this.form.tpldata)) {\n      this.jsf.setTpldata(this.form.tpldata)\n    }\n  }\n\n  /**\n   * 'initializeSchema' function\n   *\n   * Initialize 'schema'\n   * Use first available input:\n   * 1. schema - recommended / Angular Schema Form style\n   * 2. form.schema - Single input / JSON Form style\n   * 3. JSONSchema - React JSON Schema Form style\n   * 4. form.JSONSchema - For testing single input React JSON Schema Forms\n   * 5. form - For testing single schema-only inputs\n   *\n   * ... if no schema input found, the 'activateForm' function, below,\n   *     will make two additional attempts to build a schema\n   * 6. If layout input - build schema from layout\n   * 7. If data input - build schema from data\n   */\n  private initializeSchema() {\n    // TODO: update to allow non-object schemas\n\n    if (isObject(this.schema)) {\n      this.jsf.AngularSchemaFormCompatibility = true\n      this.jsf.schema = _.cloneDeep(this.schema)\n    } else if (hasOwn(this.form, 'schema') && isObject(this.form.schema)) {\n      this.jsf.schema = _.cloneDeep(this.form.schema)\n    } else if (isObject(this.JSONSchema)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true\n      this.jsf.schema = _.cloneDeep(this.JSONSchema)\n    } else if (\n      hasOwn(this.form, 'JSONSchema') &&\n      isObject(this.form.JSONSchema)\n    ) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true\n      this.jsf.schema = _.cloneDeep(this.form.JSONSchema)\n    } else if (\n      hasOwn(this.form, 'properties') &&\n      isObject(this.form.properties)\n    ) {\n      this.jsf.schema = _.cloneDeep(this.form)\n    } else if (isObject(this.form)) {\n      // TODO: Handle other types of form input\n    }\n\n    if (!isEmpty(this.jsf.schema)) {\n      // If other types also allowed, render schema as an object\n      if (inArray('object', this.jsf.schema.type)) {\n        this.jsf.schema.type = 'object'\n      }\n\n      // Wrap non-object schemas in object.\n      if (\n        hasOwn(this.jsf.schema, 'type') &&\n        this.jsf.schema.type !== 'object'\n      ) {\n        this.jsf.schema = {\n          type: 'object',\n          properties: {1: this.jsf.schema},\n        }\n        this.objectWrap = true\n      } else if (!hasOwn(this.jsf.schema, 'type')) {\n        // Add type = 'object' if missing\n        if (\n          isObject(this.jsf.schema.properties) ||\n          isObject(this.jsf.schema.patternProperties) ||\n          isObject(this.jsf.schema.additionalProperties)\n        ) {\n          this.jsf.schema.type = 'object'\n\n          // Fix JSON schema shorthand (JSON Form style)\n        } else {\n          this.jsf.JsonFormCompatibility = true\n          this.jsf.schema = {\n            type: 'object',\n            properties: this.jsf.schema,\n          }\n        }\n      }\n\n      // If needed, update JSON Schema to draft 6 format, including\n      // draft 3 (JSON Form style) and draft 4 (Angular Schema Form style)\n      this.jsf.schema = convertSchemaToDraft6(this.jsf.schema)\n\n      // Initialize ajv and compile schema\n      this.jsf.compileAjvSchema()\n\n      // Create schemaRefLibrary, schemaRecursiveRefMap, dataRecursiveRefMap, & arrayMap\n      this.jsf.schema = resolveSchemaReferences(\n        this.jsf.schema,\n        this.jsf.schemaRefLibrary,\n        this.jsf.schemaRecursiveRefMap,\n        this.jsf.dataRecursiveRefMap,\n        this.jsf.arrayMap\n      )\n      if (hasOwn(this.jsf.schemaRefLibrary, '')) {\n        this.jsf.hasRootReference = true\n      }\n\n      // TODO: (?) Resolve external $ref links\n      // // Create schemaRefLibrary & schemaRecursiveRefMap\n      // this.parser.bundle(this.schema)\n      //   .then(schema => this.schema = resolveSchemaReferences(\n      //     schema, this.jsf.schemaRefLibrary,\n      //     this.jsf.schemaRecursiveRefMap, this.jsf.dataRecursiveRefMap\n      //   ));\n    }\n  }\n\n  /**\n   * 'initializeData' function\n   *\n   * Initialize 'formValues'\n   * defulat or previously submitted values used to populate form\n   * Use first available input:\n   * 1. data - recommended\n   * 2. model - Angular Schema Form style\n   * 3. form.value - JSON Form style\n   * 4. form.data - Single input style\n   * 5. formData - React JSON Schema Form style\n   * 6. form.formData - For easier testing of React JSON Schema Forms\n   * 7. (none) no data - initialize data from schema and layout defaults only\n   */\n  private initializeData() {\n    if (hasValue(this.data)) {\n      this.jsf.formValues = _.cloneDeep(this.data)\n      this.formValuesInput = 'data'\n    } else if (hasValue(this.model)) {\n      this.jsf.AngularSchemaFormCompatibility = true\n      this.jsf.formValues = _.cloneDeep(this.model)\n      this.formValuesInput = 'model'\n    } else if (hasValue(this.ngModel)) {\n      this.jsf.AngularSchemaFormCompatibility = true\n      this.jsf.formValues = _.cloneDeep(this.ngModel)\n      this.formValuesInput = 'ngModel'\n    } else if (isObject(this.form) && hasValue(this.form.value)) {\n      this.jsf.JsonFormCompatibility = true\n      this.jsf.formValues = _.cloneDeep(this.form.value)\n      this.formValuesInput = 'form.value'\n    } else if (isObject(this.form) && hasValue(this.form.data)) {\n      this.jsf.formValues = _.cloneDeep(this.form.data)\n      this.formValuesInput = 'form.data'\n    } else if (hasValue(this.formData)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true\n      this.formValuesInput = 'formData'\n    } else if (hasOwn(this.form, 'formData') && hasValue(this.form.formData)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true\n      this.jsf.formValues = _.cloneDeep(this.form.formData)\n      this.formValuesInput = 'form.formData'\n    } else {\n      this.formValuesInput = null\n    }\n  }\n\n  /**\n   * 'initializeLayout' function\n   *\n   * Initialize 'layout'\n   * Use first available array input:\n   * 1. layout - recommended\n   * 2. form - Angular Schema Form style\n   * 3. form.form - JSON Form style\n   * 4. form.layout - Single input style\n   * 5. (none) no layout - set default layout instead\n   *    (full layout will be built later from the schema)\n   *\n   * Also, if alternate layout formats are available,\n   * import from 'UISchema' or 'customFormItems'\n   * used for React JSON Schema Form and JSON Form API compatibility\n   * Use first available input:\n   * 1. UISchema - React JSON Schema Form style\n   * 2. form.UISchema - For testing single input React JSON Schema Forms\n   * 2. form.customFormItems - JSON Form style\n   * 3. (none) no input - don't import\n   */\n  private initializeLayout() {\n    // Rename JSON Form-style 'options' lists to\n    // Angular Schema Form-style 'titleMap' lists.\n    const fixJsonFormOptions = (layout: any): any => {\n      if (isObject(layout) || isArray(layout)) {\n        forEach(\n          layout,\n          (value, key) => {\n            if (hasOwn(value, 'options') && isObject(value.options)) {\n              value.titleMap = value.options\n              delete value.options\n            }\n          },\n          'top-down'\n        )\n      }\n      return layout\n    }\n\n    // Check for layout inputs and, if found, initialize form layout\n    if (isArray(this.layout)) {\n      this.jsf.layout = _.cloneDeep(this.layout)\n    } else if (isArray(this.form)) {\n      this.jsf.AngularSchemaFormCompatibility = true\n      this.jsf.layout = _.cloneDeep(this.form)\n    } else if (this.form && isArray(this.form.form)) {\n      this.jsf.JsonFormCompatibility = true\n      this.jsf.layout = fixJsonFormOptions(_.cloneDeep(this.form.form))\n    } else if (this.form && isArray(this.form.layout)) {\n      this.jsf.layout = _.cloneDeep(this.form.layout)\n    } else {\n      this.jsf.layout = ['*']\n    }\n\n    // Check for alternate layout inputs\n    let alternateLayout: any = null\n    if (isObject(this.UISchema)) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true\n      alternateLayout = _.cloneDeep(this.UISchema)\n    } else if (hasOwn(this.form, 'UISchema')) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true\n      alternateLayout = _.cloneDeep(this.form.UISchema)\n    } else if (hasOwn(this.form, 'uiSchema')) {\n      this.jsf.ReactJsonSchemaFormCompatibility = true\n      alternateLayout = _.cloneDeep(this.form.uiSchema)\n    } else if (hasOwn(this.form, 'customFormItems')) {\n      this.jsf.JsonFormCompatibility = true\n      alternateLayout = fixJsonFormOptions(\n        _.cloneDeep(this.form.customFormItems)\n      )\n    }\n\n    // if alternate layout found, copy alternate layout options into schema\n    if (alternateLayout) {\n      JsonPointer.forEachDeep(alternateLayout, (value, pointer) => {\n        const schemaPointer = pointer\n          .replace(/\\//g, '/properties/')\n          .replace(/\\/properties\\/items\\/properties\\//g, '/items/properties/')\n          .replace(\n            /\\/properties\\/titleMap\\/properties\\//g,\n            '/titleMap/properties/'\n          )\n        if (hasValue(value) && hasValue(pointer)) {\n          let key = JsonPointer.toKey(pointer)\n          const groupPointer = (JsonPointer.parse(schemaPointer) || []).slice(\n            0,\n            -2\n          )\n          let itemPointer: string | string[]\n\n          // If 'ui:order' object found, copy into object schema root\n          if (key.toLowerCase() === 'ui:order') {\n            itemPointer = [...groupPointer, 'ui:order']\n\n            // Copy other alternate layout options to schema 'x-schema-form',\n            // (like Angular Schema Form options) and remove any 'ui:' prefixes\n          } else {\n            if (key.slice(0, 3).toLowerCase() === 'ui:') {\n              key = key.slice(3)\n            }\n            itemPointer = [...groupPointer, 'x-schema-form', key]\n          }\n          if (\n            JsonPointer.has(this.jsf.schema, groupPointer) &&\n            !JsonPointer.has(this.jsf.schema, itemPointer)\n          ) {\n            JsonPointer.set(this.jsf.schema, itemPointer, value)\n          }\n        }\n      })\n    }\n  }\n\n  /**\n   * 'activateForm' function\n   *\n   * ...continued from 'initializeSchema' function, above\n   * If 'schema' has not been initialized (i.e. no schema input found)\n   * 6. If layout input - build schema from layout input\n   * 7. If data input - build schema from data input\n   *\n   * Create final layout,\n   * build the FormGroup template and the Angular FormGroup,\n   * subscribe to changes,\n   * and activate the form.\n   */\n  private activateForm() {\n    // If 'schema' not initialized\n    if (isEmpty(this.jsf.schema)) {\n      // TODO: If full layout input (with no '*'), build schema from layout\n      // if (!this.jsf.layout.includes('*')) {\n      //   this.jsf.buildSchemaFromLayout();\n      // } else\n\n      // If data input, build schema from data\n      if (!isEmpty(this.jsf.formValues)) {\n        this.jsf.buildSchemaFromData()\n      }\n    }\n\n    if (!isEmpty(this.jsf.schema)) {\n      // If not already initialized, initialize ajv and compile schema\n      this.jsf.compileAjvSchema()\n\n      // Update all layout elements, add values, widgets, and validators,\n      // replace any '*' with a layout built from all schema elements,\n      // and update the FormGroup template with any new validators\n      this.jsf.buildLayout(this.widgetLibrary)\n\n      // Build the Angular FormGroup template from the schema\n      this.jsf.buildFormGroupTemplate(this.jsf.formValues)\n\n      // Build the real Angular FormGroup from the FormGroup template\n      this.jsf.buildFormGroup()\n    }\n\n    if (this.jsf.formGroup) {\n      // Reset initial form values\n      if (\n        !isEmpty(this.jsf.formValues) &&\n        this.jsf.formOptions.setSchemaDefaults !== true &&\n        this.jsf.formOptions.setLayoutDefaults !== true\n      ) {\n        this.setFormValues(this.jsf.formValues)\n      }\n\n      // TODO: Figure out how to display calculated values without changing object data\n      // See http://ulion.github.io/jsonform/playground/?example=templating-values\n      // Calculate references to other fields\n      // if (!isEmpty(this.jsf.formGroup.value)) {\n      //   forEach(this.jsf.formGroup.value, (value, key, object, rootObject) => {\n      //     if (typeof value === 'string') {\n      //       object[key] = this.jsf.parseText(value, value, rootObject, key);\n      //     }\n      //   }, 'top-down');\n      // }\n\n      // Subscribe to form changes to output live data, validation, and errors\n      this.jsf.dataChanges.subscribe(data => {\n        this.onChanges.emit(this.objectWrap ? data['1'] : data)\n        if (this.formValuesInput && this.formValuesInput.indexOf('.') === -1) {\n          this[`${this.formValuesInput}Change`].emit(\n            this.objectWrap ? data['1'] : data\n          )\n        }\n      })\n\n      // Trigger change detection on statusChanges to show updated errors\n      this.jsf.formGroup.statusChanges.subscribe(() =>\n        this.changeDetector.markForCheck()\n      )\n      this.jsf.isValidChanges.subscribe(isValid => this.isValid.emit(isValid))\n      this.jsf.validationErrorChanges.subscribe(err =>\n        this.validationErrors.emit(err)\n      )\n\n      // Output final schema, final layout, and initial data\n      this.formSchema.emit(this.jsf.schema)\n      this.formLayout.emit(this.jsf.layout)\n      this.onChanges.emit(this.objectWrap ? this.jsf.data['1'] : this.jsf.data)\n\n      // If validateOnRender, output initial validation and any errors\n      const validateOnRender = JsonPointer.get(\n        this.jsf,\n        '/formOptions/validateOnRender'\n      )\n      if (validateOnRender) {\n        // validateOnRender === 'auto' || true\n        const touchAll = control => {\n          if (validateOnRender === true || hasValue(control.value)) {\n            control.markAsTouched()\n          }\n          Object.keys(control.controls || {}).forEach(key =>\n            touchAll(control.controls[key])\n          )\n        }\n        touchAll(this.jsf.formGroup)\n        this.isValid.emit(this.jsf.isValid)\n        this.validationErrors.emit(this.jsf.ajvErrors)\n      }\n    }\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core'\nimport {CommonModule} from '@angular/common'\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms'\nimport {\n  JsonSchemaFormService,\n  FrameworkLibraryService,\n  WidgetLibraryService,\n  WidgetLibraryModule,\n} from '@ngsf/widget-library'\nimport {Framework} from '@ngsf/common'\nimport {JsonSchemaFormComponent} from './json-schema-form.component'\nimport {NoFramework} from '@ngsf/no-framework'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    WidgetLibraryModule,\n  ],\n  declarations: [JsonSchemaFormComponent],\n  exports: [JsonSchemaFormComponent, WidgetLibraryModule],\n})\nexport class JsonSchemaFormModule {\n  static forRoot(...frameworks): ModuleWithProviders<JsonSchemaFormModule> {\n    const loadFrameworks = frameworks.length\n      ? frameworks.map(framework => framework.forRoot().providers[0])\n      : [{provide: Framework, useClass: NoFramework, multi: true}]\n    return {\n      ngModule: JsonSchemaFormModule,\n      providers: [\n        JsonSchemaFormService,\n        FrameworkLibraryService,\n        WidgetLibraryService,\n        ...loadFrameworks,\n      ],\n    }\n  }\n}\n"]}