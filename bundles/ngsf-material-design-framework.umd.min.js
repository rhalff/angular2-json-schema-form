!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@ngsf/widget-library"),require("@ngsf/common"),require("lodash"),require("@angular/common"),require("@angular/forms"),require("@angular/flex-layout"),require("@angular/material/autocomplete"),require("@angular/material/button"),require("@angular/material/button-toggle"),require("@angular/material/card"),require("@angular/material/checkbox"),require("@angular/material/chips"),require("@angular/material/datepicker"),require("@angular/material/expansion"),require("@angular/material/form-field"),require("@angular/material/icon"),require("@angular/material/input"),require("@angular/material/core"),require("@angular/material/radio"),require("@angular/material/select"),require("@angular/material/slider"),require("@angular/material/slide-toggle"),require("@angular/material/stepper"),require("@angular/material/tabs"),require("@angular/material/tooltip")):"function"==typeof define&&define.amd?define("@ngsf/material-design-framework",["exports","@angular/core","@ngsf/widget-library","@ngsf/common","lodash","@angular/common","@angular/forms","@angular/flex-layout","@angular/material/autocomplete","@angular/material/button","@angular/material/button-toggle","@angular/material/card","@angular/material/checkbox","@angular/material/chips","@angular/material/datepicker","@angular/material/expansion","@angular/material/form-field","@angular/material/icon","@angular/material/input","@angular/material/core","@angular/material/radio","@angular/material/select","@angular/material/slider","@angular/material/slide-toggle","@angular/material/stepper","@angular/material/tabs","@angular/material/tooltip"],e):e(((t=t||self).ngsf=t.ngsf||{},t.ngsf["material-design-framework"]={}),t.ng.core,t.widgetLibrary,t.common,t.lodash,t.ng.common,t.ng.forms,t.ng["flex-layout"],t.ng.material.autocomplete,t.ng.material.button,t.ng.material["button-toggle"],t.ng.material.card,t.ng.material.checkbox,t.ng.material.chips,t.ng.material.datepicker,t.ng.material.expansion,t.ng.material["form-field"],t.ng.material.icon,t.ng.material.input,t.ng.material.core,t.ng.material.radio,t.ng.material.select,t.ng.material.slider,t.ng.material["slide-toggle"],t.ng.material.stepper,t.ng.material.tabs,t.ng.material.tooltip)}(this,(function(t,e,o,n,i,r,a,s,l,p,d,c,u,f,m,y,h,g,b,x,I,v,w,j,N,C,M){"use strict";var A,O=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},L=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},R=function(){function t(t){this.jsf=t,this.isFlexItem=!1}return t.prototype.removeItem=function(t){this.jsf.removeItem(t)},t.prototype.getFlexAttribute=function(t,e){var o=["flex-grow","flex-shrink","flex-basis"].indexOf(e);return((t.options||{}).flex||"").split(/\s+/)[o]||(t.options||{})[e]||["1","1","auto"][o]},t.prototype.showWidget=function(t){return this.jsf.evaluateCondition(t,this.dataIndex)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},O([e.Input(),L("design:type",Array)],t.prototype,"dataIndex",void 0),O([e.Input(),L("design:type",Array)],t.prototype,"layoutIndex",void 0),O([e.Input(),L("design:type",Array)],t.prototype,"layout",void 0),O([e.Input(),L("design:type",Object)],t.prototype,"isFlexItem",void 0),t=O([e.Component({selector:"flex-layout-root-widget",template:'\n      <div *ngFor="let layoutNode of layout; let i = index"\n           [class.form-flex-item]="isFlexItem"\n           [style.flex-grow]="getFlexAttribute(layoutNode, \'flex-grow\')"\n           [style.flex-shrink]="getFlexAttribute(layoutNode, \'flex-shrink\')"\n           [style.flex-basis]="getFlexAttribute(layoutNode, \'flex-basis\')"\n           [style.align-self]="(layoutNode?.options || {})[\'align-self\']"\n           [style.order]="layoutNode?.options?.order"\n           [fxFlex]="layoutNode?.options?.fxFlex"\n           [fxFlexOrder]="layoutNode?.options?.fxFlexOrder"\n           [fxFlexOffset]="layoutNode?.options?.fxFlexOffset"\n           [fxFlexAlign]="layoutNode?.options?.fxFlexAlign">\n          <select-framework-widget *ngIf="showWidget(layoutNode)"\n                                   [dataIndex]="layoutNode?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])"\n                                   [layoutIndex]="(layoutIndex || []).concat(i)"\n                                   [layoutNode]="layoutNode"></select-framework-widget>\n          </div>',changeDetection:e.ChangeDetectionStrategy.Default}),L("design:paramtypes",[o.JsonSchemaFormService])],t)}(),F=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},_=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},S=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.expanded=!0,this.containerType="div"}return Object.defineProperty(t.prototype,"sectionTitle",{get:function(){return this.options.notitle?null:this.jsf.setItemTitle(this)},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){switch(this.jsf.initializeControl(this),this.options=this.layoutNode.options||{},this.expanded="boolean"==typeof this.options.expanded?this.options.expanded:!this.options.expandable,this.layoutNode.type){case"section":case"array":case"fieldset":case"advancedfieldset":case"authfieldset":case"optionfieldset":case"selectfieldset":this.containerType="fieldset";break;case"card":this.containerType="card";break;case"expansion-panel":this.containerType="expansion-panel";break;default:this.containerType="div"}},t.prototype.toggleExpanded=function(){this.options.expandable&&(this.expanded=!this.expanded)},t.prototype.getFlexAttribute=function(t){var e="flex"===this.layoutNode.type||!!this.options.displayFlex||"flex"===this.options.display;switch(t){case"is-flex":return e;case"display":return e?"flex":"initial";case"flex-direction":case"flex-wrap":var o=["flex-direction","flex-wrap"].indexOf(t);return(this.options["flex-flow"]||"").split(/\s+/)[o]||this.options[t]||["column","nowrap"][o];case"justify-content":case"align-items":case"align-content":return this.options[t];case"layout":return(this.options.fxLayout||"row")+this.options.fxLayoutWrap?" "+this.options.fxLayoutWrap:""}},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},F([e.Input(),_("design:type",Object)],t.prototype,"layoutNode",void 0),F([e.Input(),_("design:type",Array)],t.prototype,"layoutIndex",void 0),F([e.Input(),_("design:type",Array)],t.prototype,"dataIndex",void 0),t=F([e.Component({selector:"flex-layout-section-widget",template:'\n      <div *ngIf="containerType === \'div\'"\n           [class]="options?.htmlClass || \'\'"\n           [class.expandable]="options?.expandable && !expanded"\n           [class.expanded]="options?.expandable && expanded">\n          <label *ngIf="sectionTitle"\n                 [class]="\'legend \' + (options?.labelHtmlClass || \'\')"\n                 [innerHTML]="sectionTitle"\n                 (click)="toggleExpanded()"></label>\n          <flex-layout-root-widget *ngIf="expanded"\n                                   [layout]="layoutNode.items"\n                                   [dataIndex]="dataIndex"\n                                   [layoutIndex]="layoutIndex"\n                                   [isFlexItem]="getFlexAttribute(\'is-flex\')"\n                                   [class.form-flex-column]="getFlexAttribute(\'flex-direction\') === \'column\'"\n                                   [class.form-flex-row]="getFlexAttribute(\'flex-direction\') === \'row\'"\n                                   [style.display]="getFlexAttribute(\'display\')"\n                                   [style.flex-direction]="getFlexAttribute(\'flex-direction\')"\n                                   [style.flex-wrap]="getFlexAttribute(\'flex-wrap\')"\n                                   [style.justify-content]="getFlexAttribute(\'justify-content\')"\n                                   [style.align-items]="getFlexAttribute(\'align-items\')"\n                                   [style.align-content]="getFlexAttribute(\'align-content\')"\n                                   [fxLayout]="getFlexAttribute(\'layout\')"\n                                   [fxLayoutGap]="options?.fxLayoutGap"\n                                   [fxLayoutAlign]="options?.fxLayoutAlign"\n                                   [attr.fxFlexFill]="options?.fxLayoutAlign"></flex-layout-root-widget>\n          <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                     [innerHTML]="options?.errorMessage"></mat-error>\n      </div>\n\n      <fieldset *ngIf="containerType === \'fieldset\'"\n                [class]="options?.htmlClass || \'\'"\n                [class.expandable]="options?.expandable && !expanded"\n                [class.expanded]="options?.expandable && expanded"\n                [disabled]="options?.readonly">\n          <legend *ngIf="sectionTitle"\n                  [class]="\'legend \' + (options?.labelHtmlClass || \'\')"\n                  [innerHTML]="sectionTitle"\n                  (click)="toggleExpanded()"></legend>\n          <flex-layout-root-widget *ngIf="expanded"\n                                   [layout]="layoutNode.items"\n                                   [dataIndex]="dataIndex"\n                                   [layoutIndex]="layoutIndex"\n                                   [isFlexItem]="getFlexAttribute(\'is-flex\')"\n                                   [class.form-flex-column]="getFlexAttribute(\'flex-direction\') === \'column\'"\n                                   [class.form-flex-row]="getFlexAttribute(\'flex-direction\') === \'row\'"\n                                   [style.display]="getFlexAttribute(\'display\')"\n                                   [style.flex-direction]="getFlexAttribute(\'flex-direction\')"\n                                   [style.flex-wrap]="getFlexAttribute(\'flex-wrap\')"\n                                   [style.justify-content]="getFlexAttribute(\'justify-content\')"\n                                   [style.align-items]="getFlexAttribute(\'align-items\')"\n                                   [style.align-content]="getFlexAttribute(\'align-content\')"\n                                   [fxLayout]="getFlexAttribute(\'layout\')"\n                                   [fxLayoutGap]="options?.fxLayoutGap"\n                                   [fxLayoutAlign]="options?.fxLayoutAlign"\n                                   [attr.fxFlexFill]="options?.fxLayoutAlign"></flex-layout-root-widget>\n          <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                     [innerHTML]="options?.errorMessage"></mat-error>\n      </fieldset>\n\n      <mat-card *ngIf="containerType === \'card\'"\n                [class]="options?.htmlClass || \'\'"\n                [class.expandable]="options?.expandable && !expanded"\n                [class.expanded]="options?.expandable && expanded">\n          <mat-card-header *ngIf="sectionTitle">\n              <legend\n                      [class]="\'legend \' + (options?.labelHtmlClass || \'\')"\n                      [innerHTML]="sectionTitle"\n                      (click)="toggleExpanded()"></legend>\n          </mat-card-header>\n          <mat-card-content *ngIf="expanded">\n              <fieldset [disabled]="options?.readonly">\n                  <flex-layout-root-widget *ngIf="expanded"\n                                           [layout]="layoutNode.items"\n                                           [dataIndex]="dataIndex"\n                                           [layoutIndex]="layoutIndex"\n                                           [isFlexItem]="getFlexAttribute(\'is-flex\')"\n                                           [class.form-flex-column]="getFlexAttribute(\'flex-direction\') === \'column\'"\n                                           [class.form-flex-row]="getFlexAttribute(\'flex-direction\') === \'row\'"\n                                           [style.display]="getFlexAttribute(\'display\')"\n                                           [style.flex-direction]="getFlexAttribute(\'flex-direction\')"\n                                           [style.flex-wrap]="getFlexAttribute(\'flex-wrap\')"\n                                           [style.justify-content]="getFlexAttribute(\'justify-content\')"\n                                           [style.align-items]="getFlexAttribute(\'align-items\')"\n                                           [style.align-content]="getFlexAttribute(\'align-content\')"\n                                           [fxLayout]="getFlexAttribute(\'layout\')"\n                                           [fxLayoutGap]="options?.fxLayoutGap"\n                                           [fxLayoutAlign]="options?.fxLayoutAlign"\n                                           [attr.fxFlexFill]="options?.fxLayoutAlign"></flex-layout-root-widget>\n              </fieldset>\n          </mat-card-content>\n          <mat-card-footer>\n              <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                         [innerHTML]="options?.errorMessage"></mat-error>\n          </mat-card-footer>\n      </mat-card>\n\n      <mat-expansion-panel *ngIf="containerType === \'expansion-panel\'"\n                           [expanded]="expanded"\n                           [hideToggle]="!options?.expandable">\n          <mat-expansion-panel-header>\n              <mat-panel-title>\n                  <legend *ngIf="sectionTitle"\n                          [class]="options?.labelHtmlClass"\n                          [innerHTML]="sectionTitle"\n                          (click)="toggleExpanded()"></legend>\n              </mat-panel-title>\n          </mat-expansion-panel-header>\n          <fieldset [disabled]="options?.readonly">\n              <flex-layout-root-widget *ngIf="expanded"\n                                       [layout]="layoutNode.items"\n                                       [dataIndex]="dataIndex"\n                                       [layoutIndex]="layoutIndex"\n                                       [isFlexItem]="getFlexAttribute(\'is-flex\')"\n                                       [class.form-flex-column]="getFlexAttribute(\'flex-direction\') === \'column\'"\n                                       [class.form-flex-row]="getFlexAttribute(\'flex-direction\') === \'row\'"\n                                       [style.display]="getFlexAttribute(\'display\')"\n                                       [style.flex-direction]="getFlexAttribute(\'flex-direction\')"\n                                       [style.flex-wrap]="getFlexAttribute(\'flex-wrap\')"\n                                       [style.justify-content]="getFlexAttribute(\'justify-content\')"\n                                       [style.align-items]="getFlexAttribute(\'align-items\')"\n                                       [style.align-content]="getFlexAttribute(\'align-content\')"\n                                       [fxLayout]="getFlexAttribute(\'layout\')"\n                                       [fxLayoutGap]="options?.fxLayoutGap"\n                                       [fxLayoutAlign]="options?.fxLayoutAlign"\n                                       [attr.fxFlexFill]="options?.fxLayoutAlign"></flex-layout-root-widget>\n          </fieldset>\n          <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                     [innerHTML]="options?.errorMessage"></mat-error>\n      </mat-expansion-panel>',styles:["\n      fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n      }\n\n      .legend {\n          font-weight: bold;\n      }\n\n      .expandable > .legend:before {\n          content: '▶';\n          padding-right: .3em;\n      }\n\n      .expanded > .legend:before {\n          content: '▼';\n          padding-right: .2em;\n      }\n  "]}),_("design:paramtypes",[o.JsonSchemaFormService])],t)}(),k=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},T=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},P=function(){function t(t){this.jsf=t}return Object.defineProperty(t.prototype,"showAddButton",{get:function(){return!this.layoutNode.arrayItem||this.layoutIndex[this.layoutIndex.length-1]<this.options.maxItems},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"buttonText",{get:function(){var t={dataIndex:this.dataIndex.slice(0,-1),layoutIndex:this.layoutIndex.slice(0,-1),layoutNode:this.jsf.getParentNode(this)};return t.layoutNode.add||this.jsf.setArrayItemTitle(t,this.layoutNode,this.itemCount)},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{}},t.prototype.addItem=function(t){t.preventDefault(),this.jsf.addItem(this)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},k([e.Input(),T("design:type",Object)],t.prototype,"layoutNode",void 0),k([e.Input(),T("design:type",Array)],t.prototype,"layoutIndex",void 0),k([e.Input(),T("design:type",Array)],t.prototype,"dataIndex",void 0),t=k([e.Component({selector:"material-add-reference-widget",template:'\n      <section [class]="options?.htmlClass || \'\'" align="end">\n          <button mat-raised-button *ngIf="showAddButton"\n                  [color]="options?.color || \'accent\'"\n                  [disabled]="options?.readonly"\n                  (click)="addItem($event)">\n              <span *ngIf="options?.icon" [class]="options?.icon"></span>\n              <span *ngIf="options?.title" [innerHTML]="buttonText"></span>\n          </button>\n      </section>',changeDetection:e.ChangeDetectionStrategy.Default}),T("design:paramtypes",[o.JsonSchemaFormService])],t)}(),D=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},V=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},H=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1}return t.prototype.ngOnInit=function(){var t=this;this.options=this.layoutNode.options||{},this.jsf.initializeControl(this),n.hasOwn(this.options,"disabled")?this.controlDisabled=this.options.disabled:this.jsf.formOptions.disableInvalidSubmit&&(this.controlDisabled=!this.jsf.isValid,this.jsf.isValidChanges.subscribe((function(e){return t.controlDisabled=!e})))},t.prototype.updateValue=function(t){"function"==typeof this.options.onClick?this.options.onClick(t):this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},D([e.Input(),V("design:type",Object)],t.prototype,"layoutNode",void 0),D([e.Input(),V("design:type",Array)],t.prototype,"layoutIndex",void 0),D([e.Input(),V("design:type",Array)],t.prototype,"dataIndex",void 0),t=D([e.Component({selector:"material-button-widget",template:'\n      <div class="button-row" [class]="options?.htmlClass || \'\'">\n          \x3c!-- [color]="options?.color || \'primary\'" --\x3e\n          <button mat-raised-button\n                  [attr.readonly]="options?.readonly ? \'readonly\' : null"\n                  [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                  [disabled]="controlDisabled || options?.readonly"\n                  [id]="\'control\' + layoutNode?._id"\n                  [name]="controlName"\n                  [type]="layoutNode?.type"\n                  [value]="controlValue"\n                  (click)="updateValue($event)">\n              <mat-icon *ngIf="options?.icon" class="mat-24">{{options?.icon}}</mat-icon>\n              <span *ngIf="options?.title" [innerHTML]="options?.title"></span>\n          </button>\n      </div>',styles:[" button {\n      margin-top: 10px;\n  } "]}),V("design:paramtypes",[o.JsonSchemaFormService])],t)}(),E=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},q=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},z=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.radiosList=[],this.vertical=!1}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.radiosList=o.buildTitleMap(this.options.titleMap||this.options.enumNames,this.options.enum,!0),this.jsf.initializeControl(this)},t.prototype.updateValue=function(t){this.options.showErrors=!0,this.jsf.updateValue(this,t)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},E([e.Input(),q("design:type",Object)],t.prototype,"layoutNode",void 0),E([e.Input(),q("design:type",Array)],t.prototype,"layoutIndex",void 0),E([e.Input(),q("design:type",Array)],t.prototype,"dataIndex",void 0),t=E([e.Component({selector:"material-button-group-widget",template:'\n      <div>\n          <div *ngIf="options?.title">\n              <label\n                      [attr.for]="\'control\' + layoutNode?._id"\n                      [class]="options?.labelHtmlClass || \'\'"\n                      [style.display]="options?.notitle ? \'none\' : \'\'"\n                      [innerHTML]="options?.title"></label>\n              [disabled]="controlDisabled || options?.readonly"\n          </div>\n          <mat-button-toggle-group\n                  [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                  [attr.readonly]="options?.readonly ? \'readonly\' : null"\n                  [attr.required]="options?.required"\n                  [name]="controlName"\n                  [value]="controlValue"\n                  [vertical]="!!options.vertical">\n              <mat-button-toggle *ngFor="let radioItem of radiosList"\n                                 [id]="\'control\' + layoutNode?._id + \'/\' + radioItem?.name"\n                                 [value]="radioItem?.value"\n                                 (click)="updateValue(radioItem?.value)">\n                  <span [innerHTML]="radioItem?.name"></span>\n              </mat-button-toggle>\n          </mat-button-toggle-group>\n          <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                     [innerHTML]="options?.errorMessage"></mat-error>\n      </div>',styles:[" mat-error {\n      font-size: 75%;\n  } "]}),q("design:paramtypes",[o.JsonSchemaFormService])],t)}(),J=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},$=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},G=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.trueValue=!0,this.falseValue=!1,this.showSlideToggle=!1}return Object.defineProperty(t.prototype,"isChecked",{get:function(){return this.jsf.getFormControlValue(this)===this.trueValue},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this,!this.options.readonly),null!==this.controlValue&&void 0!==this.controlValue||(this.controlValue=!1,this.jsf.updateValue(this,this.falseValue)),"slide-toggle"!==this.layoutNode.type&&"slide-toggle"!==this.layoutNode.format||(this.showSlideToggle=!0)},t.prototype.updateValue=function(t){this.options.showErrors=!0,this.jsf.updateValue(this,t.checked?this.trueValue:this.falseValue)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},J([e.Input(),$("design:type",Object)],t.prototype,"layoutNode",void 0),J([e.Input(),$("design:type",Array)],t.prototype,"layoutIndex",void 0),J([e.Input(),$("design:type",Array)],t.prototype,"dataIndex",void 0),t=J([e.Component({selector:"material-checkbox-widget",template:'\n      <mat-checkbox *ngIf="boundControl && !showSlideToggle"\n                    [formControl]="formControl"\n                    align="left"\n                    [color]="options?.color || \'primary\'"\n                    [id]="\'control\' + layoutNode?._id"\n                    labelPosition="after"\n                    [name]="controlName"\n                    (blur)="options.showErrors = true">\n      <span *ngIf="options?.title"\n            class="checkbox-name"\n            [style.display]="options?.notitle ? \'none\' : \'\'"\n            [innerHTML]="options?.title"></span>\n      </mat-checkbox>\n      <mat-checkbox *ngIf="!boundControl && !showSlideToggle"\n                    align="left"\n                    [color]="options?.color || \'primary\'"\n                    [disabled]="controlDisabled || options?.readonly"\n                    [id]="\'control\' + layoutNode?._id"\n                    labelPosition="after"\n                    [name]="controlName"\n                    [checked]="isChecked"\n                    (blur)="options.showErrors = true"\n                    (change)="updateValue($event)">\n      <span *ngIf="options?.title"\n            class="checkbox-name"\n            [style.display]="options?.notitle ? \'none\' : \'\'"\n            [innerHTML]="options?.title"></span>\n      </mat-checkbox>\n      <mat-slide-toggle *ngIf="boundControl && showSlideToggle"\n                        [formControl]="formControl"\n                        align="left"\n                        [color]="options?.color || \'primary\'"\n                        [id]="\'control\' + layoutNode?._id"\n                        labelPosition="after"\n                        [name]="controlName"\n                        (blur)="options.showErrors = true">\n      <span *ngIf="options?.title"\n            class="checkbox-name"\n            [style.display]="options?.notitle ? \'none\' : \'\'"\n            [innerHTML]="options?.title"></span>\n      </mat-slide-toggle>\n      <mat-slide-toggle *ngIf="!boundControl && showSlideToggle"\n                        align="left"\n                        [color]="options?.color || \'primary\'"\n                        [disabled]="controlDisabled || options?.readonly"\n                        [id]="\'control\' + layoutNode?._id"\n                        labelPosition="after"\n                        [name]="controlName"\n                        [checked]="isChecked"\n                        (blur)="options.showErrors = true"\n                        (change)="updateValue($event)">\n      <span *ngIf="options?.title"\n            class="checkbox-name"\n            [style.display]="options?.notitle ? \'none\' : \'\'"\n            [innerHTML]="options?.title"></span>\n      </mat-slide-toggle>\n      <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                 [innerHTML]="options?.errorMessage"></mat-error>',styles:["\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  "]}),$("design:paramtypes",[o.JsonSchemaFormService])],t)}(),B=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},W=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},K=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,o=e&&t[e],n=0;if(o)return o.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},Q=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.horizontalList=!1,this.checkboxList=[]}return Object.defineProperty(t.prototype,"allChecked",{get:function(){return this.checkboxList.filter((function(t){return t.checked})).length===this.checkboxList.length},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"someChecked",{get:function(){var t=this.checkboxList.filter((function(t){return t.checked})).length;return t>0&&t<this.checkboxList.length},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){var t,e;if(this.options=this.layoutNode.options||{},this.horizontalList="checkboxes-inline"===this.layoutNode.type||"checkboxbuttons"===this.layoutNode.type,this.jsf.initializeControl(this),this.checkboxList=o.buildTitleMap(this.options.titleMap||this.options.enumNames,this.options.enum,!0),this.boundControl){var n=this.jsf.getFormControl(this);try{for(var i=K(this.checkboxList),r=i.next();!r.done;r=i.next()){var a=r.value;a.checked=n.value.includes(a.value)}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}}},t.prototype.updateValue=function(){this.options.showErrors=!0,this.boundControl&&this.jsf.updateArrayCheckboxList(this,this.checkboxList)},t.prototype.updateAllValues=function(t){this.options.showErrors=!0,this.checkboxList.forEach((function(e){return e.checked=t.checked})),this.updateValue()},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},B([e.Input(),W("design:type",Object)],t.prototype,"layoutNode",void 0),B([e.Input(),W("design:type",Array)],t.prototype,"layoutIndex",void 0),B([e.Input(),W("design:type",Array)],t.prototype,"dataIndex",void 0),t=B([e.Component({selector:"material-checkboxes-widget",template:'\n      <div>\n          <mat-checkbox type="checkbox"\n                        [checked]="allChecked"\n                        [color]="options?.color || \'primary\'"\n                        [disabled]="controlDisabled || options?.readonly"\n                        [indeterminate]="someChecked"\n                        [name]="options?.name"\n                        (blur)="options.showErrors = true"\n                        (change)="updateAllValues($event)">\n              <span class="checkbox-name" [innerHTML]="options?.name"></span>\n          </mat-checkbox>\n          <label *ngIf="options?.title"\n                 class="title"\n                 [class]="options?.labelHtmlClass || \'\'"\n                 [style.display]="options?.notitle ? \'none\' : \'\'"\n                 [innerHTML]="options?.title"></label>\n          <ul class="checkbox-list" [class.horizontal-list]="horizontalList">\n              <li *ngFor="let checkboxItem of checkboxList"\n                  [class]="options?.htmlClass || \'\'">\n                  <mat-checkbox type="checkbox"\n                                [(ngModel)]="checkboxItem.checked"\n                                [color]="options?.color || \'primary\'"\n                                [disabled]="controlDisabled || options?.readonly"\n                                [name]="checkboxItem?.name"\n                                (blur)="options.showErrors = true"\n                                (change)="updateValue()">\n                      <span class="checkbox-name" [innerHTML]="checkboxItem?.name"></span>\n                  </mat-checkbox>\n              </li>\n          </ul>\n          <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                     [innerHTML]="options?.errorMessage"></mat-error>\n      </div>',styles:["\n      .title {\n          font-weight: bold;\n      }\n\n      .checkbox-list {\n          list-style-type: none;\n      }\n\n      .horizontal-list > li {\n          display: inline-block;\n          margin-right: 10px;\n          zoom: 1;\n      }\n\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  "]}),W("design:paramtypes",[o.JsonSchemaFormService])],t)}(),U=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},X=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},Y=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this)},t.prototype.updateValue=function(t){this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},U([e.Input(),X("design:type",Object)],t.prototype,"layoutNode",void 0),U([e.Input(),X("design:type",Array)],t.prototype,"layoutIndex",void 0),U([e.Input(),X("design:type",Array)],t.prototype,"dataIndex",void 0),t=U([e.Component({selector:"material-chip-list-widget",template:""}),X("design:paramtypes",[o.JsonSchemaFormService])],t)}(),Z=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},tt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},et=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.autoCompleteList=[]}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this,!this.options.readonly),this.setControlDate(this.controlValue),this.options.notitle||this.options.description||!this.options.placeholder||(this.options.description=this.options.placeholder)},t.prototype.ngOnChanges=function(){this.setControlDate(this.controlValue)},t.prototype.setControlDate=function(t){this.dateValue=n.stringToDate(t)},t.prototype.updateValue=function(t){this.options.showErrors=!0,this.jsf.updateValue(this,n.dateToString(t,this.options))},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},Z([e.Input(),tt("design:type",Object)],t.prototype,"layoutNode",void 0),Z([e.Input(),tt("design:type",Array)],t.prototype,"layoutIndex",void 0),Z([e.Input(),tt("design:type",Array)],t.prototype,"dataIndex",void 0),t=Z([e.Component({selector:"material-datepicker-widget",template:'\n      <mat-form-field [style.width]="\'100%\'">\n      <span matPrefix *ngIf="options?.prefix || options?.fieldAddonLeft"\n            [innerHTML]="options?.prefix || options?.fieldAddonLeft"></span>\n          <input matInput *ngIf="boundControl"\n                 [formControl]="formControl"\n                 [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                 [attr.list]="\'control\' + layoutNode?._id + \'Autocomplete\'"\n                 [attr.readonly]="options?.readonly ? \'readonly\' : null"\n                 [id]="\'control\' + layoutNode?._id"\n                 [max]="options?.maximum"\n                 [matDatepicker]="picker"\n                 [min]="options?.minimum"\n                 [name]="controlName"\n                 [placeholder]="options?.title"\n                 [required]="options?.required"\n                 [style.width]="\'100%\'"\n                 (blur)="options.showErrors = true">\n          <input matInput *ngIf="!boundControl"\n                 [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                 [attr.list]="\'control\' + layoutNode?._id + \'Autocomplete\'"\n                 [attr.readonly]="options?.readonly ? \'readonly\' : null"\n                 [disabled]="controlDisabled || options?.readonly"\n                 [id]="\'control\' + layoutNode?._id"\n                 [max]="options?.maximum"\n                 [matDatepicker]="picker"\n                 [min]="options?.minimum"\n                 [name]="controlName"\n                 [placeholder]="options?.title"\n                 [required]="options?.required"\n                 [style.width]="\'100%\'"\n                 [value]="dateValue"\n                 (blur)="options.showErrors = true"\n                 (change)="updateValue($event)"\n                 (input)="updateValue($event)">\n          <span matSuffix *ngIf="options?.suffix || options?.fieldAddonRight"\n                [innerHTML]="options?.suffix || options?.fieldAddonRight"></span>\n          <mat-hint *ngIf="options?.description && (!options?.showErrors || !options?.errorMessage)"\n                    align="end" [innerHTML]="options?.description"></mat-hint>\n          <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\n      </mat-form-field>\n      <mat-datepicker #picker></mat-datepicker>\n      <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                 [innerHTML]="options?.errorMessage"></mat-error>',styles:["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}),tt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),ot=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},nt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},it=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this)},t.prototype.updateValue=function(t){this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},ot([e.Input(),nt("design:type",Object)],t.prototype,"layoutNode",void 0),ot([e.Input(),nt("design:type",Array)],t.prototype,"layoutIndex",void 0),ot([e.Input(),nt("design:type",Array)],t.prototype,"dataIndex",void 0),t=ot([e.Component({selector:"material-file-widget",template:""}),nt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),rt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},at=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},st=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.autoCompleteList=[]}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this),this.options.notitle||this.options.description||!this.options.placeholder||(this.options.description=this.options.placeholder)},t.prototype.updateValue=function(t){this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},rt([e.Input(),at("design:type",Object)],t.prototype,"layoutNode",void 0),rt([e.Input(),at("design:type",Array)],t.prototype,"layoutIndex",void 0),rt([e.Input(),at("design:type",Array)],t.prototype,"dataIndex",void 0),t=rt([e.Component({selector:"material-input-widget",template:'\n      <mat-form-field\n              [class]="options?.htmlClass || \'\'"\n              [floatLabel]="options?.floatPlaceholder || (options?.notitle ? \'never\' : \'auto\')"\n              [style.width]="\'100%\'">\n      <span matPrefix *ngIf="options?.prefix || options?.fieldAddonLeft"\n            [innerHTML]="options?.prefix || options?.fieldAddonLeft"></span>\n          <input matInput *ngIf="boundControl"\n                 [formControl]="formControl"\n                 [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                 [attr.list]="\'control\' + layoutNode?._id + \'Autocomplete\'"\n                 [attr.maxlength]="options?.maxLength"\n                 [attr.minlength]="options?.minLength"\n                 [attr.pattern]="options?.pattern"\n                 [readonly]="options?.readonly ? \'readonly\' : null"\n                 [id]="\'control\' + layoutNode?._id"\n                 [name]="controlName"\n                 [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                 [required]="options?.required"\n                 [style.width]="\'100%\'"\n                 [type]="layoutNode?.type"\n                 (blur)="options.showErrors = true">\n          <input matInput *ngIf="!boundControl"\n                 [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                 [attr.list]="\'control\' + layoutNode?._id + \'Autocomplete\'"\n                 [attr.maxlength]="options?.maxLength"\n                 [attr.minlength]="options?.minLength"\n                 [attr.pattern]="options?.pattern"\n                 [disabled]="controlDisabled"\n                 [id]="\'control\' + layoutNode?._id"\n                 [name]="controlName"\n                 [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                 [readonly]="options?.readonly ? \'readonly\' : null"\n                 [required]="options?.required"\n                 [style.width]="\'100%\'"\n                 [type]="layoutNode?.type"\n                 [value]="controlValue"\n                 (input)="updateValue($event)"\n                 (blur)="options.showErrors = true">\n          <span matSuffix *ngIf="options?.suffix || options?.fieldAddonRight"\n                [innerHTML]="options?.suffix || options?.fieldAddonRight"></span>\n          <mat-hint *ngIf="options?.description && (!options?.showErrors || !options?.errorMessage)"\n                    align="end" [innerHTML]="options?.description"></mat-hint>\n          <mat-autocomplete *ngIf="options?.typeahead?.source">\n              <mat-option *ngFor="let word of options?.typeahead?.source"\n                          [value]="word">{{word}}</mat-option>\n          </mat-autocomplete>\n      </mat-form-field>\n      <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                 [innerHTML]="options?.errorMessage"></mat-error>',styles:["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}),at("design:paramtypes",[o.JsonSchemaFormService])],t)}(),lt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},pt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},dt=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.allowNegative=!0,this.allowDecimal=!0,this.allowExponents=!1,this.lastValidNumber=""}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this),"integer"===this.layoutNode.dataType&&(this.allowDecimal=!1),this.options.notitle||this.options.description||!this.options.placeholder||(this.options.description=this.options.placeholder)},t.prototype.updateValue=function(t){this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},lt([e.Input(),pt("design:type",Object)],t.prototype,"layoutNode",void 0),lt([e.Input(),pt("design:type",Array)],t.prototype,"layoutIndex",void 0),lt([e.Input(),pt("design:type",Array)],t.prototype,"dataIndex",void 0),t=lt([e.Component({selector:"material-number-widget",template:'\n      <mat-form-field\n              [class]="options?.htmlClass || \'\'"\n              [floatLabel]="options?.floatPlaceholder || (options?.notitle ? \'never\' : \'auto\')"\n              [style.width]="\'100%\'">\n      <span matPrefix *ngIf="options?.prefix || options?.fieldAddonLeft"\n            [innerHTML]="options?.prefix || options?.fieldAddonLeft"></span>\n          <input matInput *ngIf="boundControl"\n                 [formControl]="formControl"\n                 [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                 [attr.max]="options?.maximum"\n                 [attr.min]="options?.minimum"\n                 [attr.step]="options?.multipleOf || options?.step || \'any\'"\n                 [id]="\'control\' + layoutNode?._id"\n                 [name]="controlName"\n                 [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                 [readonly]="options?.readonly ? \'readonly\' : null"\n                 [required]="options?.required"\n                 [style.width]="\'100%\'"\n                 [type]="\'number\'"\n                 (blur)="options.showErrors = true">\n          <input matInput *ngIf="!boundControl"\n                 [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                 [attr.max]="options?.maximum"\n                 [attr.min]="options?.minimum"\n                 [attr.step]="options?.multipleOf || options?.step || \'any\'"\n                 [disabled]="controlDisabled"\n                 [id]="\'control\' + layoutNode?._id"\n                 [name]="controlName"\n                 [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                 [readonly]="options?.readonly ? \'readonly\' : null"\n                 [required]="options?.required"\n                 [style.width]="\'100%\'"\n                 [type]="\'number\'"\n                 [value]="controlValue"\n                 (input)="updateValue($event)"\n                 (blur)="options.showErrors = true">\n          <span matSuffix *ngIf="options?.suffix || options?.fieldAddonRight"\n                [innerHTML]="options?.suffix || options?.fieldAddonRight"></span>\n          <mat-hint *ngIf="layoutNode?.type === \'range\'" align="start"\n                    [innerHTML]="controlValue"></mat-hint>\n          <mat-hint *ngIf="options?.description && (!options?.showErrors || !options?.errorMessage)"\n                    align="end" [innerHTML]="options?.description"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                 [innerHTML]="options?.errorMessage"></mat-error>',styles:["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}),pt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),ct=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},ut=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},ft=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this)},t.prototype.updateValue=function(t){this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},ct([e.Input(),ut("design:type",Object)],t.prototype,"layoutNode",void 0),ct([e.Input(),ut("design:type",Array)],t.prototype,"layoutIndex",void 0),ct([e.Input(),ut("design:type",Array)],t.prototype,"dataIndex",void 0),t=ct([e.Component({selector:"material-one-of-widget",template:""}),ut("design:paramtypes",[o.JsonSchemaFormService])],t)}(),mt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},yt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},ht=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.flexDirection="column",this.radiosList=[]}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},"radios-inline"===this.layoutNode.type&&(this.flexDirection="row"),this.radiosList=o.buildTitleMap(this.options.titleMap||this.options.enumNames,this.options.enum,!0),this.jsf.initializeControl(this,!this.options.readonly)},t.prototype.updateValue=function(t){this.options.showErrors=!0,this.jsf.updateValue(this,t)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},mt([e.Input(),yt("design:type",Object)],t.prototype,"layoutNode",void 0),mt([e.Input(),yt("design:type",Array)],t.prototype,"layoutIndex",void 0),mt([e.Input(),yt("design:type",Array)],t.prototype,"dataIndex",void 0),t=mt([e.Component({selector:"material-radios-widget",template:'\n      <div>\n          <div *ngIf="options?.title">\n              <label\n                      [attr.for]="\'control\' + layoutNode?._id"\n                      [class]="options?.labelHtmlClass || \'\'"\n                      [style.display]="options?.notitle ? \'none\' : \'\'"\n                      [innerHTML]="options?.title"></label>\n          </div>\n          <mat-radio-group *ngIf="boundControl"\n                           [formControl]="formControl"\n                           [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                           [attr.readonly]="options?.readonly ? \'readonly\' : null"\n                           [attr.required]="options?.required"\n                           [style.flex-direction]="flexDirection"\n                           [name]="controlName"\n                           (blur)="options.showErrors = true">\n              <mat-radio-button *ngFor="let radioItem of radiosList"\n                                [id]="\'control\' + layoutNode?._id + \'/\' + radioItem?.name"\n                                [value]="radioItem?.value">\n                  <span [innerHTML]="radioItem?.name"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-radio-group *ngIf="!boundControl"\n                           [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                           [attr.readonly]="options?.readonly ? \'readonly\' : null"\n                           [attr.required]="options?.required"\n                           [style.flex-direction]="flexDirection"\n                           [disabled]="controlDisabled || options?.readonly"\n                           [name]="controlName"\n                           [value]="controlValue">\n              <mat-radio-button *ngFor="let radioItem of radiosList"\n                                [id]="\'control\' + layoutNode?._id + \'/\' + radioItem?.name"\n                                [value]="radioItem?.value"\n                                (click)="updateValue(radioItem?.value)">\n                  <span [innerHTML]="radioItem?.name"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                     [innerHTML]="options?.errorMessage"></mat-error>\n      </div>',styles:["\n      mat-radio-group {\n          display: inline-flex;\n      }\n\n      mat-radio-button {\n          margin: 2px;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  "]}),yt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),gt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},bt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},xt=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.selectList=[],this.isArray=n.isArray}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.selectList=o.buildTitleMap(this.options.titleMap||this.options.enumNames,this.options.enum,!!this.options.required,!!this.options.flatList),this.jsf.initializeControl(this,!this.options.readonly),this.options.notitle||this.options.description||!this.options.placeholder||(this.options.description=this.options.placeholder)},t.prototype.updateValue=function(t){this.options.showErrors=!0,this.jsf.updateValue(this,t.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},gt([e.Input(),bt("design:type",Object)],t.prototype,"layoutNode",void 0),gt([e.Input(),bt("design:type",Array)],t.prototype,"layoutIndex",void 0),gt([e.Input(),bt("design:type",Array)],t.prototype,"dataIndex",void 0),t=gt([e.Component({selector:"material-select-widget",template:'\n      <mat-form-field\n              [class]="options?.htmlClass || \'\'"\n              [floatLabel]="options?.floatPlaceholder || (options?.notitle ? \'never\' : \'auto\')"\n              [style.width]="\'100%\'">\n      <span matPrefix *ngIf="options?.prefix || options?.fieldAddonLeft"\n            [innerHTML]="options?.prefix || options?.fieldAddonLeft"></span>\n          <mat-select *ngIf="boundControl"\n                      [formControl]="formControl"\n                      [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                      [attr.name]="controlName"\n                      [id]="\'control\' + layoutNode?._id"\n                      [multiple]="options?.multiple"\n                      [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                      [required]="options?.required"\n                      [style.width]="\'100%\'"\n                      (blur)="options.showErrors = true">\n              <ng-template ngFor let-selectItem [ngForOf]="selectList">\n                  <mat-option *ngIf="!isArray(selectItem?.items)"\n                              [value]="selectItem?.value">\n                      <span [innerHTML]="selectItem?.name"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf="isArray(selectItem?.items)"\n                                [label]="selectItem?.group">\n                      <mat-option *ngFor="let subItem of selectItem.items"\n                                  [value]="subItem?.value">\n                          <span [innerHTML]="subItem?.name"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <mat-select *ngIf="!boundControl"\n                      [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                      [attr.name]="controlName"\n                      [disabled]="controlDisabled || options?.readonly"\n                      [id]="\'control\' + layoutNode?._id"\n                      [multiple]="options?.multiple"\n                      [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                      [required]="options?.required"\n                      [style.width]="\'100%\'"\n                      [value]="controlValue"\n                      (blur)="options.showErrors = true"\n                      (selectionChange)="updateValue($event)">\n              <ng-template ngFor let-selectItem [ngForOf]="selectList">\n                  <mat-option *ngIf="!isArray(selectItem?.items)"\n                              [attr.selected]="selectItem?.value === controlValue"\n                              [value]="selectItem?.value">\n                      <span [innerHTML]="selectItem?.name"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf="isArray(selectItem?.items)"\n                                [label]="selectItem?.group">\n                      <mat-option *ngFor="let subItem of selectItem.items"\n                                  [attr.selected]="subItem?.value === controlValue"\n                                  [value]="subItem?.value">\n                          <span [innerHTML]="subItem?.name"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <span matSuffix *ngIf="options?.suffix || options?.fieldAddonRight"\n                [innerHTML]="options?.suffix || options?.fieldAddonRight"></span>\n          <mat-hint *ngIf="options?.description && (!options?.showErrors || !options?.errorMessage)"\n                    align="end" [innerHTML]="options?.description"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                 [innerHTML]="options?.errorMessage"></mat-error>',styles:["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}),bt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),It=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},vt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},wt=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1,this.allowNegative=!0,this.allowDecimal=!0,this.allowExponents=!1,this.lastValidNumber=""}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this,!this.options.readonly)},t.prototype.updateValue=function(t){this.options.showErrors=!0,this.jsf.updateValue(this,t.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},It([e.Input(),vt("design:type",Object)],t.prototype,"layoutNode",void 0),It([e.Input(),vt("design:type",Array)],t.prototype,"layoutIndex",void 0),It([e.Input(),vt("design:type",Array)],t.prototype,"dataIndex",void 0),t=It([e.Component({selector:"material-slider-widget",template:'\n      <mat-slider thumbLabel *ngIf="boundControl"\n                  [formControl]="formControl"\n                  [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                  [id]="\'control\' + layoutNode?._id"\n                  [max]="options?.maximum"\n                  [min]="options?.minimum"\n                  [step]="options?.multipleOf || options?.step || \'any\'"\n                  [style.width]="\'100%\'"\n                  (blur)="options.showErrors = true"></mat-slider>\n      <mat-slider thumbLabel *ngIf="!boundControl"\n                  [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                  [disabled]="controlDisabled || options?.readonly"\n                  [id]="\'control\' + layoutNode?._id"\n                  [max]="options?.maximum"\n                  [min]="options?.minimum"\n                  [step]="options?.multipleOf || options?.step || \'any\'"\n                  [style.width]="\'100%\'"\n                  [value]="controlValue"\n                  (blur)="options.showErrors = true"\n                  (change)="updateValue($event)"></mat-slider>\n      <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                 [innerHTML]="options?.errorMessage"></mat-error>',styles:[" mat-error {\n      font-size: 75%;\n  } "]}),vt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),jt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},Nt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},Ct=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this)},t.prototype.updateValue=function(t){this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},jt([e.Input(),Nt("design:type",Object)],t.prototype,"layoutNode",void 0),jt([e.Input(),Nt("design:type",Array)],t.prototype,"layoutIndex",void 0),jt([e.Input(),Nt("design:type",Array)],t.prototype,"dataIndex",void 0),t=jt([e.Component({selector:"material-stepper-widget",template:""}),Nt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),Mt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},At=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},Ot=function(){function t(t){this.jsf=t,this.selectedItem=0,this.showAddTab=!0}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.itemCount=this.layoutNode.items.length-1,this.updateControl()},t.prototype.select=function(t){"$ref"===this.layoutNode.items[t].type&&(this.jsf.addItem({layoutNode:this.layoutNode.items[t],layoutIndex:this.layoutIndex.concat(t),dataIndex:this.dataIndex.concat(t)}),this.updateControl()),this.selectedItem=t},t.prototype.updateControl=function(){this.itemCount=this.layoutNode.items.length-1;var t=this.layoutNode.items[this.layoutNode.items.length-1];this.showAddTab="$ref"===t.type&&this.itemCount<(t.options.maxItems||1e3)},t.prototype.setTabTitle=function(t,e){return this.jsf.setArrayItemTitle(this,t,e)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},Mt([e.Input(),At("design:type",Object)],t.prototype,"layoutNode",void 0),Mt([e.Input(),At("design:type",Array)],t.prototype,"layoutIndex",void 0),Mt([e.Input(),At("design:type",Array)],t.prototype,"dataIndex",void 0),t=Mt([e.Component({selector:"material-tabs-widget",template:'\n      <nav mat-tab-nav-bar\n           [attr.aria-label]="options?.label || options?.title || \'\'"\n           [style.width]="\'100%\'">\n          <a mat-tab-link *ngFor="let item of layoutNode?.items; let i = index"\n             [active]="selectedItem === i"\n             (click)="select(i)">\n          <span *ngIf="showAddTab || item.type !== \'$ref\'"\n                [innerHTML]="setTabTitle(item, i)"></span>\n          </a>\n      </nav>\n      <div *ngFor="let layoutItem of layoutNode?.items; let i = index"\n           [class]="options?.htmlClass || \'\'">\n          <select-framework-widget *ngIf="selectedItem === i"\n                                   [class]="(options?.fieldHtmlClass || \'\') + \' \' + (options?.activeClass || \'\') + \' \' + (options?.style?.selected || \'\')"\n                                   [dataIndex]="layoutNode?.dataType === \'array\' ? (dataIndex || []).concat(i) : dataIndex"\n                                   [layoutIndex]="(layoutIndex || []).concat(i)"\n                                   [layoutNode]="layoutItem"></select-framework-widget>\n      </div>',styles:[" a {\n      cursor: pointer;\n  } "]}),At("design:paramtypes",[o.JsonSchemaFormService])],t)}(),Lt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},Rt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},Ft=function(){function t(t){this.jsf=t,this.controlDisabled=!1,this.boundControl=!1}return t.prototype.ngOnInit=function(){this.options=this.layoutNode.options||{},this.jsf.initializeControl(this),this.options.notitle||this.options.description||!this.options.placeholder||(this.options.description=this.options.placeholder)},t.prototype.updateValue=function(t){this.jsf.updateValue(this,t.target.value)},t.ctorParameters=function(){return[{type:o.JsonSchemaFormService}]},Lt([e.Input(),Rt("design:type",Object)],t.prototype,"layoutNode",void 0),Lt([e.Input(),Rt("design:type",Array)],t.prototype,"layoutIndex",void 0),Lt([e.Input(),Rt("design:type",Array)],t.prototype,"dataIndex",void 0),t=Lt([e.Component({selector:"material-textarea-widget",template:'\n      <mat-form-field\n              [class]="options?.htmlClass || \'\'"\n              [floatLabel]="options?.floatPlaceholder || (options?.notitle ? \'never\' : \'auto\')"\n              [style.width]="\'100%\'">\n      <span matPrefix *ngIf="options?.prefix || options?.fieldAddonLeft"\n            [innerHTML]="options?.prefix || options?.fieldAddonLeft"></span>\n          <textarea matInput *ngIf="boundControl"\n                    [formControl]="formControl"\n                    [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                    [attr.list]="\'control\' + layoutNode?._id + \'Autocomplete\'"\n                    [attr.maxlength]="options?.maxLength"\n                    [attr.minlength]="options?.minLength"\n                    [attr.pattern]="options?.pattern"\n                    [required]="options?.required"\n                    [id]="\'control\' + layoutNode?._id"\n                    [name]="controlName"\n                    [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                    [readonly]="options?.readonly ? \'readonly\' : null"\n                    [style.width]="\'100%\'"\n                    (blur)="options.showErrors = true"></textarea>\n          <textarea matInput *ngIf="!boundControl"\n                    [attr.aria-describedby]="\'control\' + layoutNode?._id + \'Status\'"\n                    [attr.list]="\'control\' + layoutNode?._id + \'Autocomplete\'"\n                    [attr.maxlength]="options?.maxLength"\n                    [attr.minlength]="options?.minLength"\n                    [attr.pattern]="options?.pattern"\n                    [required]="options?.required"\n                    [disabled]="controlDisabled"\n                    [id]="\'control\' + layoutNode?._id"\n                    [name]="controlName"\n                    [placeholder]="options?.notitle ? options?.placeholder : options?.title"\n                    [readonly]="options?.readonly ? \'readonly\' : null"\n                    [style.width]="\'100%\'"\n                    [value]="controlValue"\n                    (input)="updateValue($event)"\n                    (blur)="options.showErrors = true"></textarea>\n          <span matSuffix *ngIf="options?.suffix || options?.fieldAddonRight"\n                [innerHTML]="options?.suffix || options?.fieldAddonRight"></span>\n          <mat-hint *ngIf="options?.description && (!options?.showErrors || !options?.errorMessage)"\n                    align="end" [innerHTML]="options?.description"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf="options?.showErrors && options?.errorMessage"\n                 [innerHTML]="options?.errorMessage"></mat-error>',styles:["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}),Rt("design:paramtypes",[o.JsonSchemaFormService])],t)}(),_t=this&&this.__assign||function(){return(_t=Object.assign||function(t){for(var e,o=1,n=arguments.length;o<n;o++)for(var i in e=arguments[o])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},St=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},kt=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},Tt=function(){function t(t,e){this.changeDetector=t,this.jsf=e,this.frameworkInitialized=!1,this.formControl=null,this.parentArray=null,this.isOrderable=!1,this.dynamicTitle=null}return Object.defineProperty(t.prototype,"showRemoveButton",{get:function(){return!(!this.layoutNode||!this.widgetOptions.removable||this.widgetOptions.readonly||"$ref"===this.layoutNode.type)&&(!!this.layoutNode.recursiveReference||!(!this.layoutNode.arrayItem||!this.parentArray)&&(!(this.parentArray.items.length-1<=this.parentArray.options.minItems)&&("list"===this.layoutNode.arrayItemType||this.layoutIndex[this.layoutIndex.length-1]===this.parentArray.items.length-2)))},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){this.initializeFramework()},t.prototype.ngOnChanges=function(){this.frameworkInitialized||this.initializeFramework(),this.dynamicTitle&&this.updateTitle()},t.prototype.initializeFramework=function(){this.layoutNode?(this.options=i.cloneDeep(this.layoutNode.options||{}),this.widgetLayoutNode=_t(_t({},this.layoutNode),{options:i.cloneDeep(this.layoutNode.options||{})}),this.widgetOptions=this.widgetLayoutNode.options,this.formControl=this.jsf.getFormControl(this),n.isDefined(this.widgetOptions.minimum)&&n.isDefined(this.widgetOptions.maximum)&&this.widgetOptions.multipleOf>=1&&(this.layoutNode.type="range"),!["$ref","advancedfieldset","authfieldset","button","card","checkbox","expansion-panel","help","message","msg","section","submit","tabarray","tabs"].includes(this.layoutNode.type)&&/{{.+?}}/.test(this.widgetOptions.title||"")&&(this.dynamicTitle=this.widgetOptions.title,this.updateTitle()),this.layoutNode.arrayItem&&"$ref"!==this.layoutNode.type&&(this.parentArray=this.jsf.getParentNode(this),this.parentArray&&(this.isOrderable="tab"!==this.parentArray.type.slice(0,3)&&"list"===this.layoutNode.arrayItemType&&!this.widgetOptions.readonly&&this.parentArray.options.orderable)),this.frameworkInitialized=!0):this.options={}},t.prototype.updateTitle=function(){this.widgetLayoutNode.options.title=this.jsf.parseText(this.dynamicTitle,this.jsf.getFormControlValue(this),this.jsf.getFormControlGroup(this).value,this.dataIndex[this.dataIndex.length-1])},t.prototype.removeItem=function(){this.jsf.removeItem(this)},t.ctorParameters=function(){return[{type:e.ChangeDetectorRef},{type:o.JsonSchemaFormService}]},St([e.Input(),kt("design:type",Object)],t.prototype,"layoutNode",void 0),St([e.Input(),kt("design:type",Array)],t.prototype,"layoutIndex",void 0),St([e.Input(),kt("design:type",Array)],t.prototype,"dataIndex",void 0),t=St([e.Component({selector:"material-design-framework",template:'\n      <div\n              [class.array-item]="widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== \'$ref\'"\n              [orderable]="isOrderable"\n              [dataIndex]="dataIndex"\n              [layoutIndex]="layoutIndex"\n              [layoutNode]="widgetLayoutNode">\n          <svg *ngIf="showRemoveButton"\n               xmlns="http://www.w3.org/2000/svg"\n               height="18" width="18" viewBox="0 0 24 24"\n               class="close-button"\n               (click)="removeItem()">\n              <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>\n          </svg>\n          <select-widget-widget\n                  [dataIndex]="dataIndex"\n                  [layoutIndex]="layoutIndex"\n                  [layoutNode]="widgetLayoutNode"></select-widget-widget>\n      </div>\n      <div class="spacer" *ngIf="widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== \'$ref\'"></div>',styles:["\n      .array-item {\n          border-radius: 2px;\n          box-shadow: 0 3px 1px -2px rgba(0, 0, 0, .2),\n          0 2px 2px 0 rgba(0, 0, 0, .14),\n          0 1px 5px 0 rgba(0, 0, 0, .12);\n          padding: 6px;\n          position: relative;\n          transition: all 280ms cubic-bezier(.4, 0, .2, 1);\n      }\n\n      .close-button {\n          cursor: pointer;\n          position: absolute;\n          top: 6px;\n          right: 6px;\n          fill: rgba(0, 0, 0, .4);\n          visibility: hidden;\n          z-index: 500;\n      }\n\n      .close-button:hover {\n          fill: rgba(0, 0, 0, .8);\n      }\n\n      .array-item:hover > .close-button {\n          visibility: visible;\n      }\n\n      .spacer {\n          margin: 6px 0;\n      }\n\n      [draggable=true]:hover {\n          box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2),\n          0 8px 10px 1px rgba(0, 0, 0, .14),\n          0 3px 14px 2px rgba(0, 0, 0, .12);\n          cursor: move;\n          z-index: 10;\n      }\n\n      [draggable=true].drag-target-top {\n          box-shadow: 0 -2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n\n      [draggable=true].drag-target-bottom {\n          box-shadow: 0 2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n  "]}),kt("design:paramtypes",[e.ChangeDetectorRef,o.JsonSchemaFormService])],t)}(),Pt=this&&this.__extends||(A=function(t,e){return(A=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}A(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}),Dt=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},Vt=function(t){function o(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="material-design",e.framework=Tt,e.stylesheets=["//fonts.googleapis.com/icon?family=Material+Icons","//fonts.googleapis.com/css?family=Roboto:300,400,500,700"],e.widgets={root:R,section:S,$ref:P,button:H,"button-group":z,checkbox:G,checkboxes:Q,"chip-list":Y,date:et,file:it,number:dt,"one-of":ft,radios:ht,select:xt,slider:wt,stepper:Ct,tabs:Ot,text:st,textarea:Ft,"alt-date":"date","any-of":"one-of",card:"section",color:"text","expansion-panel":"section",hidden:"none",image:"none",integer:"number",radiobuttons:"button-group",range:"slider",submit:"button",tagsinput:"chip-list",wizard:"stepper"},e}return Pt(o,t),o=Dt([e.Injectable()],o)}(n.Framework),Ht=this&&this.__decorate||function(t,e,o,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,o,n);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(r<3?i(a):r>3?i(e,o,a):i(e,o))||a);return r>3&&a&&Object.defineProperty(e,o,a),a},Et=function(){function t(){}var i;return i=t,t.forRoot=function(){return{ngModule:i,providers:[{provide:n.Framework,useClass:Vt,multi:!0}]}},t=i=Ht([e.NgModule({imports:[r.CommonModule,a.FormsModule,a.ReactiveFormsModule,s.FlexLayoutModule,l.MatAutocompleteModule,p.MatButtonModule,d.MatButtonToggleModule,c.MatCardModule,u.MatCheckboxModule,f.MatChipsModule,m.MatDatepickerModule,y.MatExpansionModule,h.MatFormFieldModule,g.MatIconModule,b.MatInputModule,x.MatNativeDateModule,I.MatRadioModule,v.MatSelectModule,w.MatSliderModule,j.MatSlideToggleModule,N.MatStepperModule,C.MatTabsModule,M.MatTooltipModule,o.WidgetLibraryModule],declarations:[R,S,P,ft,H,z,G,Q,Y,et,it,st,dt,ht,xt,wt,Ct,Ot,Ft,Tt],exports:[R,S,P,ft,H,z,G,Q,Y,et,it,st,dt,ht,xt,wt,Ct,Ot,Ft,Tt],entryComponents:[R,S,P,ft,H,z,G,Q,Y,et,it,st,dt,ht,xt,wt,Ct,Ot,Ft,Tt]})],t)}();t.FlexLayoutRootComponent=R,t.FlexLayoutSectionComponent=S,t.MaterialAddReferenceComponent=P,t.MaterialButtonComponent=H,t.MaterialButtonGroupComponent=z,t.MaterialCheckboxComponent=G,t.MaterialCheckboxesComponent=Q,t.MaterialChipListComponent=Y,t.MaterialDatepickerComponent=et,t.MaterialDesignFramework=Vt,t.MaterialDesignFrameworkComponent=Tt,t.MaterialDesignFrameworkModule=Et,t.MaterialFileComponent=it,t.MaterialInputComponent=st,t.MaterialNumberComponent=dt,t.MaterialOneOfComponent=ft,t.MaterialRadiosComponent=ht,t.MaterialSelectComponent=xt,t.MaterialSliderComponent=wt,t.MaterialStepperComponent=Ct,t.MaterialTabsComponent=Ot,t.MaterialTextareaComponent=Ft,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=ngsf-material-design-framework.umd.min.js.map