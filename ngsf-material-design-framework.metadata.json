{"__symbolic":"module","version":4,"metadata":{"FlexLayoutRootComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"flex-layout-root-widget","template":"\n      <div *ngFor=\"let layoutNode of layout; let i = index\"\n           [class.form-flex-item]=\"isFlexItem\"\n           [style.flex-grow]=\"getFlexAttribute(layoutNode, 'flex-grow')\"\n           [style.flex-shrink]=\"getFlexAttribute(layoutNode, 'flex-shrink')\"\n           [style.flex-basis]=\"getFlexAttribute(layoutNode, 'flex-basis')\"\n           [style.align-self]=\"(layoutNode?.options || {})['align-self']\"\n           [style.order]=\"layoutNode?.options?.order\"\n           [fxFlex]=\"layoutNode?.options?.fxFlex\"\n           [fxFlexOrder]=\"layoutNode?.options?.fxFlexOrder\"\n           [fxFlexOffset]=\"layoutNode?.options?.fxFlexOffset\"\n           [fxFlexAlign]=\"layoutNode?.options?.fxFlexAlign\">\n          <select-framework-widget *ngIf=\"showWidget(layoutNode)\"\n                                   [dataIndex]=\"layoutNode?.arrayItem ? (dataIndex || []).concat(i) : (dataIndex || [])\"\n                                   [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n                                   [layoutNode]=\"layoutNode\"></select-framework-widget>\n          </div>","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":22,"character":19},"member":"Default"}}]}],"members":{"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":25,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":26,"character":3}}]}],"layout":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":27,"character":3}}]}],"isFlexItem":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":28,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":31,"character":17}]}],"removeItem":[{"__symbolic":"method"}],"getFlexAttribute":[{"__symbolic":"method"}],"showWidget":[{"__symbolic":"method"}]}},"FlexLayoutSectionComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"flex-layout-section-widget","template":"\n      <div *ngIf=\"containerType === 'div'\"\n           [class]=\"options?.htmlClass || ''\"\n           [class.expandable]=\"options?.expandable && !expanded\"\n           [class.expanded]=\"options?.expandable && expanded\">\n          <label *ngIf=\"sectionTitle\"\n                 [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                 [innerHTML]=\"sectionTitle\"\n                 (click)=\"toggleExpanded()\"></label>\n          <flex-layout-root-widget *ngIf=\"expanded\"\n                                   [layout]=\"layoutNode.items\"\n                                   [dataIndex]=\"dataIndex\"\n                                   [layoutIndex]=\"layoutIndex\"\n                                   [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                   [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                   [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                   [style.display]=\"getFlexAttribute('display')\"\n                                   [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                   [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                   [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                   [style.align-items]=\"getFlexAttribute('align-items')\"\n                                   [style.align-content]=\"getFlexAttribute('align-content')\"\n                                   [fxLayout]=\"getFlexAttribute('layout')\"\n                                   [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                   [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                   [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>\n\n      <fieldset *ngIf=\"containerType === 'fieldset'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\"\n                [disabled]=\"options?.readonly\">\n          <legend *ngIf=\"sectionTitle\"\n                  [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                  [innerHTML]=\"sectionTitle\"\n                  (click)=\"toggleExpanded()\"></legend>\n          <flex-layout-root-widget *ngIf=\"expanded\"\n                                   [layout]=\"layoutNode.items\"\n                                   [dataIndex]=\"dataIndex\"\n                                   [layoutIndex]=\"layoutIndex\"\n                                   [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                   [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                   [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                   [style.display]=\"getFlexAttribute('display')\"\n                                   [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                   [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                   [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                   [style.align-items]=\"getFlexAttribute('align-items')\"\n                                   [style.align-content]=\"getFlexAttribute('align-content')\"\n                                   [fxLayout]=\"getFlexAttribute('layout')\"\n                                   [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                   [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                   [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </fieldset>\n\n      <mat-card *ngIf=\"containerType === 'card'\"\n                [class]=\"options?.htmlClass || ''\"\n                [class.expandable]=\"options?.expandable && !expanded\"\n                [class.expanded]=\"options?.expandable && expanded\">\n          <mat-card-header *ngIf=\"sectionTitle\">\n              <legend\n                      [class]=\"'legend ' + (options?.labelHtmlClass || '')\"\n                      [innerHTML]=\"sectionTitle\"\n                      (click)=\"toggleExpanded()\"></legend>\n          </mat-card-header>\n          <mat-card-content *ngIf=\"expanded\">\n              <fieldset [disabled]=\"options?.readonly\">\n                  <flex-layout-root-widget *ngIf=\"expanded\"\n                                           [layout]=\"layoutNode.items\"\n                                           [dataIndex]=\"dataIndex\"\n                                           [layoutIndex]=\"layoutIndex\"\n                                           [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                           [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                           [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                           [style.display]=\"getFlexAttribute('display')\"\n                                           [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                           [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                           [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                           [style.align-items]=\"getFlexAttribute('align-items')\"\n                                           [style.align-content]=\"getFlexAttribute('align-content')\"\n                                           [fxLayout]=\"getFlexAttribute('layout')\"\n                                           [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                           [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                           [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n              </fieldset>\n          </mat-card-content>\n          <mat-card-footer>\n              <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                         [innerHTML]=\"options?.errorMessage\"></mat-error>\n          </mat-card-footer>\n      </mat-card>\n\n      <mat-expansion-panel *ngIf=\"containerType === 'expansion-panel'\"\n                           [expanded]=\"expanded\"\n                           [hideToggle]=\"!options?.expandable\">\n          <mat-expansion-panel-header>\n              <mat-panel-title>\n                  <legend *ngIf=\"sectionTitle\"\n                          [class]=\"options?.labelHtmlClass\"\n                          [innerHTML]=\"sectionTitle\"\n                          (click)=\"toggleExpanded()\"></legend>\n              </mat-panel-title>\n          </mat-expansion-panel-header>\n          <fieldset [disabled]=\"options?.readonly\">\n              <flex-layout-root-widget *ngIf=\"expanded\"\n                                       [layout]=\"layoutNode.items\"\n                                       [dataIndex]=\"dataIndex\"\n                                       [layoutIndex]=\"layoutIndex\"\n                                       [isFlexItem]=\"getFlexAttribute('is-flex')\"\n                                       [class.form-flex-column]=\"getFlexAttribute('flex-direction') === 'column'\"\n                                       [class.form-flex-row]=\"getFlexAttribute('flex-direction') === 'row'\"\n                                       [style.display]=\"getFlexAttribute('display')\"\n                                       [style.flex-direction]=\"getFlexAttribute('flex-direction')\"\n                                       [style.flex-wrap]=\"getFlexAttribute('flex-wrap')\"\n                                       [style.justify-content]=\"getFlexAttribute('justify-content')\"\n                                       [style.align-items]=\"getFlexAttribute('align-items')\"\n                                       [style.align-content]=\"getFlexAttribute('align-content')\"\n                                       [fxLayout]=\"getFlexAttribute('layout')\"\n                                       [fxLayoutGap]=\"options?.fxLayoutGap\"\n                                       [fxLayoutAlign]=\"options?.fxLayoutAlign\"\n                                       [attr.fxFlexFill]=\"options?.fxLayoutAlign\"></flex-layout-root-widget>\n          </fieldset>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </mat-expansion-panel>","styles":["\n      fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n      }\n\n      .legend {\n          font-weight: bold;\n      }\n\n      .expandable > .legend:before {\n          content: '▶';\n          padding-right: .3em;\n      }\n\n      .expanded > .legend:before {\n          content: '▼';\n          padding-right: .2em;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":167,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":168,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":169,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":172,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"toggleExpanded":[{"__symbolic":"method"}],"getFlexAttribute":[{"__symbolic":"method"}]}},"MaterialAddReferenceComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"material-add-reference-widget","template":"\n      <section [class]=\"options?.htmlClass || ''\" align=\"end\">\n          <button mat-raised-button *ngIf=\"showAddButton\"\n                  [color]=\"options?.color || 'accent'\"\n                  [disabled]=\"options?.readonly\"\n                  (click)=\"addItem($event)\">\n              <span *ngIf=\"options?.icon\" [class]=\"options?.icon\"></span>\n              <span *ngIf=\"options?.title\" [innerHTML]=\"buttonText\"></span>\n          </button>\n      </section>","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":15,"character":19},"member":"Default"}}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":22,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":23,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":24,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":27,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"addItem":[{"__symbolic":"method"}]}},"MaterialButtonComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"material-button-widget","template":"\n      <div class=\"button-row\" [class]=\"options?.htmlClass || ''\">\n          <!-- [color]=\"options?.color || 'primary'\" -->\n          <button mat-raised-button\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [disabled]=\"controlDisabled || options?.readonly\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [name]=\"controlName\"\n                  [type]=\"layoutNode?.type\"\n                  [value]=\"controlValue\"\n                  (click)=\"updateValue($event)\">\n              <mat-icon *ngIf=\"options?.icon\" class=\"mat-24\">{{options?.icon}}</mat-icon>\n              <span *ngIf=\"options?.title\" [innerHTML]=\"options?.title\"></span>\n          </button>\n      </div>","styles":[" button {\n      margin-top: 10px;\n  } "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":34,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":35,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":36,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":39,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialButtonGroupComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"material-button-group-widget","template":"\n      <div>\n          <div *ngIf=\"options?.title\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id\"\n                      [class]=\"options?.labelHtmlClass || ''\"\n                      [style.display]=\"options?.notitle ? 'none' : ''\"\n                      [innerHTML]=\"options?.title\"></label>\n              [disabled]=\"controlDisabled || options?.readonly\"\n          </div>\n          <mat-button-toggle-group\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                  [attr.required]=\"options?.required\"\n                  [name]=\"controlName\"\n                  [value]=\"controlValue\"\n                  [vertical]=\"!!options.vertical\">\n              <mat-button-toggle *ngFor=\"let radioItem of radiosList\"\n                                 [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                 [value]=\"radioItem?.value\"\n                                 (click)=\"updateValue(radioItem?.value)\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-button-toggle>\n          </mat-button-toggle-group>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>","styles":[" mat-error {\n      font-size: 75%;\n  } "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":46,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":47,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":48,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":51,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialCheckboxComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"material-checkbox-widget","template":"\n      <mat-checkbox *ngIf=\"boundControl && !showSlideToggle\"\n                    [formControl]=\"formControl\"\n                    align=\"left\"\n                    [color]=\"options?.color || 'primary'\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    labelPosition=\"after\"\n                    [name]=\"controlName\"\n                    (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-checkbox>\n      <mat-checkbox *ngIf=\"!boundControl && !showSlideToggle\"\n                    align=\"left\"\n                    [color]=\"options?.color || 'primary'\"\n                    [disabled]=\"controlDisabled || options?.readonly\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    labelPosition=\"after\"\n                    [name]=\"controlName\"\n                    [checked]=\"isChecked\"\n                    (blur)=\"options.showErrors = true\"\n                    (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-checkbox>\n      <mat-slide-toggle *ngIf=\"boundControl && showSlideToggle\"\n                        [formControl]=\"formControl\"\n                        align=\"left\"\n                        [color]=\"options?.color || 'primary'\"\n                        [id]=\"'control' + layoutNode?._id\"\n                        labelPosition=\"after\"\n                        [name]=\"controlName\"\n                        (blur)=\"options.showErrors = true\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-slide-toggle>\n      <mat-slide-toggle *ngIf=\"!boundControl && showSlideToggle\"\n                        align=\"left\"\n                        [color]=\"options?.color || 'primary'\"\n                        [disabled]=\"controlDisabled || options?.readonly\"\n                        [id]=\"'control' + layoutNode?._id\"\n                        labelPosition=\"after\"\n                        [name]=\"controlName\"\n                        [checked]=\"isChecked\"\n                        (blur)=\"options.showErrors = true\"\n                        (change)=\"updateValue($event)\">\n      <span *ngIf=\"options?.title\"\n            class=\"checkbox-name\"\n            [style.display]=\"options?.notitle ? 'none' : ''\"\n            [innerHTML]=\"options?.title\"></span>\n      </mat-slide-toggle>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>","styles":["\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":85,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":86,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":87,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":90,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialCheckboxesComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"material-checkboxes-widget","template":"\n      <div>\n          <mat-checkbox type=\"checkbox\"\n                        [checked]=\"allChecked\"\n                        [color]=\"options?.color || 'primary'\"\n                        [disabled]=\"controlDisabled || options?.readonly\"\n                        [indeterminate]=\"someChecked\"\n                        [name]=\"options?.name\"\n                        (blur)=\"options.showErrors = true\"\n                        (change)=\"updateAllValues($event)\">\n              <span class=\"checkbox-name\" [innerHTML]=\"options?.name\"></span>\n          </mat-checkbox>\n          <label *ngIf=\"options?.title\"\n                 class=\"title\"\n                 [class]=\"options?.labelHtmlClass || ''\"\n                 [style.display]=\"options?.notitle ? 'none' : ''\"\n                 [innerHTML]=\"options?.title\"></label>\n          <ul class=\"checkbox-list\" [class.horizontal-list]=\"horizontalList\">\n              <li *ngFor=\"let checkboxItem of checkboxList\"\n                  [class]=\"options?.htmlClass || ''\">\n                  <mat-checkbox type=\"checkbox\"\n                                [(ngModel)]=\"checkboxItem.checked\"\n                                [color]=\"options?.color || 'primary'\"\n                                [disabled]=\"controlDisabled || options?.readonly\"\n                                [name]=\"checkboxItem?.name\"\n                                (blur)=\"options.showErrors = true\"\n                                (change)=\"updateValue()\">\n                      <span class=\"checkbox-name\" [innerHTML]=\"checkboxItem?.name\"></span>\n                  </mat-checkbox>\n              </li>\n          </ul>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>","styles":["\n      .title {\n          font-weight: bold;\n      }\n\n      .checkbox-list {\n          list-style-type: none;\n      }\n\n      .horizontal-list > li {\n          display: inline-block;\n          margin-right: 10px;\n          zoom: 1;\n      }\n\n      .checkbox-name {\n          white-space: nowrap;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":77,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":78,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":79,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":82,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}],"updateAllValues":[{"__symbolic":"method"}]}},"MaterialChipListComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"material-chip-list-widget","template":""}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":17,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":18,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":19,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":22,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialDatepickerComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"material-datepicker-widget","template":"\n      <mat-form-field [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [max]=\"options?.maximum\"\n                 [matDatepicker]=\"picker\"\n                 [min]=\"options?.minimum\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [disabled]=\"controlDisabled || options?.readonly\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [max]=\"options?.maximum\"\n                 [matDatepicker]=\"picker\"\n                 [min]=\"options?.minimum\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [value]=\"dateValue\"\n                 (blur)=\"options.showErrors = true\"\n                 (change)=\"updateValue($event)\"\n                 (input)=\"updateValue($event)\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n          <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      </mat-form-field>\n      <mat-datepicker #picker></mat-datepicker>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>","styles":["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":73,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":74,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":75,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":78,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"setControlDate":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialFileComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"material-file-widget","template":""}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":17,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":18,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":19,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":22,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialInputComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"material-input-widget","template":"\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.maxlength]=\"options?.maxLength\"\n                 [attr.minlength]=\"options?.minLength\"\n                 [attr.pattern]=\"options?.pattern\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"layoutNode?.type\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                 [attr.maxlength]=\"options?.maxLength\"\n                 [attr.minlength]=\"options?.minLength\"\n                 [attr.pattern]=\"options?.pattern\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"layoutNode?.type\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\"\n                 (blur)=\"options.showErrors = true\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n          <mat-autocomplete *ngIf=\"options?.typeahead?.source\">\n              <mat-option *ngFor=\"let word of options?.typeahead?.source\"\n                          [value]=\"word\">{{word}}</mat-option>\n          </mat-autocomplete>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>","styles":["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":77,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":78,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":79,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":82,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialNumberComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"material-number-widget","template":"\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <input matInput *ngIf=\"boundControl\"\n                 [formControl]=\"formControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"'number'\"\n                 (blur)=\"options.showErrors = true\">\n          <input matInput *ngIf=\"!boundControl\"\n                 [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                 [attr.max]=\"options?.maximum\"\n                 [attr.min]=\"options?.minimum\"\n                 [attr.step]=\"options?.multipleOf || options?.step || 'any'\"\n                 [disabled]=\"controlDisabled\"\n                 [id]=\"'control' + layoutNode?._id\"\n                 [name]=\"controlName\"\n                 [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                 [readonly]=\"options?.readonly ? 'readonly' : null\"\n                 [required]=\"options?.required\"\n                 [style.width]=\"'100%'\"\n                 [type]=\"'number'\"\n                 [value]=\"controlValue\"\n                 (input)=\"updateValue($event)\"\n                 (blur)=\"options.showErrors = true\">\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"layoutNode?.type === 'range'\" align=\"start\"\n                    [innerHTML]=\"controlValue\"></mat-hint>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>","styles":["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":76,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":77,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":78,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":81,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialOneOfComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"material-one-of-widget","template":""}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":17,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":18,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":19,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":22,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialRadiosComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"material-radios-widget","template":"\n      <div>\n          <div *ngIf=\"options?.title\">\n              <label\n                      [attr.for]=\"'control' + layoutNode?._id\"\n                      [class]=\"options?.labelHtmlClass || ''\"\n                      [style.display]=\"options?.notitle ? 'none' : ''\"\n                      [innerHTML]=\"options?.title\"></label>\n          </div>\n          <mat-radio-group *ngIf=\"boundControl\"\n                           [formControl]=\"formControl\"\n                           [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                           [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                           [attr.required]=\"options?.required\"\n                           [style.flex-direction]=\"flexDirection\"\n                           [name]=\"controlName\"\n                           (blur)=\"options.showErrors = true\">\n              <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n                                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                [value]=\"radioItem?.value\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-radio-group *ngIf=\"!boundControl\"\n                           [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                           [attr.readonly]=\"options?.readonly ? 'readonly' : null\"\n                           [attr.required]=\"options?.required\"\n                           [style.flex-direction]=\"flexDirection\"\n                           [disabled]=\"controlDisabled || options?.readonly\"\n                           [name]=\"controlName\"\n                           [value]=\"controlValue\">\n              <mat-radio-button *ngFor=\"let radioItem of radiosList\"\n                                [id]=\"'control' + layoutNode?._id + '/' + radioItem?.name\"\n                                [value]=\"radioItem?.value\"\n                                (click)=\"updateValue(radioItem?.value)\">\n                  <span [innerHTML]=\"radioItem?.name\"></span>\n              </mat-radio-button>\n          </mat-radio-group>\n          <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                     [innerHTML]=\"options?.errorMessage\"></mat-error>\n      </div>","styles":["\n      mat-radio-group {\n          display: inline-flex;\n      }\n\n      mat-radio-button {\n          margin: 2px;\n      }\n\n      mat-error {\n          font-size: 75%;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":70,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":71,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":72,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":75,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialSelectComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"material-select-widget","template":"\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <mat-select *ngIf=\"boundControl\"\n                      [formControl]=\"formControl\"\n                      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                      [attr.name]=\"controlName\"\n                      [id]=\"'control' + layoutNode?._id\"\n                      [multiple]=\"options?.multiple\"\n                      [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                      [required]=\"options?.required\"\n                      [style.width]=\"'100%'\"\n                      (blur)=\"options.showErrors = true\">\n              <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n                  <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n                              [value]=\"selectItem?.value\">\n                      <span [innerHTML]=\"selectItem?.name\"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n                                [label]=\"selectItem?.group\">\n                      <mat-option *ngFor=\"let subItem of selectItem.items\"\n                                  [value]=\"subItem?.value\">\n                          <span [innerHTML]=\"subItem?.name\"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <mat-select *ngIf=\"!boundControl\"\n                      [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                      [attr.name]=\"controlName\"\n                      [disabled]=\"controlDisabled || options?.readonly\"\n                      [id]=\"'control' + layoutNode?._id\"\n                      [multiple]=\"options?.multiple\"\n                      [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                      [required]=\"options?.required\"\n                      [style.width]=\"'100%'\"\n                      [value]=\"controlValue\"\n                      (blur)=\"options.showErrors = true\"\n                      (selectionChange)=\"updateValue($event)\">\n              <ng-template ngFor let-selectItem [ngForOf]=\"selectList\">\n                  <mat-option *ngIf=\"!isArray(selectItem?.items)\"\n                              [attr.selected]=\"selectItem?.value === controlValue\"\n                              [value]=\"selectItem?.value\">\n                      <span [innerHTML]=\"selectItem?.name\"></span>\n                  </mat-option>\n                  <mat-optgroup *ngIf=\"isArray(selectItem?.items)\"\n                                [label]=\"selectItem?.group\">\n                      <mat-option *ngFor=\"let subItem of selectItem.items\"\n                                  [attr.selected]=\"subItem?.value === controlValue\"\n                                  [value]=\"subItem?.value\">\n                          <span [innerHTML]=\"subItem?.name\"></span>\n                      </mat-option>\n                  </mat-optgroup>\n              </ng-template>\n          </mat-select>\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>","styles":["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":95,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":96,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":97,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":100,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialSliderComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"material-slider-widget","template":"\n      <mat-slider thumbLabel *ngIf=\"boundControl\"\n                  [formControl]=\"formControl\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [max]=\"options?.maximum\"\n                  [min]=\"options?.minimum\"\n                  [step]=\"options?.multipleOf || options?.step || 'any'\"\n                  [style.width]=\"'100%'\"\n                  (blur)=\"options.showErrors = true\"></mat-slider>\n      <mat-slider thumbLabel *ngIf=\"!boundControl\"\n                  [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                  [disabled]=\"controlDisabled || options?.readonly\"\n                  [id]=\"'control' + layoutNode?._id\"\n                  [max]=\"options?.maximum\"\n                  [min]=\"options?.minimum\"\n                  [step]=\"options?.multipleOf || options?.step || 'any'\"\n                  [style.width]=\"'100%'\"\n                  [value]=\"controlValue\"\n                  (blur)=\"options.showErrors = true\"\n                  (change)=\"updateValue($event)\"></mat-slider>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>","styles":[" mat-error {\n      font-size: 75%;\n  } "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":44,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":45,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":46,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":49,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialStepperComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"material-stepper-widget","template":""}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":17,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":18,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":19,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":22,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialTabsComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"material-tabs-widget","template":"\n      <nav mat-tab-nav-bar\n           [attr.aria-label]=\"options?.label || options?.title || ''\"\n           [style.width]=\"'100%'\">\n          <a mat-tab-link *ngFor=\"let item of layoutNode?.items; let i = index\"\n             [active]=\"selectedItem === i\"\n             (click)=\"select(i)\">\n          <span *ngIf=\"showAddTab || item.type !== '$ref'\"\n                [innerHTML]=\"setTabTitle(item, i)\"></span>\n          </a>\n      </nav>\n      <div *ngFor=\"let layoutItem of layoutNode?.items; let i = index\"\n           [class]=\"options?.htmlClass || ''\">\n          <select-framework-widget *ngIf=\"selectedItem === i\"\n                                   [class]=\"(options?.fieldHtmlClass || '') + ' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')\"\n                                   [dataIndex]=\"layoutNode?.dataType === 'array' ? (dataIndex || []).concat(i) : dataIndex\"\n                                   [layoutIndex]=\"(layoutIndex || []).concat(i)\"\n                                   [layoutNode]=\"layoutItem\"></select-framework-widget>\n      </div>","styles":[" a {\n      cursor: pointer;\n  } "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":33,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":34,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":35,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":38,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"select":[{"__symbolic":"method"}],"updateControl":[{"__symbolic":"method"}],"setTabTitle":[{"__symbolic":"method"}]}},"MaterialTextareaComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"material-textarea-widget","template":"\n      <mat-form-field\n              [class]=\"options?.htmlClass || ''\"\n              [floatLabel]=\"options?.floatPlaceholder || (options?.notitle ? 'never' : 'auto')\"\n              [style.width]=\"'100%'\">\n      <span matPrefix *ngIf=\"options?.prefix || options?.fieldAddonLeft\"\n            [innerHTML]=\"options?.prefix || options?.fieldAddonLeft\"></span>\n          <textarea matInput *ngIf=\"boundControl\"\n                    [formControl]=\"formControl\"\n                    [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                    [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                    [attr.maxlength]=\"options?.maxLength\"\n                    [attr.minlength]=\"options?.minLength\"\n                    [attr.pattern]=\"options?.pattern\"\n                    [required]=\"options?.required\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    [name]=\"controlName\"\n                    [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                    [readonly]=\"options?.readonly ? 'readonly' : null\"\n                    [style.width]=\"'100%'\"\n                    (blur)=\"options.showErrors = true\"></textarea>\n          <textarea matInput *ngIf=\"!boundControl\"\n                    [attr.aria-describedby]=\"'control' + layoutNode?._id + 'Status'\"\n                    [attr.list]=\"'control' + layoutNode?._id + 'Autocomplete'\"\n                    [attr.maxlength]=\"options?.maxLength\"\n                    [attr.minlength]=\"options?.minLength\"\n                    [attr.pattern]=\"options?.pattern\"\n                    [required]=\"options?.required\"\n                    [disabled]=\"controlDisabled\"\n                    [id]=\"'control' + layoutNode?._id\"\n                    [name]=\"controlName\"\n                    [placeholder]=\"options?.notitle ? options?.placeholder : options?.title\"\n                    [readonly]=\"options?.readonly ? 'readonly' : null\"\n                    [style.width]=\"'100%'\"\n                    [value]=\"controlValue\"\n                    (input)=\"updateValue($event)\"\n                    (blur)=\"options.showErrors = true\"></textarea>\n          <span matSuffix *ngIf=\"options?.suffix || options?.fieldAddonRight\"\n                [innerHTML]=\"options?.suffix || options?.fieldAddonRight\"></span>\n          <mat-hint *ngIf=\"options?.description && (!options?.showErrors || !options?.errorMessage)\"\n                    align=\"end\" [innerHTML]=\"options?.description\"></mat-hint>\n      </mat-form-field>\n      <mat-error *ngIf=\"options?.showErrors && options?.errorMessage\"\n                 [innerHTML]=\"options?.errorMessage\"></mat-error>","styles":["\n      mat-error {\n          font-size: 75%;\n          margin-top: -1rem;\n          margin-bottom: 0.5rem;\n      }\n\n      ::ng-deep mat-form-field .mat-form-field-wrapper .mat-form-field-flex\n      .mat-form-field-infix {\n          width: initial;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":70,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":71,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":72,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":75,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}]}},"MaterialDesignFrameworkComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"material-design-framework","template":"\n      <div\n              [class.array-item]=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"\n              [orderable]=\"isOrderable\"\n              [dataIndex]=\"dataIndex\"\n              [layoutIndex]=\"layoutIndex\"\n              [layoutNode]=\"widgetLayoutNode\">\n          <svg *ngIf=\"showRemoveButton\"\n               xmlns=\"http://www.w3.org/2000/svg\"\n               height=\"18\" width=\"18\" viewBox=\"0 0 24 24\"\n               class=\"close-button\"\n               (click)=\"removeItem()\">\n              <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\"/>\n          </svg>\n          <select-widget-widget\n                  [dataIndex]=\"dataIndex\"\n                  [layoutIndex]=\"layoutIndex\"\n                  [layoutNode]=\"widgetLayoutNode\"></select-widget-widget>\n      </div>\n      <div class=\"spacer\" *ngIf=\"widgetLayoutNode?.arrayItem && widgetLayoutNode?.type !== '$ref'\"></div>","styles":["\n      .array-item {\n          border-radius: 2px;\n          box-shadow: 0 3px 1px -2px rgba(0, 0, 0, .2),\n          0 2px 2px 0 rgba(0, 0, 0, .14),\n          0 1px 5px 0 rgba(0, 0, 0, .12);\n          padding: 6px;\n          position: relative;\n          transition: all 280ms cubic-bezier(.4, 0, .2, 1);\n      }\n\n      .close-button {\n          cursor: pointer;\n          position: absolute;\n          top: 6px;\n          right: 6px;\n          fill: rgba(0, 0, 0, .4);\n          visibility: hidden;\n          z-index: 500;\n      }\n\n      .close-button:hover {\n          fill: rgba(0, 0, 0, .8);\n      }\n\n      .array-item:hover > .close-button {\n          visibility: visible;\n      }\n\n      .spacer {\n          margin: 6px 0;\n      }\n\n      [draggable=true]:hover {\n          box-shadow: 0 5px 5px -3px rgba(0, 0, 0, .2),\n          0 8px 10px 1px rgba(0, 0, 0, .14),\n          0 3px 14px 2px rgba(0, 0, 0, .12);\n          cursor: move;\n          z-index: 10;\n      }\n\n      [draggable=true].drag-target-top {\n          box-shadow: 0 -2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n\n      [draggable=true].drag-target-bottom {\n          box-shadow: 0 2px 0 #000;\n          position: relative;\n          z-index: 20;\n      }\n  "]}]}],"members":{"layoutNode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":91,"character":3}}]}],"layoutIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":92,"character":3}}]}],"dataIndex":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":93,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":96,"character":28},{"__symbolic":"reference","module":"@ngsf/widget-library","name":"JsonSchemaFormService","line":97,"character":17}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"initializeFramework":[{"__symbolic":"method"}],"updateTitle":[{"__symbolic":"method"}],"removeItem":[{"__symbolic":"method"}]}},"MaterialDesignFramework":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"@ngsf/common","name":"Framework","line":25,"character":45},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":24,"character":1}}],"members":{}},"MaterialDesignFrameworkModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":58,"character":1},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":60,"character":4},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":61,"character":4},{"__symbolic":"reference","module":"@angular/forms","name":"ReactiveFormsModule","line":62,"character":4},{"__symbolic":"reference","module":"@angular/flex-layout","name":"FlexLayoutModule","line":63,"character":4},{"__symbolic":"reference","module":"@angular/material/autocomplete","name":"MatAutocompleteModule","line":66,"character":4},{"__symbolic":"reference","module":"@angular/material/button","name":"MatButtonModule","line":67,"character":4},{"__symbolic":"reference","module":"@angular/material/button-toggle","name":"MatButtonToggleModule","line":68,"character":4},{"__symbolic":"reference","module":"@angular/material/card","name":"MatCardModule","line":69,"character":4},{"__symbolic":"reference","module":"@angular/material/checkbox","name":"MatCheckboxModule","line":70,"character":4},{"__symbolic":"reference","module":"@angular/material/chips","name":"MatChipsModule","line":71,"character":4},{"__symbolic":"reference","module":"@angular/material/datepicker","name":"MatDatepickerModule","line":72,"character":4},{"__symbolic":"reference","module":"@angular/material/expansion","name":"MatExpansionModule","line":73,"character":4},{"__symbolic":"reference","module":"@angular/material/form-field","name":"MatFormFieldModule","line":74,"character":4},{"__symbolic":"reference","module":"@angular/material/icon","name":"MatIconModule","line":75,"character":4},{"__symbolic":"reference","module":"@angular/material/input","name":"MatInputModule","line":76,"character":4},{"__symbolic":"reference","module":"@angular/material/core","name":"MatNativeDateModule","line":77,"character":4},{"__symbolic":"reference","module":"@angular/material/radio","name":"MatRadioModule","line":78,"character":4},{"__symbolic":"reference","module":"@angular/material/select","name":"MatSelectModule","line":79,"character":4},{"__symbolic":"reference","module":"@angular/material/slider","name":"MatSliderModule","line":80,"character":4},{"__symbolic":"reference","module":"@angular/material/slide-toggle","name":"MatSlideToggleModule","line":81,"character":4},{"__symbolic":"reference","module":"@angular/material/stepper","name":"MatStepperModule","line":82,"character":4},{"__symbolic":"reference","module":"@angular/material/tabs","name":"MatTabsModule","line":83,"character":4},{"__symbolic":"reference","module":"@angular/material/tooltip","name":"MatTooltipModule","line":84,"character":4},{"__symbolic":"reference","module":"@ngsf/widget-library","name":"WidgetLibraryModule","line":86,"character":4}],"declarations":[{"__symbolic":"reference","name":"FlexLayoutRootComponent"},{"__symbolic":"reference","name":"FlexLayoutSectionComponent"},{"__symbolic":"reference","name":"MaterialAddReferenceComponent"},{"__symbolic":"reference","name":"MaterialOneOfComponent"},{"__symbolic":"reference","name":"MaterialButtonComponent"},{"__symbolic":"reference","name":"MaterialButtonGroupComponent"},{"__symbolic":"reference","name":"MaterialCheckboxComponent"},{"__symbolic":"reference","name":"MaterialCheckboxesComponent"},{"__symbolic":"reference","name":"MaterialChipListComponent"},{"__symbolic":"reference","name":"MaterialDatepickerComponent"},{"__symbolic":"reference","name":"MaterialFileComponent"},{"__symbolic":"reference","name":"MaterialInputComponent"},{"__symbolic":"reference","name":"MaterialNumberComponent"},{"__symbolic":"reference","name":"MaterialRadiosComponent"},{"__symbolic":"reference","name":"MaterialSelectComponent"},{"__symbolic":"reference","name":"MaterialSliderComponent"},{"__symbolic":"reference","name":"MaterialStepperComponent"},{"__symbolic":"reference","name":"MaterialTabsComponent"},{"__symbolic":"reference","name":"MaterialTextareaComponent"},{"__symbolic":"reference","name":"MaterialDesignFrameworkComponent"}],"exports":[{"__symbolic":"reference","name":"FlexLayoutRootComponent"},{"__symbolic":"reference","name":"FlexLayoutSectionComponent"},{"__symbolic":"reference","name":"MaterialAddReferenceComponent"},{"__symbolic":"reference","name":"MaterialOneOfComponent"},{"__symbolic":"reference","name":"MaterialButtonComponent"},{"__symbolic":"reference","name":"MaterialButtonGroupComponent"},{"__symbolic":"reference","name":"MaterialCheckboxComponent"},{"__symbolic":"reference","name":"MaterialCheckboxesComponent"},{"__symbolic":"reference","name":"MaterialChipListComponent"},{"__symbolic":"reference","name":"MaterialDatepickerComponent"},{"__symbolic":"reference","name":"MaterialFileComponent"},{"__symbolic":"reference","name":"MaterialInputComponent"},{"__symbolic":"reference","name":"MaterialNumberComponent"},{"__symbolic":"reference","name":"MaterialRadiosComponent"},{"__symbolic":"reference","name":"MaterialSelectComponent"},{"__symbolic":"reference","name":"MaterialSliderComponent"},{"__symbolic":"reference","name":"MaterialStepperComponent"},{"__symbolic":"reference","name":"MaterialTabsComponent"},{"__symbolic":"reference","name":"MaterialTextareaComponent"},{"__symbolic":"reference","name":"MaterialDesignFrameworkComponent"}],"entryComponents":[{"__symbolic":"reference","name":"FlexLayoutRootComponent"},{"__symbolic":"reference","name":"FlexLayoutSectionComponent"},{"__symbolic":"reference","name":"MaterialAddReferenceComponent"},{"__symbolic":"reference","name":"MaterialOneOfComponent"},{"__symbolic":"reference","name":"MaterialButtonComponent"},{"__symbolic":"reference","name":"MaterialButtonGroupComponent"},{"__symbolic":"reference","name":"MaterialCheckboxComponent"},{"__symbolic":"reference","name":"MaterialCheckboxesComponent"},{"__symbolic":"reference","name":"MaterialChipListComponent"},{"__symbolic":"reference","name":"MaterialDatepickerComponent"},{"__symbolic":"reference","name":"MaterialFileComponent"},{"__symbolic":"reference","name":"MaterialInputComponent"},{"__symbolic":"reference","name":"MaterialNumberComponent"},{"__symbolic":"reference","name":"MaterialRadiosComponent"},{"__symbolic":"reference","name":"MaterialSelectComponent"},{"__symbolic":"reference","name":"MaterialSliderComponent"},{"__symbolic":"reference","name":"MaterialStepperComponent"},{"__symbolic":"reference","name":"MaterialTabsComponent"},{"__symbolic":"reference","name":"MaterialTextareaComponent"},{"__symbolic":"reference","name":"MaterialDesignFrameworkComponent"}]}]}],"members":{},"statics":{"forRoot":{"__symbolic":"function","parameters":[],"value":{"ngModule":{"__symbolic":"reference","name":"MaterialDesignFrameworkModule"},"providers":[{"provide":{"__symbolic":"reference","module":"@ngsf/common","name":"Framework","line":164,"character":19},"useClass":{"__symbolic":"reference","name":"MaterialDesignFramework"},"multi":true}]}}}}},"origins":{"FlexLayoutRootComponent":"./lib/components/flex-layout-root.component","FlexLayoutSectionComponent":"./lib/components/flex-layout-section.component","MaterialAddReferenceComponent":"./lib/components/material-add-reference.component","MaterialButtonComponent":"./lib/components/material-button.component","MaterialButtonGroupComponent":"./lib/components/material-button-group.component","MaterialCheckboxComponent":"./lib/components/material-checkbox.component","MaterialCheckboxesComponent":"./lib/components/material-checkboxes.component","MaterialChipListComponent":"./lib/components/material-chip-list.component","MaterialDatepickerComponent":"./lib/components/material-datepicker.component","MaterialFileComponent":"./lib/components/material-file.component","MaterialInputComponent":"./lib/components/material-input.component","MaterialNumberComponent":"./lib/components/material-number.component","MaterialOneOfComponent":"./lib/components/material-one-of.component","MaterialRadiosComponent":"./lib/components/material-radios.component","MaterialSelectComponent":"./lib/components/material-select.component","MaterialSliderComponent":"./lib/components/material-slider.component","MaterialStepperComponent":"./lib/components/material-stepper.component","MaterialTabsComponent":"./lib/components/material-tabs.component","MaterialTextareaComponent":"./lib/components/material-textarea.component","MaterialDesignFrameworkComponent":"./lib/components/material-design-framework.component","MaterialDesignFramework":"./lib/material-design.framework","MaterialDesignFrameworkModule":"./lib/material-design-framework.module"},"importAs":"@ngsf/material-design-framework"}